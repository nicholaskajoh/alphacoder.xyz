<?xml-stylesheet href="/rss.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>I code, therefore I am on Alpha Coder</title>
    <link>https://alphacoder.xyz/</link>
    <description>Recent content in I code, therefore I am on Alpha Coder</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright 2017 to ∞. Nicholas Kajoh. All rights reserved.</copyright>
    
        <atom:link href="https://alphacoder.xyz/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>The case for microservices architecture</title>
        <link>https://alphacoder.xyz/microservices-use-case/</link>
        <pubDate>Fri, 24 Mar 2023 00:00:00 +0000</pubDate>
        
        <guid>https://alphacoder.xyz/microservices-use-case/</guid>
        <description>Alpha Coder https://alphacoder.xyz/microservices-use-case/ -&lt;p&gt;The buzz seems to have died down now, but a few years ago, microservices architecture seemed to be all the rage. Everyone and their mom seemed to be transitioning from monolith to microservices or building their software from the get go using this architecture. At some point, it appeared to be a contest on the number of microservices you were running in production, judging by the blog posts and conference talks at least.&lt;/p&gt;
&lt;p&gt;Like the hangover after a crazy night out, we seem to have realized &lt;a href=&#34;https://www.youtube.com/watch?v=kb-m2fasdDY&#34;&gt;it&amp;rsquo;s not all fun and games&lt;/a&gt;. As with most software engineering solutions, there are tradeoffs. And knowing those tradeoffs puts you in a better position to choose the right tool for the job—rather than using something because some big/successful company is using it or because it&amp;rsquo;s &amp;ldquo;cool&amp;rdquo;.&lt;/p&gt;
&lt;h1 id=&#34;why-microservices&#34;&gt;Why microservices?&lt;/h1&gt;
&lt;p&gt;It bothered me a little bit that I didn.t really get the use case for microservices. Why would someone complicate their system by making it distributed? What do you get in return for this complexity? Scalability? Higher availability? But you can already achieve these with a monolith, no? It didn&amp;rsquo;t make much sense to me.&lt;/p&gt;
&lt;p&gt;It would take several years to get it. The revelation that made it all make sense was finding out that microservices architecture is not a technology solution. It&amp;rsquo;s a people one!&lt;/p&gt;
&lt;p&gt;This might seem very obvious, but software is built by people. To be able to build software (especially a large and complicated one) quickly and efficiently, you need to organize people in a way that makes communication fast (or unnecessary), and empower them to own the piece of the software pie they are responsible for and its lifecycle. This is why we have team topologies built around self-organization and cross-functionality.&lt;/p&gt;
&lt;p&gt;Microservices architecture exist so that teams can fully own the products and features they&amp;rsquo;re responsible for. This means being able to change and release code whenever they want. The idea is that decentralized decision-making is the better way to organize a large group of people towards achieving a common goal.&lt;/p&gt;
&lt;p&gt;This might sound counter-intuitive, but when you think about it, it makes a lot of sense. Communication becomes a bottleneck the larger an organization grows. So if you centralize decision-making, your speed of execution would be as fast (or rather, as slow) as it takes information to permeate the organization, not to talk of the various ways things can be misunderstood and misinterpreted.&lt;/p&gt;
&lt;p&gt;Beyond that, local decision-making is usually better because executors are typically subject-matter experts. A chef should be the one deciding what ingredients to buy and when to buy them, not a restaurant CEO or manager. He probably knows more about foodstuff than they do. In the same vein, you should be able to decide how to change your code, and when/how often to deploy it, not the head of engineering or operations team. You know more about the code than they do, because you probably wrote it and/or work on it everyday.&lt;/p&gt;
&lt;h1 id=&#34;the-faux-benefits&#34;&gt;The faux benefits&lt;/h1&gt;
&lt;p&gt;When people justify their use of microservices, they tend to mention its supposed pros. It turns out that most of them are faux benefits. Yes, you get these benefits by using microservices, but they are not worth the complexity you get in return in my opinion. More importantly, they can be achieved without the use of this architecture.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Scalability:&lt;/strong&gt; Microservices architecture can make your system scalable (a result of distributing load across multiple services), but &lt;a href=&#34;https://alphacoder.xyz/web-app-scaling-techniques/&#34;&gt;there are easier ways to achieve scalability&lt;/a&gt;, such as load balancing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Encapsulation:&lt;/strong&gt; Each microservice is a container exposing an interface (such as a REST API) through which it may be consumed. This hides its implementation details, making it easier to understand, reuse and modify. The microservice &amp;ldquo;container&amp;rdquo; also lends itself well to network-level isolation e.g external vs internal services, which improves security. But like with scalability, there are several other cheaper ways to encapsulate the various components of your system e.g modules/packages, OOP, functions/subroutines, firewall rules etc. You don&amp;rsquo;t need microservices for this!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flexibility:&lt;/strong&gt; Microservices architecture lets you use the best tool for the job. For example, you could use a language with high runtime performance for parts of your system where you want very low latencies. Or use the best database or queuing system for the specific problem you want to solve. In practice, this kind of flexibility causes more problems than it solves. It requires lots of time and money to support some of these technologies, so you want as much standardization as possible. Standardization also makes it easier for developers to move around and collaborate with/learn from each other.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;from-monolith-to-distributed-monolith&#34;&gt;From monolith to distributed monolith&lt;/h1&gt;
&lt;p&gt;In a bid to adopt microservices, many an organization end up building distributed monoliths, which give you all the disadvantages of microservices architecture without any of the benefits. If teams can&amp;rsquo;t deploy their code independently, or have to coordinate with other teams to do so, you have a distributed monolith on your hands. If your team topology doesn&amp;rsquo;t allow autonomy, you have a bottleneck upstream. Microservices won&amp;rsquo;t give you better pace. In fact, you&amp;rsquo;d literally be adding latency to your system.&lt;/p&gt;
&lt;h1 id=&#34;how-to-get-microservices-right&#34;&gt;How to get microservices right&lt;/h1&gt;
&lt;p&gt;To make microservices architecture work, you need to figure out a couple things on the technology and people side.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Trust:&lt;/strong&gt; If you&amp;rsquo;re going to be letting people push to production at will, you want to be able to trust them to do the right thing. So you want competent and experienced engineers. This means your hiring/onboarding pipelines and engineering culture must be on point.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Autonomous teams:&lt;/strong&gt; You need teams that are small, independent and mission-driven to get the best out of the microservices architecture. These are usually teams tasked with delivering a certain product or set of features to the customer. Microservices won&amp;rsquo;t make a difference if you have large teams, do top-down decision-making or organize around business functions rather than business goals.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Self-service platforms:&lt;/strong&gt; For teams to be autonomous, they need to depend as little as possible on other teams. This means providing a comprehensive self-service platform for developing and operating their software. If you are practicing &amp;ldquo;request-driven development&amp;rdquo; (i.e teams always need help from other teams to get stuff done), you are not ready.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;One service per team:&lt;/strong&gt; The term &amp;ldquo;microservices&amp;rdquo; is a bit of a misnomer. It doesn&amp;rsquo;t mean your services need to be micro i.e as small as possible. The goal is not to have as many services as possible. A rule of thumb is one service per team. If you have chosen the right team topology, this would usually mean one service per product/feature. One service housing multiple products/features is also fine, unless you have a team working on two or more unrelated features—in which case you have the wrong team setup. Going with multiple services per team is not worth the increase in development and operational complexity, in my opinion. If a team gets split up, their service should be split as well so that the resulting teams maintain their autonomy. If two teams get merged, it&amp;rsquo;s probably not worth merging their services into one. But if the development resources are available to do so and you don&amp;rsquo;t envision a split in future, go for it!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Observability tooling:&lt;/strong&gt; Monitoring the state of your system is important. It becomes even more important when adopting microservices because of the higher reliance on inter-process communication. You need to provide a standardized observability stack that allows you collect and analyze metrics, logs and traces across all the services you&amp;rsquo;re running, in real time. It also helps to provide discovery tools for developers so they can know what services are running where, and how their service is interacting with the rest of the system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Development tooling:&lt;/strong&gt; You need solid development tools and processes to tame the complexity of microservices. Without this, it&amp;rsquo;s going to be a mess! Here are some tools/processes you might want to consider:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Monorepo:&lt;/strong&gt; To &lt;a href=&#34;https://alphacoder.xyz/monorepo-use-case/&#34;&gt;eliminate versioning&lt;/a&gt; and simplify cross-cutting changes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Build automation:&lt;/strong&gt; To build/test as much or little of your system as you need.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Containerization:&lt;/strong&gt; To simplify development and deployment by packaging your code and all its dependencies together.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Remote development environment:&lt;/strong&gt; Because your developers might not be able to run the entire system on their computer.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;is-it-for-me&#34;&gt;Is it for me?&lt;/h1&gt;
&lt;p&gt;Here&amp;rsquo;s some questions that can help you out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Has shipping code become the bottleneck preventing you from delivering value to your customers as quickly as you&amp;rsquo;d like?&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Have you explored all other avenues to increase your velocity and it&amp;rsquo;s still not enough?&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Do you have all the ingredients needed to get microservices right? (see previous section)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you check all the boxes, microservices architecture could be the right choice for your organization. If not, maybe you should pass/wait a little bit more.&lt;/p&gt;
- https://alphacoder.xyz/microservices-use-case/ - Copyright 2017 to ∞. Nicholas Kajoh. All rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>What is readable code?</title>
        <link>https://alphacoder.xyz/what-is-readable-code/</link>
        <pubDate>Thu, 27 Oct 2022 00:00:00 +0000</pubDate>
        
        <guid>https://alphacoder.xyz/what-is-readable-code/</guid>
        <description>Alpha Coder https://alphacoder.xyz/what-is-readable-code/ -&lt;blockquote&gt;
&lt;p&gt;Any code that I didn’t write or wrote more than 6 months ago is unreadable! — you, probably&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Everyone writes readable code, and yet everyone complains about all the unreadable code they have to deal with on a daily. Of course, readability is subjective. But when developers say a certain piece of code is unreadable, they usually mean it requires high cognitive load to comprehend. So it makes sense that your code is usually readable to you regardless of how it looks because you wrote, and thus already understand it. Fortunately, there are simple things you can do when writing code to make it more readable to others—especially that poor soul who’d have to maintain your code 2 years from now.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Comment:&lt;/strong&gt; This might seem obvious, but adding comments to your code is a very effective way to make it readable. Make sure your comment answers “why?” not “how?” Your code is the how.
In addition to code comments, it also helps to write descriptive messages when committing code to your version control system.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Test:&lt;/strong&gt; An automated test is essentially a documentation of what a developer expects from their code. It can make it easier to understand a piece of code. And unlike comments, it’s less likely for a test to go stale because it’s usually run every time a change is made and will fail if its assertions are not met.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Format:&lt;/strong&gt; Consistent formatting makes code much easier on the eyes and thus faster to understand. Whatever code style you go for (i.e the case for variable names, type of indentation etc), make sure it’s consistent across your code base. You can enforce this using a linter.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Decompress:&lt;/strong&gt; Clever one-liners are nice and all, but they are difficult to unpack mentally as well as debug (with breakpoints). Same thing with nested function invocations i.e &lt;code&gt;a(b(c(d())))&lt;/code&gt;. If someone has to stare at a line of code you wrote for more than 5 seconds trying to understand what it does, you’re probably doing too much in that line.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Contextualize:&lt;/strong&gt; Your variable names should describe the data they reference and your function/method/class names should describe what they do and/or return. Also, avoid abbreviations and acronyms unless they’re well known or properly documented. It’s better to err on the side of verbosity. &lt;code&gt;batchSize&lt;/code&gt; is better than &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;transfer_account()&lt;/code&gt; is better than &lt;code&gt;tfr_acc()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
- https://alphacoder.xyz/what-is-readable-code/ - Copyright 2017 to ∞. Nicholas Kajoh. All rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>A scalable data structure for your configuration database</title>
        <link>https://alphacoder.xyz/config-db-data-structure/</link>
        <pubDate>Sun, 09 Oct 2022 00:00:00 +0000</pubDate>
        
        <guid>https://alphacoder.xyz/config-db-data-structure/</guid>
        <description>Alpha Coder https://alphacoder.xyz/config-db-data-structure/ -&lt;p&gt;Most software of reasonable complexity are configurable—that is, they allow you change their functionality through the use of flags/settings. While you could store configuration information in code or text files, for web apps, it’s more common to store them in databases. This allows you make changes to the configs at runtime i.e without having to restart or redeploy your app.&lt;/p&gt;
&lt;p&gt;In this article, I’ll be exploring the ways I thought about improving the config storage mechanism in a large enterprise system I worked on, which made use of thousands of configs. The issues I identified were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Configs scattered across multiple tables/databases and in different formats, making it difficult to provide a centralized view of the system’s configuration state:&lt;/strong&gt; Want to know if feature X is enabled? Easy-peasy! You only need to check that these 5 rows in these 3 different tables have these specific values. And there’s a different mechanism for determining feature Y’s state. This was made worse by the fact that not everyone had access to all the databases where configurations were stored. The solution here is creating a standard format for storing your configs and storing them in a single location to make access, query and analysis easier.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lack of schemas for configs, leading to type errors:&lt;/strong&gt; One time, someone updated a config with invalid data which brought a business-critical part of the system to its knees. I also had my fair share of breaking production because of silly mistakes like typos. Having a schema to validate changes goes a long way in preventing human error like this.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lack of documentation on what each config does:&lt;/strong&gt; You had to read and understand the code to know how the configs worked. This takes time and is not feasible for non-coders (such as a non-technical product owner), who should be able to change the configs without the aid of a developer. While detailed documentation on how to use certain configs would be invaluable to your team, a simple description would do a lot of good.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lack of audit logging:&lt;/strong&gt; Not all config modifications were logged so it was sometimes hard to figure out issues resulting from problematic configurations by correlating the changes with incidents. An audit logging system with view of what changed, how it changed and why goes a long way in helping an incident response team troubleshoot and resolve production issues. They could for example, query for all the changes that were made leading to an incident, and pull in the config owners/changers to help out.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lack of access for developers/product owners:&lt;/strong&gt; As a developer, I should be able to make changes to a config I created—or at lease someone on my team should. Having to open a change request ticket kind of defeats the purpose because it might even be faster to make the change in code and get it deployed. Also, a decision maker (such as a product owner or operations staff) should not have to pull in a developer when they want to change something. If they are allowed to make a decision about whether or not something should be changed, they should also be able to click a button or invoke an API endpoint to do so. Because only admin users could make changes to the config databases, it was unnecessarily stressful and time-consuming to get things done.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lack of automation for config state changes:&lt;/strong&gt; While we had circuit breakers for temporarily switching off or diverting traffic from failing services, we lacked the ability to temporarily toggle the switches ourselves. It was very common for someone to forget to switch something back on that they switched off a while ago. For instance, an on-call engineer would forget to switch a service that experienced a down time back on when the issue had been resolved. Having a functionality that allows the engineer to say “turn off service X for Y hours”, for example, could solve this.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;functional-configs&#34;&gt;Functional configs&lt;/h1&gt;
&lt;p&gt;The big takeaway from all these issues is that one should centralize their system’s configurations and organize them by function rather than product, service or feature. Of course, there are downsides to centralization such as introducing a bottleneck and a single point of failure, but for a system such as this, it’s a good trade-off in my opinion. Instead of having a config row, table or database for each product, service or feature, you could break down your configs by the following functions:&lt;/p&gt;
&lt;h2 id=&#34;feature-flags&#34;&gt;Feature flags&lt;/h2&gt;
&lt;p&gt;A feature flag is a config used for releasing new changes. There’s always some risk involved in deploying new code. You can manage that risk by putting new changes behind a feature. If something goes wrong, you can turn off your feature to mitigate the incident and then look into it later, instead of scrambling to deploy a fix or revert the change. Also, instead of releasing a feature to all your users, you could limit it to a small subset as a way to pilot the feature, and then gradually increase the traffic as you gain confidence that things are working as expected.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s important to factor in granularity when designing feature flags i.e&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Binary flags:&lt;/strong&gt; feature is enabled if flag is true and disabled when false.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Key-based flags:&lt;/strong&gt; feature is only enabled for entities (such a users or merchants) whose keys (like user ID and merchant name) have been specified.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Percentage-based flags:&lt;/strong&gt; feature is only enabled for a specified percentage of invocations e.g 10% of traffic.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You could create a &lt;code&gt;features&lt;/code&gt; table for your feature flags like so:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;feature_name&lt;/th&gt;
&lt;th&gt;&lt;div style=&#34;width:350px&#34;&gt;description&lt;/div&gt;&lt;/th&gt;
&lt;th&gt;enabled&lt;/th&gt;
&lt;th&gt;percentage&lt;/th&gt;
&lt;th&gt;enabled_for_entities&lt;/th&gt;
&lt;th&gt;entity_key&lt;/th&gt;
&lt;th&gt;cache_for_secs&lt;/th&gt;
&lt;th&gt;expires_at&lt;/th&gt;
&lt;th&gt;created_at&lt;/th&gt;
&lt;th&gt;updated_at&lt;/th&gt;
&lt;th&gt;&lt;div style=&#34;width:250px&#34;&gt;public (available to clients?)&lt;/div&gt;&lt;/th&gt;
&lt;th&gt;deleted_at&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;GOD_CLASS_REFACTOR_SHADOW_MODE&lt;/td&gt;
&lt;td&gt;The class that does everything and single-handedly runs this business has been broken down into 100+ smaller classes for readability and extensibility. We are running the new changes in shadow mode to ensure the outputs are correct. Enabling this flag will result in increased latency because we&amp;rsquo;ll be running both old and new code.&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;td&gt;2023-01-01 17:06:09&lt;/td&gt;
&lt;td&gt;2022-12-01 09:41:09&lt;/td&gt;
&lt;td&gt;2022-12-01 09:42:09&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;SHOW_NEW_PRODUCT_PAGE&lt;/td&gt;
&lt;td&gt;We’ve redesigned the product page using our fancy new design system. We want to pilot it with a few users to get feedback before rolling it out to everyone.&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;[1, 2, 69, 419, 420]&lt;/td&gt;
&lt;td&gt;users.id&lt;/td&gt;
&lt;td&gt;180&lt;/td&gt;
&lt;td&gt;2023-01-01 17:06:09&lt;/td&gt;
&lt;td&gt;2022-12-01 09:41:09&lt;/td&gt;
&lt;td&gt;2022-12-01 09:42:09&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;kill-switches&#34;&gt;Kill switches&lt;/h2&gt;
&lt;p&gt;A kill switch is just like a feature flag but it is permanent and meant for turning off components of your system when things go wrong or when you&amp;rsquo;re doing some maintenance. Say you’re an e-commerce store on Black Friday experiencing much more traffic than anticipated. You can use a kill switch to turn off non-business-critical parts of your system (like product recommendations) so that the more important components (like checkout and payments) can breathe.&lt;/p&gt;
&lt;p&gt;You could create a &lt;code&gt;switchboard&lt;/code&gt; table for your kill switches:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;switch_name&lt;/th&gt;
&lt;th&gt;&lt;div style=&#34;width:350px&#34;&gt;description&lt;/div&gt;&lt;/th&gt;
&lt;th&gt;enabled&lt;/th&gt;
&lt;th&gt;percentage&lt;/th&gt;
&lt;th&gt;enabled_for_entities&lt;/th&gt;
&lt;th&gt;entity_key&lt;/th&gt;
&lt;th&gt;cache_for_secs&lt;/th&gt;
&lt;th&gt;created_at&lt;/th&gt;
&lt;th&gt;updated_at&lt;/th&gt;
&lt;th&gt;deleted_at&lt;/th&gt;
&lt;th&gt;public&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;PRODUCT_RECOMMENDATION_SERVICE&lt;/td&gt;
&lt;td&gt;Recommendation system that suggests new products to users based on their purchase and browsing history.&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;69&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;td&gt;420&lt;/td&gt;
&lt;td&gt;2022-12-01 09:41:09&lt;/td&gt;
&lt;td&gt;2022-12-01 09:42:09&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;application-configs&#34;&gt;Application configs&lt;/h2&gt;
&lt;p&gt;These are configurations for variables in your application that you might want or need to change at runtime e.g the default rate limit for an endpoint or the API URL for your payment service provider.&lt;/p&gt;
&lt;p&gt;Say you need to send your users notifications via SMS, so you decide to build an SMS notification service for your product. Perhaps, there’s no one SMS provider that can send SMSes in all the countries you operate. More so, local providers offer better delivery rates and pricing. And you want to have backups should a provider experience a downtime. You have decided that the best solution would be to integrate multiple SMS providers. You could structure the configs for this application/service like this:&lt;/p&gt;
&lt;p&gt;Table: &lt;code&gt;data_types&lt;/code&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;&lt;div style=&#34;width:200px&#34;&gt;description&lt;/div&gt;&lt;/th&gt;
&lt;th&gt;&lt;div style=&#34;width:400px&#34;&gt;validator (JSON schema)&lt;/div&gt;&lt;/th&gt;
&lt;th&gt;default_value&lt;/th&gt;
&lt;th&gt;&lt;div style=&#34;width:350px&#34;&gt;cardinality (max number of configs of a given type per table/account; -1 =&amp;gt; infinite)&lt;/div&gt;&lt;/th&gt;
&lt;th&gt;&lt;div style=&#34;width:300px&#34;&gt;account_configurable (can an account holder modify this config?)&lt;/div&gt;&lt;/th&gt;
&lt;th&gt;created_at&lt;/th&gt;
&lt;th&gt;updated_at&lt;/th&gt;
&lt;th&gt;deleted_at&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;SMS_PROVIDER&lt;/td&gt;
&lt;td&gt;An SMS service provider.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;{&amp;quot;$schema&amp;quot;:&amp;quot;https://json-schema.org/draft/2020-12/schema&amp;quot;,&amp;quot;$id&amp;quot;:&amp;quot;https://schemas.alphacoder.xyz/sms-provider.json&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;SMS Provider&amp;quot;,&amp;quot;description&amp;quot;:&amp;quot;An SMS provider.&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;object&amp;quot;,&amp;quot;properties&amp;quot;:{&amp;quot;name&amp;quot;:{&amp;quot;description&amp;quot;:&amp;quot;The name of the SMS provider.&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;string&amp;quot;},&amp;quot;priority&amp;quot;:{&amp;quot;description&amp;quot;:&amp;quot;Priority of the SMS provider. We will prefer providers with higher priority. A lower value means a higher priority.&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;integer&amp;quot;,&amp;quot;minimum&amp;quot;:1},&amp;quot;available_countries&amp;quot;:{&amp;quot;description&amp;quot;:&amp;quot;Countries supported by SMS provider.&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;array&amp;quot;,&amp;quot;items&amp;quot;:{&amp;quot;type&amp;quot;:&amp;quot;string&amp;quot;,&amp;quot;minLength&amp;quot;:2,&amp;quot;maxLength&amp;quot;:2},&amp;quot;minItems&amp;quot;:1,&amp;quot;uniqueItems&amp;quot;:true},&amp;quot;api_url&amp;quot;:{&amp;quot;description&amp;quot;:&amp;quot;SMS provider API URL.&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;string&amp;quot;},&amp;quot;api_secret_alias&amp;quot;:{&amp;quot;description&amp;quot;:&amp;quot;SMS provider API secret alias.&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;string&amp;quot;}},&amp;quot;required&amp;quot;:[&amp;quot;name&amp;quot;,&amp;quot;priority&amp;quot;,&amp;quot;api_url&amp;quot;,&amp;quot;api_secret_alias&amp;quot;]}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;td&gt;-1&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;2022-12-01 09:41:09&lt;/td&gt;
&lt;td&gt;2022-12-01 09:42:09&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Table: &lt;code&gt;app_configs&lt;/code&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;data_type_id&lt;/th&gt;
&lt;th&gt;&lt;div style=&#34;width:400px&#34;&gt;value&lt;/div&gt;&lt;/th&gt;
&lt;th&gt;created_at&lt;/th&gt;
&lt;th&gt;updated_at&lt;/th&gt;
&lt;th&gt;deleted_at&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;sms_bros&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;{&amp;quot;name&amp;quot;:&amp;quot;SMS Bros&amp;quot;,&amp;quot;priority&amp;quot;:1,&amp;quot;available_countries&amp;quot;:[&amp;quot;NL&amp;quot;,&amp;quot;NG&amp;quot;,&amp;quot;US&amp;quot;],&amp;quot;api_url&amp;quot;:&amp;quot;https://sms.bros.io/send&amp;quot;,&amp;quot;api_secret_alias&amp;quot;:&amp;quot;SMS_BROS_SMS_API_SECRET&amp;quot;}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2022-12-01 09:41:09&lt;/td&gt;
&lt;td&gt;2022-12-01 09:42:09&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;fatsms&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;{&amp;quot;name&amp;quot;:&amp;quot;Fat SMS&amp;quot;,&amp;quot;priority&amp;quot;:3,&amp;quot;available_countries&amp;quot;:[&amp;quot;NG&amp;quot;,&amp;quot;GH&amp;quot;],&amp;quot;api_url&amp;quot;:&amp;quot;https://fatsms.co/api/smses&amp;quot;,&amp;quot;api_secret_alias&amp;quot;:&amp;quot;FAT_SMS_API_SECRET&amp;quot;}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2022-12-01 09:41:09&lt;/td&gt;
&lt;td&gt;2022-12-01 09:42:09&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;account-configs&#34;&gt;Account configs&lt;/h2&gt;
&lt;p&gt;These are just like app configs, but for accounts. Say your product has multiple pricing plans, each with its set of features. You could use account config tables to store data on what features each user has access to based on the plan they paid for.&lt;/p&gt;
&lt;p&gt;Table: &lt;code&gt;data_types&lt;/code&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;&lt;div style=&#34;width:200px&#34;&gt;description&lt;/div&gt;&lt;/th&gt;
&lt;th&gt;&lt;div style=&#34;width:400px&#34;&gt;validator (JSON schema)&lt;/div&gt;&lt;/th&gt;
&lt;th&gt;default_value&lt;/th&gt;
&lt;th&gt;&lt;div style=&#34;width:350px&#34;&gt;cardinality (max number of configs of a given type per table/account; -1 =&amp;gt; infinite)&lt;/div&gt;&lt;/th&gt;
&lt;th&gt;&lt;div style=&#34;width:300px&#34;&gt;account_configurable (can an account holder modify this config?)&lt;/div&gt;&lt;/th&gt;
&lt;th&gt;created_at&lt;/th&gt;
&lt;th&gt;updated_at&lt;/th&gt;
&lt;th&gt;deleted_at&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;FEATURE_UNLIMITED_UPLOADS&lt;/td&gt;
&lt;td&gt;Feature allowing users upload as many files as they want.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;{&amp;quot;$schema&amp;quot;:&amp;quot;https://json-schema.org/draft/2020-12/schema&amp;quot;,&amp;quot;$id&amp;quot;:&amp;quot;https://schemas.alphacoder.xyz/boolean.json&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;Boolean&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;boolean&amp;quot;}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;2022-12-01 09:41:09&lt;/td&gt;
&lt;td&gt;2022-12-01 09:42:09&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;FEATURE_UNLIMITED_COLLABORATORS&lt;/td&gt;
&lt;td&gt;Feature allowing users permit as many other users as they want to view and edit their files.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;{&amp;quot;$schema&amp;quot;:&amp;quot;https://json-schema.org/draft/2020-12/schema&amp;quot;,&amp;quot;$id&amp;quot;:&amp;quot;https://schemas.alphacoder.xyz/boolean.json&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;Boolean&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;boolean&amp;quot;}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;2022-12-01 09:41:09&lt;/td&gt;
&lt;td&gt;2022-12-01 09:42:09&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;FEATURE_PLUGINS&lt;/td&gt;
&lt;td&gt;Feature allowing users install plugins to customize their setup.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;{&amp;quot;$schema&amp;quot;:&amp;quot;https://json-schema.org/draft/2020-12/schema&amp;quot;,&amp;quot;$id&amp;quot;:&amp;quot;https://schemas.alphacoder.xyz/boolean.json&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;Boolean&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;boolean&amp;quot;}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;2022-12-01 09:41:09&lt;/td&gt;
&lt;td&gt;2022-12-01 09:42:09&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Table: &lt;code&gt;account_configs&lt;/code&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;data_type_id&lt;/th&gt;
&lt;th&gt;account_type&lt;/th&gt;
&lt;th&gt;account_id&lt;/th&gt;
&lt;th&gt;value&lt;/th&gt;
&lt;th&gt;created_at&lt;/th&gt;
&lt;th&gt;updated_at&lt;/th&gt;
&lt;th&gt;deleted_at&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;69&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;2022-12-01 09:41:09&lt;/td&gt;
&lt;td&gt;2022-12-01 09:42:09&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;69&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;2022-12-01 09:41:09&lt;/td&gt;
&lt;td&gt;2022-12-01 09:42:09&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;config-system-features&#34;&gt;Config system features&lt;/h1&gt;
&lt;p&gt;Creating a scalable data structure for your configuration system is just one side of the coin. You also need to provide a feature set that makes the system operationally efficient.&lt;/p&gt;
&lt;h2 id=&#34;access-control&#34;&gt;Access control&lt;/h2&gt;
&lt;p&gt;Like I mentioned earlier, the people deciding what state your system should be in should also be able to make the changes necessary to achieve the desired state. Of course, at the same time, you need to have proper controls in place. Your config database is the control panel for your app, so you don’t want people who have no business interacting with it be able to gain access to it.&lt;/p&gt;
&lt;h2 id=&#34;audit-logging&#34;&gt;Audit logging&lt;/h2&gt;
&lt;p&gt;Since potentially lots of people would be making lots of changes to your config database, you want proper audit logging. The logs would be useful during incidents as described earlier, but also for security and documentation.&lt;/p&gt;
&lt;h2 id=&#34;change-queue&#34;&gt;Change queue&lt;/h2&gt;
&lt;p&gt;A change queue is basically a way to queue changes to the config database. Its purpose is automation. For example, if you wanted to turn off a service temporarily or release a new feature at a specific time, you could push that to the change queue and a job that consumes the queue would execute it so you don’t have do it manually.&lt;/p&gt;
&lt;h2 id=&#34;tagging&#34;&gt;Tagging&lt;/h2&gt;
&lt;p&gt;Another important feature is tagging. Since configs would be organized by function, you need a way to group your configs by product, service, feature or any other category you fancy. This is purely for the benefit of the people interacting with the configuration database. You could create a tag for your SMS notification system, for example, which would let one pull up all the configs related to this service.&lt;/p&gt;
- https://alphacoder.xyz/config-db-data-structure/ - Copyright 2017 to ∞. Nicholas Kajoh. All rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>How to version REST APIs</title>
        <link>https://alphacoder.xyz/rest-api-versioning/</link>
        <pubDate>Sun, 28 Aug 2022 00:00:00 +0000</pubDate>
        
        <guid>https://alphacoder.xyz/rest-api-versioning/</guid>
        <description>Alpha Coder https://alphacoder.xyz/rest-api-versioning/ -&lt;p&gt;Having worked at companies that sell API products in the last couple years, I’ve found myself contemplating—for hours on end in the shower—what the best way to version REST APIs is. You want simplicity and stability so that your API is easy for developers to integrate. But you also want to iterate on your product and add new features to improve your offering. Eventually, you’ll need to introduce breaking changes. Maybe you’re expanding the scope of an endpoint so you want to reorganize the parameters in the request payload, or a field in the response body needs to be removed for security or compliance reasons. To deal with these, you’ll need to introduce versioning in some form.&lt;/p&gt;
&lt;p&gt;There are several ways to do API versioning. If you’ve integrated any 3rd-party APIs, you’re probably familiar with a few of them. You could put the version number in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the URL i.e &lt;code&gt;https://api.alphacoder.xyz/v1/posts&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the accept header i.e &lt;code&gt;Accept: application/vnd.alphacoder.blog-v1+json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;a custom header i.e &lt;code&gt;Accept-Version: 1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rather than focusing on where to accept version numbers or what format they should be in (whatever you go with is fine as long as it’s consistent), your priority should be building a comprehensive versioning system around your API—or at least planning for one.&lt;/p&gt;
&lt;p&gt;Your versioning system should:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Abstract versioning for new users:&lt;/strong&gt; By default, new users of your API should be on the latest version so there’s no need to bore them with versioning initially. A good way to do this is to peg them to the latest version when they sign up to use your API. They won’t have to worry about versions until that version gets deprecated/sun-set or they want a feature that is not available in the version they’re using.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use resource-level versioning:&lt;/strong&gt; That is, each resource should have it’s own version as opposed to using one version number for your entire API. With the right tooling e.g compatibility matrices, this should not be much of a problem. And for users consuming resources that seldom change, they won’t have to do anything in a long while.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Span all user contact surfaces:&lt;/strong&gt; So not just your API where a user can specify what version they want to use. On the user dashboards, they should be able to see a log of what resource versions they’re consuming and perhaps a nice graph of the data as well. They should also be able to see and change their default versions. On the documentation, they should be shown content specific to their default versions if applicable.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Have a deprecation and sun-setting policy:&lt;/strong&gt; When you have a well-documented deprecation and sun-setting policy and you communicate it to your users in advance, it makes upgrades less of a hassle and keeps everyone mostly happy. It could be time-based e.g versions are supported for 2 years after release, deprecated in their 3rd year and then sun-set afterwards. If you don’t release a lot of new versions, you could instead support the last 3-5 versions versions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Track API version usage:&lt;/strong&gt; This will give you a good view of how your system is used so that you can make certain decisions such as extending the lifespan of a version or reaching out to specific users to encourage them to upgrade.&lt;/li&gt;
&lt;/ul&gt;
- https://alphacoder.xyz/rest-api-versioning/ - Copyright 2017 to ∞. Nicholas Kajoh. All rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>Web app scaling techniques</title>
        <link>https://alphacoder.xyz/web-app-scaling-techniques/</link>
        <pubDate>Sat, 27 Aug 2022 00:00:00 +0000</pubDate>
        
        <guid>https://alphacoder.xyz/web-app-scaling-techniques/</guid>
        <description>Alpha Coder https://alphacoder.xyz/web-app-scaling-techniques/ -&lt;p&gt;Several moons ago, I wrote an article about &lt;a href=&#34;https://alphacoder.xyz/database-scaling-techniques/&#34;&gt;techniques for scaling databases&lt;/a&gt;. Today, we’ll be looking at the app side of things. As with databases, you want to develop your application with scalability in mind so that when the time comes to increase capacity, the process is straightforward and seamless. Having a clear pathway for building a higher capacity and robust system also helps prevent over-engineering and premature optimization, so it’s important to have the steps and process for evolving your systems to handle large workloads.&lt;/p&gt;
&lt;p&gt;Like the database article, I’ve organized the techniques in a relatively increasing order of relevance as one’s web app load grows.&lt;/p&gt;
&lt;h1 id=&#34;get-a-bigger-server&#34;&gt;Get a bigger server&lt;/h1&gt;
&lt;p&gt;It’s “engineer nature” to want to to engineer things, so most of us forget we could just &lt;a href=&#34;https://alphacoder.xyz/scale-an-app-horizontally-using-a-load-balancer/&#34;&gt;scale vertically&lt;/a&gt; i.e provision more resources on the server we’re currently using. If you use a cloud hosting service, this is as easy as clicking a few buttons and may not involve any downtime.&lt;/p&gt;
&lt;p&gt;Hardware has become faster and cheaper over the years and many server infrastructure providers offer beefy machines that can handle a lot of load (for example, you can rent an EC2 instance with 128 vCPUs, 4 TB of RAM, 4 TB of SSD storage and up to 25 Gbps network speed on AWS). If high availability is not a major concern for you (i.e you can tolerate some little downtime every now and then), consider all your options on the vertical side before going horizontal.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/web-app-scaling-techniques/get-thiccc-server.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;split-your-app-into-functional-components&#34;&gt;Split your app into functional components&lt;/h1&gt;
&lt;p&gt;You can break your app into functional components and spin up a server for each one. This will allow you increase capacity while preventing a resource-intensive component of your system from disrupting other components. Also, there are managed services for some of these components (such as AWS S3 for file storage), so you could offload some stuff to third parties and save time needed to develop and optimize them.&lt;/p&gt;
&lt;p&gt;Some components you could break your app into include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User interface&lt;/li&gt;
&lt;li&gt;API&lt;/li&gt;
&lt;li&gt;Database&lt;/li&gt;
&lt;li&gt;Cache&lt;/li&gt;
&lt;li&gt;File storage&lt;/li&gt;
&lt;li&gt;Queue&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/web-app-scaling-techniques/split-app-into-comps.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;When splitting up your app, it’s important to consider the latency implications. Ideally, all the components should be in the same local network or region.&lt;/p&gt;
&lt;h1 id=&#34;run-multiple-instances-of-your-app&#34;&gt;Run multiple instances of your app&lt;/h1&gt;
&lt;p&gt;Eventually, a single server might not be able to handle your load requirements. More so, you might want your app to be highly available i.e if one or more servers are unhealthy or crash, your app should continue to work. In these cases, you’d want to scale horizontally i.e running your app on multiple machines and putting them behind a load balancer. A load balancer can spread the load evenly among the machines and stop routing traffic to a machine that is unhealthy.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/web-app-scaling-techniques/load-balancing.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;You could even go a step further and make your load balancing layer highly available by running multiple load balancers and glueing them together with a software like &lt;a href=&#34;https://www.keepalived.org/&#34;&gt;keepalived&lt;/a&gt; which allows you automatically fail over if a server goes down.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/web-app-scaling-techniques/multiple-load-balancers.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;As with splitting your app into functional components, you should factor in the latency implications of putting your app behind a load balancer. Of course, the load balancers and app servers should be in the same location. Also, in order to run multiple instances of your app smoothly, the app should ideally be &lt;a href=&#34;https://www.webopedia.com/definitions/stateless/&#34;&gt;stateless&lt;/a&gt;. So consider removing sessions, in-memory caching and the like.&lt;/p&gt;
&lt;h1 id=&#34;load-balance-using-dns&#34;&gt;Load balance using DNS&lt;/h1&gt;
&lt;p&gt;In addition to resolving domain names, a DNS can be used as a load balancer. You can create multiple A records and configure your authoritative DNS in a round robin fashion, or preferably use geolocation-based routing i.e users will be routed to the servers closest to them. On top of being able to handle more load, this setup allows you achieve global high availability (by running your app in multiple data centers across the globe), as well as enables you provide consistent and lower latencies in all the regions you operate.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/web-app-scaling-techniques/dns-load-balancing.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;use-anycast-networking&#34;&gt;Use anycast networking&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cloudflare.com/learning/cdn/glossary/anycast-network/&#34;&gt;Anycast networking&lt;/a&gt; lets you use the internet as your app’s load balancer by advertising a single IP from multiple locations or PoPs (Points of Presence). This means that users are routed to the servers closest to them (in terms of router hops). As with DNS load balancing, this facilitates global high availability and lower latencies but it can be &lt;a href=&#34;https://labs.ripe.net/author/samir_jafferali/build-your-own-anycast-network-in-nine-steps/&#34;&gt;difficult and time consuming to set up&lt;/a&gt;. Also, it’s possible to &lt;a href=&#34;https://engineering.linkedin.com/network-performance/tcp-over-ip-anycast-pipe-dream-or-reality&#34;&gt;combine the two for better results&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/web-app-scaling-techniques/anycast-networking.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
- https://alphacoder.xyz/web-app-scaling-techniques/ - Copyright 2017 to ∞. Nicholas Kajoh. All rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>The case for monorepos</title>
        <link>https://alphacoder.xyz/monorepo-use-case/</link>
        <pubDate>Mon, 04 Jul 2022 19:48:14 +0200</pubDate>
        
        <guid>https://alphacoder.xyz/monorepo-use-case/</guid>
        <description>Alpha Coder https://alphacoder.xyz/monorepo-use-case/ -&lt;p&gt;At a previous company, I worked as a Platform Engineer for the Packages team. A brand new team, our job was to abstract the building blocks of our systems into reusable components, and to create a pipeline for developing and releasing these components as packages for use by product engineers. There was a lot of duplication in our codebases and we were also slowly moving towards a microservices architecture, so our work was crucial in helping the engineering organization improve code quality and developer productivity.&lt;/p&gt;
&lt;p&gt;I think we did a great job with what we built given the size of the team, the amount of time we had and how much freedom we had to modify/change existing systems and processes, but it wasn’t without issues. Weeks and months after leaving the team, I kept thinking about the initial design and how it could be improved. I think I’ve arrived at something better. Of course, it’s nothing new and some may find the trade-offs costlier than the benefits, but it’s quite fascinating to me because I was bewildered by and opposed to the idea when I first learned about it. I’m talking about monorepos.&lt;/p&gt;
&lt;h1 id=&#34;what-we-built&#34;&gt;What we built&lt;/h1&gt;
&lt;p&gt;Our stack was mainly JavaScript-based tech (TypeScript, Node.js and friends), so we were developing and releasing NPM packages. We used &lt;a href=&#34;https://github.com/semantic-release/semantic-release&#34;&gt;Semantic Release&lt;/a&gt; to automate the releases (versioning, release notes generation and publishing). We built a self-serve system to enable developers create new packages and update existing ones on their own. Creating a package involved setting up a GitHub repository with certain configs which connected it to the release pipeline. For existing packages, all a developer had to do was open a PR. Once merged, the changes would be cut into a new release and available in our private registry for installation/use.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# First time, add private registry to the package manager.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;npm login --scope&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;@test-company --registry&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;https://registry.testcompany.com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Then install internal package(s).&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;npm install @test-company/very-useful-package
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;the-challenges&#34;&gt;The challenges&lt;/h1&gt;
&lt;p&gt;The challenges we faced were a result of the mismatch of the solution we implemented and our customers’ (i.e product developers’) needs. Our solution is a better fit for open source development where clear project scope and stability is king, as opposed to a fast-paced agile environment which prioritizes velocity and adaptability. Some of the issues we were confronted with are:&lt;/p&gt;
&lt;h2 id=&#34;more-complex-dev-environment&#34;&gt;More complex dev environment&lt;/h2&gt;
&lt;p&gt;Development is complex enough when you have to setup multiple repos and spin up multiple apps. Adding packages to the mix complicates things even more. Now you have to setup even more repos, work across multiple codebases, and update dependencies to deliver a single feature or fix a single bug. I did not realize how bad it was until I considered duplicating code from a package just to avoid having to update it and doing the whole release process dance.&lt;/p&gt;
&lt;h2 id=&#34;long-review-cycles&#34;&gt;Long review cycles&lt;/h2&gt;
&lt;p&gt;Multiple repos means multiple PRs for a single task. Multiple PRs means longer review cycles. We found, unsurprisingly, that developers who like to move fast don’t appreciate this very much.&lt;/p&gt;
&lt;h2 id=&#34;versioning-hell&#34;&gt;Versioning hell&lt;/h2&gt;
&lt;p&gt;The worst of the challenges was dealing with versioning. If you wanted to introduce a breaking change, you had 3 options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Don’t introduce a breaking change. Make your change backwards compatible by exposing some specialized function for your use case. This of course will increase complexity and ultimately defeat the goal of having clean abstractions that can be reused.&lt;/li&gt;
&lt;li&gt;Release a new version and update all the dependent apps. This can be a lot of work and may be risky.&lt;/li&gt;
&lt;li&gt;Release a new version just for your changes. Now you have to maintain multiple versions of a single package which is a pain.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;building-something-better&#34;&gt;Building something better&lt;/h1&gt;
&lt;p&gt;The solution to these problems is a monorepo. How? Well, with all the code in one place, you don’t have to clone a new repo, or open multiple PRs, or deal with versioning (you’re always using the latest version). Large refactors to create better abstractions are also more tenable.&lt;/p&gt;
&lt;p&gt;Of course, even if I recognized this at the time, there’s no way I could have convinced the engineering org or even my team to squash dozens of repos into one. The benefits of doing so just don’t justify the work involved—and the risks. Maybe at some point in the future it will and a monorepo would make sense.&lt;/p&gt;
&lt;p&gt;The thing I’ve learned in thinking through these challenges is that context is key. It’s important to suss out the motivations for using a given system or tool before criticizing or adopting it. Often, until you’re in the problem space yourself, you never recognize or appreciate the reasons for going with certain approaches.&lt;/p&gt;
- https://alphacoder.xyz/monorepo-use-case/ - Copyright 2017 to ∞. Nicholas Kajoh. All rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>Database scaling techniques</title>
        <link>https://alphacoder.xyz/database-scaling-techniques/</link>
        <pubDate>Sun, 07 Jun 2020 11:46:24 +0000</pubDate>
        
        <guid>https://alphacoder.xyz/database-scaling-techniques/</guid>
        <description>Alpha Coder https://alphacoder.xyz/database-scaling-techniques/ -&lt;p&gt;Over the years, I&amp;rsquo;ve had an unusual interest in techniques for scaling databases to meet high demands in terms of performance and reliability. I&amp;rsquo;m not exactly a fan of database administration but I&amp;rsquo;ve always had the anxiety that a design decision I&amp;rsquo;m making now will come back to haunt me in future. I quickly learned that trying to setup a system that can handle, say, a million users when one has only a thousand is a waste of time and resources. However, I wanted to know the progression that will lead me to such a point so that I can plan with foresight.&lt;/p&gt;
&lt;p&gt;After lots of reading and a fair amount of practice on the job, I&amp;rsquo;ve learned some of the common techniques used to scale relational databases. I&amp;rsquo;ve organized them in a relatively increasing order of relevance as one&amp;rsquo;s database load grows.&lt;/p&gt;
&lt;h1 id=&#34;query-optimization&#34;&gt;Query optimization&lt;/h1&gt;
&lt;p&gt;This is the good old technique of finding poorly written queries or queries that could be improved upon and making them more efficient. To be able to write optimal queries, you need to have a good handle of the query language (e.g SQL), as well as the database engine (e.g MySQL or PostgreSQL). Simple tips like selecting specific fields as opposed to selecting all fields (&lt;code&gt;SELECT *&lt;/code&gt;) when not required can go a long way in giving your application the performance boost it needs.&lt;/p&gt;
&lt;p&gt;Visual inspection of queries might not be sufficient as some queries only break when confronted with large amounts of data or heavy traffic. Application Performance Monitoring (APM) tools can be instrumental in finding these bottlenecks as they allow you view the performance metrics of all your queries and figure out which ones are degrading your database.&lt;/p&gt;
&lt;h1 id=&#34;indexing&#34;&gt;Indexing&lt;/h1&gt;
&lt;p&gt;Indexing in simple terms means organizing data in a way that makes it faster to retrieve. Relational databases allow you create indexes on one of more columns in your tables. This can result in huge performance gains with little or no effort and as such is highly recommended as a way to optimize your database. For the best results, &lt;a href=&#34;https://www.dbta.com/Columns/DBA-Corner/Top-10-Steps-to-Building-Useful-Database-Indexes-100498.aspx&#34;&gt;indexes should be based on the kind of queries being run against a given database&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;denormalization&#34;&gt;Denormalization&lt;/h1&gt;
&lt;p&gt;I&amp;rsquo;ve discussed denormalization in reasonable detail &lt;a href=&#34;https://alphacoder.xyz/database-denormalization/&#34;&gt;in a previous article&lt;/a&gt; so I won&amp;rsquo;t say much more than the basic idea of what it entails. The goal of denormalization is to improve read performance by adding redundant copies of data to make for faster access using simpler queries. This is essentially indexing but done by a schema designer rather than a database engine, and it can be a great addition to indexes if carried out purposefully.&lt;/p&gt;
&lt;h1 id=&#34;primary-replica-architecture&#34;&gt;Primary-replica architecture&lt;/h1&gt;
&lt;p&gt;This involves &lt;a href=&#34;https://stackoverflow.com/a/11715598/6293466&#34;&gt;scaling a database horizontally&lt;/a&gt; by running two or more instances. One is designated the primary database and handles writes while the others are replica databases which handle reads. The database engine uses a replication protocol to keep all the instances in sync by copying the data from the primary database to the replicas. This setup comprises a database cluster. The pros of the architecture include traffic load balancing and automatic data backups which result in improved performance and reliability of a database.&lt;/p&gt;
&lt;h1 id=&#34;federation&#34;&gt;Federation&lt;/h1&gt;
&lt;p&gt;In this technique, the database tables that make up an application are grouped by feature/function, and each group is designated a server or cluster of its own. For instance, all the tables concerned with billing might be put on one server while those concerned with identity and access management might be put on another. Care must be taken while grouping tables to avoid a situation where one or more related tables have been split across database servers, and expensive operations are required to obtain a piece of data needed in your application as a result.&lt;/p&gt;
&lt;h1 id=&#34;sharding&#34;&gt;Sharding&lt;/h1&gt;
&lt;p&gt;Sharding is the process of horizontally partitioning data into multiple databases. Instead of splitting a database by groups of tables as described earlier, a table&amp;rsquo;s rows are split across multiple instances. In order to save or retrieve a piece of data, certain &lt;a href=&#34;https://www.citusdata.com/blog/2017/08/28/five-data-models-for-sharding/&#34;&gt;models&lt;/a&gt;/&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/architecture/patterns/sharding#sharding-strategies&#34;&gt;algorithms&lt;/a&gt; are employed in determining the &lt;a href=&#34;https://en.wikipedia.org/wiki/Shard_(database_architecture)&#34;&gt;shard&lt;/a&gt; to use/where the data resides. This adds a fair amount of complexity to your database setup and your application as well. Operations that might otherwise be straightforward can become a challenge under this configuration. As such sharding is usually reserved for last and carried out by admins who have a solid grasp of the database engine they&amp;rsquo;re dealing with.&lt;/p&gt;
- https://alphacoder.xyz/database-scaling-techniques/ - Copyright 2017 to ∞. Nicholas Kajoh. All rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>Database denormalization</title>
        <link>https://alphacoder.xyz/database-denormalization/</link>
        <pubDate>Fri, 05 Jun 2020 13:46:02 +0000</pubDate>
        
        <guid>https://alphacoder.xyz/database-denormalization/</guid>
        <description>Alpha Coder https://alphacoder.xyz/database-denormalization/ -&lt;p&gt;Normalization is a vital part of database schema design. The goal is to structure a relational database so as to reduce redundancy and improve the integrity of data. Given this understanding, denormalization sounds rather counter-intuitive. Why would one want to make a database &amp;ldquo;less normalized&amp;rdquo;?&lt;/p&gt;
&lt;p&gt;Well, it turns out that normalization comes at a performance cost for DB read operations. This is just fine for regular applications. However, read-heavy apps start to break at scale under this setup due to resource-intensive SQL queries involving joins, subqueries and the like. Denormalization helps improve read performance by adding redundant copies of data to make for faster access using simpler queries.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s worth noting that &lt;em&gt;denormalized data&lt;/em&gt; is different from &lt;em&gt;unnormalized data&lt;/em&gt;. While the latter refers to data before normalization, the former is a transformation of normalized data.&lt;/p&gt;
&lt;p&gt;So how does one denormalize? The changes to be made in order to denormalize your data vary based on the type of application, existing database schema and optimization needs. However, the reasoning behind them are the same i.e you want to make data retrieval as fast as possible. Outlined below are a few tips to help you in this process:&lt;/p&gt;
&lt;h1 id=&#34;duplicate-fields-that-seldom-if-ever-change&#34;&gt;Duplicate fields that seldom if ever change&lt;/h1&gt;
&lt;p&gt;Say you operate a popular ecommerce website and your fulfilment staff are having a hard time viewing the orders because the API that retrieves this information is slow. You might take a look and realize that the bottleneck is your &lt;em&gt;orders&lt;/em&gt; table which has lots of relationships that need to be populated in order to retrieve a couple important fields. Some of these fields will seldom, if ever change (at least within the period in which an order must be fulfilled) so you proceed to denormalize them by creating new columns in the &lt;em&gt;orders&lt;/em&gt; table.&lt;/p&gt;
&lt;p&gt;For example, you might determine that the list of ordered products rarely changes. However, in order to get this list, you&amp;rsquo;ve had to use a join to pull the data from the &lt;em&gt;products&lt;/em&gt; table. By adding an &lt;em&gt;ordered_items&lt;/em&gt; column to the &lt;em&gt;orders&lt;/em&gt; table which will contain JSON arrays of product SKUs and order quantities, you may be able to reduce the latency of the API by a substantial amount. This, coupled with other such optimizations has the potential to deliver significant performance gains.&lt;/p&gt;
&lt;p&gt;The cost of these changes is little. If the list of ordered products does change (a rarity), all it takes is updating the &lt;em&gt;ordered_items&lt;/em&gt; column. While this will increase disk usage, it&amp;rsquo;s not a concern for most.&lt;/p&gt;
&lt;h1 id=&#34;duplicate-fields-with-high-read-to-write-ratios&#34;&gt;Duplicate fields with high read to write ratios&lt;/h1&gt;
&lt;p&gt;Taking our ecommerce website scenario forward, you might discover that your products display pages have become slower because they&amp;rsquo;re one of the most trafficked part of the site. In seeking ways to optimize these pages, you realize you can simplify the query that fetches products by denormalizing some of the data in products-related tables including &lt;em&gt;product_options&lt;/em&gt;, &lt;em&gt;categories&lt;/em&gt;, &lt;em&gt;product_media&lt;/em&gt; and &lt;em&gt;tags&lt;/em&gt;. By adding several new columns in the &lt;em&gt;products&lt;/em&gt; table so you don&amp;rsquo;t have to query other tables, you might be able to increase the load times of these slow pages.&lt;/p&gt;
&lt;p&gt;It turns out that you don&amp;rsquo;t update products very often (maybe once a week on average). However, hundreds of people view these products every second. It makes sense to denormalize in this case because your products data has a high read-write ratio.&lt;/p&gt;
&lt;h1 id=&#34;create-columns-or-tables-for-frequently-used-aggregates&#34;&gt;Create columns or tables for frequently used aggregates&lt;/h1&gt;
&lt;p&gt;Frequently used aggregates (for example the total amount made from orders this week or the number of times a coupon has been used) don&amp;rsquo;t have to be computed on the fly. You can pre-compute them and store the results in another table or a new column for faster retrieval. If these aggregates are likely to change in future, you can recompute them periodically or at the point when their inputs change.&lt;/p&gt;
&lt;p&gt;It goes without saying that you should NOT denormalize until you encounter data retrieval issues. Like with most software engineering problems, there are tradeoffs! Also, denormalization is &lt;a href=&#34;https://alphacoder.xyz/database-scaling-techniques&#34;&gt;not the only way to optimize/scale databases&lt;/a&gt;.&lt;/p&gt;
- https://alphacoder.xyz/database-denormalization/ - Copyright 2017 to ∞. Nicholas Kajoh. All rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>node_modules: The Node.js black hole</title>
        <link>https://alphacoder.xyz/node-modules/</link>
        <pubDate>Mon, 25 May 2020 23:33:11 +0000</pubDate>
        
        <guid>https://alphacoder.xyz/node-modules/</guid>
        <description>Alpha Coder https://alphacoder.xyz/node-modules/ -&lt;p&gt;As a Node.js developer, you know just how large (in terms of number of files and directory size) node_modules can be (you&amp;rsquo;ve probably aready seen &lt;a href=&#34;https://www.reddit.com/r/ProgrammerHumor/comments/6s0wov/heaviest_objects_in_the_universe/&#34;&gt;the memes&lt;/a&gt;). But have you ever asked WHY? I hadn&amp;rsquo;t, up until recently, after which I did some goofing around on the interwebs out of curiosity.&lt;/p&gt;
&lt;p&gt;Turns out it has to do with 2 things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How npm (the Node package manager) resolves dependencies.&lt;/li&gt;
&lt;li&gt;How the Node.js community likes to develop packages.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;dependency-resolution&#34;&gt;Dependency resolution&lt;/h1&gt;
&lt;p&gt;npm differs from other popular package managers such as pip and RubGems in terms of how it resolves dependencies. npm may download multiple versions of a package where as pip/RubyGems will attempt to find a single version that satisfies all its dependents.&lt;/p&gt;
&lt;p&gt;Say your app has 2 dependencies &lt;em&gt;Package A&lt;/em&gt; and &lt;em&gt;Package B&lt;/em&gt;, and &lt;em&gt;Package B&lt;/em&gt; depends on &lt;em&gt;Package C&lt;/em&gt;, and &lt;em&gt;Package A&lt;/em&gt; and &lt;em&gt;Package C&lt;/em&gt; depend on &lt;em&gt;Package D&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;npm &lt;em&gt;might&lt;/em&gt; resolve your dependencies like so i.e downloading 2 copies of &lt;em&gt;Package D&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/nde-mdls/npm-dep-graph.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;On the other hand, pip/RubyGems will download 1 version of &lt;em&gt;Package D&lt;/em&gt; which satisfies &lt;em&gt;Package A&lt;/em&gt; and &lt;em&gt;Package C&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/nde-mdls/pip-rubygems-dep-graph.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;At first glance, the pip/RubyGems strategy might seem like the better approach but each has its pros and cons.&lt;/p&gt;
&lt;p&gt;While the pip/RubyGems dependency management approach conserves space, it can lead to &amp;ldquo;dependency hell&amp;rdquo; i.e a situation where the package manager is unable to find a version of a package that satisfies all its dependents. In such a case, the developer will have to fix things manually. This may involve upgrading/downgrading one or more dependencies and/or eliminating them entirely. As you might imagine, this can be a pain. Doing the job of a package manager is not fun. And should you decide to downgrade a package, you might be opening up your app to vulnerabilities. As your app grows and you add more dependencies, you are more likely to face dependency hell.&lt;/p&gt;
&lt;p&gt;The npm approach solves the dependency hell problem. If &lt;em&gt;Package A&lt;/em&gt; requires v2 of &lt;em&gt;Package D&lt;/em&gt; and &lt;em&gt;Package C&lt;/em&gt; requires v5 of &lt;em&gt;Package D&lt;/em&gt;, npm will download both versions. This is neat, but it doesn&amp;rsquo;t come without its challenges. As you are already well aware, your app bundles become very large. But there&amp;rsquo;s another problem that could occur in this approach. If you have one or more packages that expose a dependency as part of their interface, you might encounter version conflicts. For instance, if you have the latest version of React as a dependency in your project and you also have a component library dependency that uses an old version of React, you&amp;rsquo;d most likely encounter compatibility issues that might not be easy to detect at first glance. With the pip/RubyGems approach, you&amp;rsquo;d catch the problem pretty much at the start while trying to install the dependencies. Fortunately though, npm has a solution for this: &lt;a href=&#34;https://nodejs.org/es/blog/npm/peer-dependencies/&#34;&gt;peer dependencies&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s worth mentioning that npm optimizes your dependency graph by employing deduplication i.e if &lt;em&gt;Package A&lt;/em&gt; and &lt;em&gt;Package C&lt;/em&gt; require v1 of &lt;em&gt;Package D&lt;/em&gt;, npm will only download one copy of &lt;em&gt;Package D&lt;/em&gt;. You can run &lt;code&gt;npm ls&lt;/code&gt; in your project&amp;rsquo;s root directory to view the &amp;ldquo;deduped&amp;rdquo; packages in your dependency graph. Check out &lt;a href=&#34;https://gist.github.com/nicholaskajoh/a4b068818b965b95f6eae3aa285e4fc3&#34;&gt;the deduplicated packages&lt;/a&gt; in &lt;a href=&#34;https://www.npmjs.com/package/knex&#34;&gt;Knex&lt;/a&gt;, the SQL query builder.&lt;/p&gt;
&lt;p&gt;Looking at these 2 dependency management strategies with the merits and demerits in mind, the npm approach seems like the better one to me, but I may be biased.&lt;/p&gt;
&lt;h1 id=&#34;small-packages&#34;&gt;Small packages&lt;/h1&gt;
&lt;p&gt;The Node.js community is &amp;ldquo;notorious&amp;rdquo; for building &lt;a href=&#34;https://www.npmjs.com/~sindresorhus&#34;&gt;very small packages&lt;/a&gt;. It&amp;rsquo;s also big on reusing as much code as possible. The end result is npm packages that can easily contain a dozen or more dependencies which in turn have their own dependencies. Take Knex for example. As at the time of writing this article, it has 17 direct dependencies — dev dependencies not included (&lt;code&gt;npm ls --only=prod --depth=0 | wc -l&lt;/code&gt;) — and a total of 257 dependencies (&lt;code&gt;npm ls --only=prod | wc -l&lt;/code&gt;). This means if you start and new Node project and run &lt;code&gt;npm install knex&lt;/code&gt;, you&amp;rsquo;d have 258 dependencies on your hands right off the bat!&lt;/p&gt;
&lt;p&gt;One could argue that this pattern of building small packages and using lots of dependencies is fueled by npm&amp;rsquo;s dependency management strategy. If npm used the pip/RubyGems approach, Node.js developers would be wary of having many dependencies for fear of dependency hell. Perhaps there&amp;rsquo;s just one reason for the Node.js black hole. Having explored it, it seems pretty reasonable to me!&lt;/p&gt;
- https://alphacoder.xyz/node-modules/ - Copyright 2017 to ∞. Nicholas Kajoh. All rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>What level of abstraction should I play on?</title>
        <link>https://alphacoder.xyz/levels-of-abstraction/</link>
        <pubDate>Sun, 12 Apr 2020 18:17:48 +0000</pubDate>
        
        <guid>https://alphacoder.xyz/levels-of-abstraction/</guid>
        <description>Alpha Coder https://alphacoder.xyz/levels-of-abstraction/ -&lt;p&gt;&amp;ldquo;I built it from scratch!&amp;rdquo;&lt;/p&gt;
&lt;p&gt;A major sentiment among some of the developer circles I interacted with and was part of in my earlier days of coding was that you were a &lt;del&gt;better&lt;/del&gt; &amp;ldquo;real&amp;rdquo; developer if you could build stuff &amp;ldquo;from scratch&amp;rdquo;. You&amp;rsquo;d often hear people scoff at building websites with WordPress, for example. &amp;ldquo;I built this site from scratch with raw HTML, CSS and JavaScript. No framework or CMS!&amp;rdquo; It was a thing of pride. It meant you really knew your stuff.&lt;/p&gt;
&lt;p&gt;I was a WordPress guy at the time so this didn&amp;rsquo;t really sit well with me. Was I a fake developer for using WordPress? And what does building from scratch even mean? Not using frameworks, boilerplates or CMSes? Writing assembly or machine code? Crafting electric circuits?&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m spending quite some time these days tinkering with hardware and learning the more low level computer stuff. I&amp;rsquo;m particularly interested in &lt;a href=&#34;https://eater.net&#34;&gt;Ben Eater&amp;rsquo;s work&lt;/a&gt;. A couple weeks ago, I was watching one of his YouTube videos titled &lt;a href=&#34;https://www.youtube.com/watch?v=LnzuMJLZRdU&#34;&gt;&amp;ldquo;Hello, world from scratch on a 6502 — Part 1&amp;rdquo;&lt;/a&gt;. I found the top comment interesting.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/abstrn/yt-comment.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;While it&amp;rsquo;s very funny (for me at least), I&amp;rsquo;m pointing it out because it&amp;rsquo;s underlay by two ideas relevant to this article.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Technically speaking, &lt;a href=&#34;https://www.youtube.com/watch?v=7s664NsLeFM&#34;&gt;you can&amp;rsquo;t build anything from scratch&lt;/a&gt;. You have to start from somewhere and then create abstractions to offset complexity as it increases.&lt;/li&gt;
&lt;li&gt;There are many many levels of abstraction that make it possible for us to interact with computers the way we do. Much more than we might realize.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As a developer with a never-ending thirst for knowledge, I&amp;rsquo;ve always asked myself, &amp;ldquo;what level of abstraction should I play on?&amp;rdquo; There are just so many abstraction layers that it is not practical to work across all these levels. Moreso, abstractions are primarily intended to remove the need for interacting with other abstractions.&lt;/p&gt;
&lt;p&gt;After years of experimentation in different levels of abstraction to figure out where to play on, I came up with two criteria for determining the best abstractions for me to use and how to decide whether to move up or down the stack.&lt;/p&gt;
&lt;h1 id=&#34;does-it-offer-the-most-business-value&#34;&gt;Does it offer the most business value?&lt;/h1&gt;
&lt;p&gt;Much as I&amp;rsquo;d love to build my next website in assembly or better still, by stitching a bunch of transistors together, I&amp;rsquo;ve yet to because for me, there&amp;rsquo;s very little business value in doing so. While important, these abstractions offer little or no benefit to someone like me who needs to move and iterate quickly in order to achieve their goals. Whereas, abstractions like web frameworks, CMSes and website builders might be of great benefit.&lt;/p&gt;
&lt;p&gt;I was big on WordPress in my freelancing days not because I particularly enjoyed wading through dozens of themes to find something satisfactory or hacking plugins to suit my needs. It was because it provided a lot of value to me and my clients — low setup and maintenance costs, out-of-box content management, ample technical support and so on. I&amp;rsquo;ve been using a website builder to develop a couple sites lately. It&amp;rsquo;s been a huge time saver! And given that my time is becoming more expensive by the day, it&amp;rsquo;s a really nice value-add.&lt;/p&gt;
&lt;p&gt;As a rule of thumb, I go for the highest possible level of abstraction that can get me the functionality I need. This might mean using a fully-managed SaaS product rather than building and maintaining a service in-house, or using tooling and technologies that prioritize velocity in order to ship features and fix bugs faster.&lt;/p&gt;
&lt;h1 id=&#34;is-the-abstraction-starting-to-leak&#34;&gt;Is the abstraction starting to leak?&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/&#34;&gt;The law of leaky abstractions&lt;/a&gt; states &amp;ldquo;All non-trivial abstractions, to some degree, are leaky.&amp;rdquo; While the first criteria encourages opting for a high level of abstraction which makes it easier and faster to achieve an objective, this one advocates moving one or more levels lower when abstractions begin to leak.&lt;/p&gt;
&lt;p&gt;If you find yourself writing a lot of CSS to override other CSS, perhaps it is time to drop Bootstrap and build your own UI component library, or pick another library with less abstraction. If you&amp;rsquo;re spending a lot of time hacking a framework because its APIs can no longer give you the functionality you need, you should probably start migrating away from it and building your own abstractions using language-native APIs.&lt;/p&gt;
&lt;p&gt;An exemplification of the basic philosophy is this: &lt;em&gt;I don&amp;rsquo;t have to worry about the intricacies of paradigm X in language Y because there&amp;rsquo;s this nifty little library that exposes a streamlined API for achieving what I want. When my needs grow beyond what the library offers, I&amp;rsquo;ll begin to dig into the weeds of the paradigm. Right now, I&amp;rsquo;m more focused on delivering value with what I&amp;rsquo;m building than trying to understand every detail of some component I need to consume. When the abstraction begins to leak, I&amp;rsquo;ll cross that river.&lt;/em&gt;&lt;/p&gt;
- https://alphacoder.xyz/levels-of-abstraction/ - Copyright 2017 to ∞. Nicholas Kajoh. All rights reserved.</description>
        </item>
    
    
  </channel>
</rss> 