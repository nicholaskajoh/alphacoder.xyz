<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software engineering with great finesse on Alpha Coder</title>
    <link>https://alphacoder.xyz/</link>
    <description>Recent content in Software engineering with great finesse on Alpha Coder</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright 2020 to ∞. Try Catch Finally Solutions Ltd. All rights reserved.</copyright>
    <lastBuildDate>Sun, 07 Jun 2020 11:46:24 +0000</lastBuildDate>
    
        <atom:link href="https://alphacoder.xyz/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>Support Vector Machine</title>
        <link>https://alphacoder.xyz/support-vector-machine/</link>
        <pubDate>Tue, 26 Dec 2017 08:44:05 +0100</pubDate>
        
        <guid>https://alphacoder.xyz/support-vector-machine/</guid>
        <description>Alpha Coder https://alphacoder.xyz/support-vector-machine/ -&lt;p&gt;The Support Vector Machine (SVM) is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Supervised_learning&#34;&gt;supervised learning&lt;/a&gt; model used for classification and regression. In this tutorial, we’ll be using it for classification.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*36seqRE8giOL5saMNGKCig.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;the-ml-chops-series&#34;&gt;The ML Chops series&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/linear-regression&#34;&gt;Linear Regression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/k-nearest-neighbors&#34;&gt;K Nearest Neighbors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/naive-bayes&#34;&gt;Naive Bayes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Support Vector Machine (this article)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/k-means&#34;&gt;K Means&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Created by &lt;a href=&#34;https://en.wikipedia.org/wiki/Vladimir_Vapnik&#34;&gt;Vladimir Vapnik&lt;/a&gt; in the 1960s, the SVM is one of most popular machine learning classifiers. Given a set of training samples, each marked as belonging to one or the other of two categories, the goal of SVM is to find the best splitting boundary between the data. This boundary is known as a &lt;a href=&#34;https://en.wikipedia.org/wiki/Hyperplane&#34;&gt;hyperplane&lt;/a&gt; — the best separating hyperplane.&lt;/p&gt;
&lt;p&gt;Let’s take the points on the graph below for example:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*2tviRinseZn7KMMCIPieVw.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;What line best divides the red pluses and green minuses? Eye-balling the data points, I came up with this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*YtZfClUNObb85VrKWKvz6g.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Any data point that falls on the right side of the boundary is classified as a &lt;em&gt;red plus&lt;/em&gt; and any point that falls on the left side is classified as a &lt;em&gt;green minus&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How do we arrive at the best separating hyperplane, mathematically?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Well, the equation of a hyperplane is given by &lt;strong&gt;wx + b = y&lt;/strong&gt; where &lt;em&gt;w&lt;/em&gt; is the normal vector to the hyperplane, &lt;em&gt;b&lt;/em&gt; is a bias/shift and &lt;em&gt;x&lt;/em&gt; is a vector the hyperplane passes through. &lt;em&gt;y&lt;/em&gt; determines the position of the hyperplane.&lt;/p&gt;
&lt;p&gt;Take a look at the diagram below for better understanding:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*3xsACXxhR4rZeXLTSAnfVQ.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;It turns out that y = 0 at the best separating hyperplane. Thus the equation of the best separating hyperplane is &lt;strong&gt;wx + b = 0&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;With this hyperplane, it shouldn’t be difficult to determine if an input vector (a feature set we desire to classify) is on one or the other side of it. To make a prediction, we’d return the sign of &lt;strong&gt;wx + b&lt;/strong&gt;. A positive sign (+) represents one class and negative sign (-) represents the other.&lt;/p&gt;
&lt;p&gt;There’s just one problem. We need to find &lt;em&gt;w&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; when &lt;em&gt;y&lt;/em&gt; = 0. Now there’s a new question to answer. &lt;strong&gt;How do we find w and b?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We’ll come to that in a bit.&lt;/p&gt;
&lt;h1 id=&#34;what-are-supportvectors&#34;&gt;What are Support Vectors?&lt;/h1&gt;
&lt;p&gt;In SVM, each sample in a data set is a vector. The area covered by the data points is a vector space.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*NWryt8J6zqRWpQ5QOmEWWg.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;A support vector is a vector in this vector space which determines the hyperplane that best separates the data. They are the closest points to the best separating hyperplane.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*J1D7tjrKTwBZEc8D__474g.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;If any of the support vectors change, the best separating hyperplane changes as well. You could say they “support” the best separating hyperplane.&lt;/p&gt;
&lt;p&gt;We can draw 2 hyperplanes both parallel to the best separating hyperplane that pass through the support vectors. The best separating hyperplane divides these hyperplanes into two equal parts/areas.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*EuCGXKeyCRJ_BAlm2t73tg.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;It turns out that these two hyperplanes are given by &lt;strong&gt;wx + b = -1&lt;/strong&gt; and &lt;strong&gt;wx + b = 1&lt;/strong&gt; as show in the graph above.&lt;/p&gt;
&lt;h1 id=&#34;w-andb&#34;&gt;w and b&lt;/h1&gt;
&lt;p&gt;The geometric distance between the hyperplanes enclosing the best separating hyperplane is &lt;strong&gt;2 / ||w||&lt;/strong&gt; where &lt;strong&gt;||w||&lt;/strong&gt; is the magnitude of &lt;em&gt;w&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*Dm3swkj4iJHNofRzt6zzcQ.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;This distance is maximum at the values of &lt;em&gt;w&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; which produce the best separating hyperplane. As such, our goal is to get a value of &lt;em&gt;w&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; that maximize &lt;strong&gt;2 / ||w||&lt;/strong&gt;. Maximizing &lt;strong&gt;2 / ||w||&lt;/strong&gt; equates to minimizing &lt;strong&gt;||w||&lt;/strong&gt;, so we could as well do just that.&lt;/p&gt;
&lt;p&gt;For mathematical convenience, let’s minimize &lt;strong&gt;1/2 * ||w||²&lt;/strong&gt; instead of &lt;strong&gt;||w||&lt;/strong&gt;. Note that this doesn’t change anything. Minimizing &lt;strong&gt;||w||&lt;/strong&gt; is minimizing &lt;strong&gt;1/2 * ||w||²&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;There’s a constraint to this minimization given by &lt;strong&gt;y(wx + b) &amp;gt;= 1&lt;/strong&gt;. This ensures that we don’t maximize the distance beyond the 2 hyperplanes that separate the 2 categories of data.&lt;/p&gt;
&lt;p&gt;This is a classic quadratic optimization problem!&lt;/p&gt;
&lt;p&gt;We are tasked with minimizing &lt;strong&gt;1/2 * ||w||²&lt;/strong&gt; subject to &lt;strong&gt;y(wx + b) &amp;gt;= 1&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;There are several methods for optimization at our disposal including &lt;a href=&#34;https://en.wikipedia.org/wiki/Convex_optimization&#34;&gt;Convex Optimization&lt;/a&gt; and the popular &lt;a href=&#34;https://en.wikipedia.org/wiki/Sequential_minimal_optimization&#34;&gt;Sequential Minimal Optimization (SMO)&lt;/a&gt; invented by John Platt in 1998 at Microsoft.&lt;/p&gt;
&lt;p&gt;We’ll be using Convex Optimization to solve this problem.&lt;/p&gt;
&lt;h1 id=&#34;convex-optimization&#34;&gt;Convex Optimization&lt;/h1&gt;
&lt;p&gt;I chose to use the &lt;a href=&#34;http://cvxopt.org/&#34;&gt;CVXOPT python library&lt;/a&gt; for Convex Optimization because I didn’t want to delve into too much math. Feel free to explore Convex Optimization (the math and the code). Here’s a little explanation of convex optimization for the problem we’re solving — to get optimum values of &lt;em&gt;w&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*W3MMVrG7QUc3USJyrp5kaw.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Suppose the optimum value for &lt;em&gt;w&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; is at X. We could move from A to C in a bid to get to X. B is the point where &lt;strong&gt;1/2 * ||w||²&lt;/strong&gt; is minimum but it does not satisfy the constraint &lt;strong&gt;y(wx + b) &amp;gt;= 1&lt;/strong&gt; (in this example) so it’s not the optimum point.&lt;/p&gt;
&lt;h1 id=&#34;code&#34;&gt;Code&lt;/h1&gt;
&lt;p&gt;Data:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import numpy as np  
import cvxopt  
import cvxopt.solvers

features = np.array([[5, 4], [5, -1], [3, 3], [7, 9], [6, 7], [7, 11]])  
labels = np.array([-1.0, -1.0, -1.0, 1.0, 1.0, 1.0])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Train/fit using CVXOPT:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def fit(X, y):  
  n_samples, n_features = X.shape

  # Gram matrix
  K = np.zeros((n_samples, n_samples))  
  for i in range(n_samples):  
    for j in range(n_samples):  
      K[i,j] = np.dot(X[i], X[j])

  P = cvxopt.matrix(np.outer(y,y) * K)  
  q = cvxopt.matrix(np.ones(n_samples) * -1)  
  A = cvxopt.matrix(y, (1, n_samples))  
  b = cvxopt.matrix(0.0)  
  G = cvxopt.matrix(np.diag(np.ones(n_samples) * -1))  
  h = cvxopt.matrix(np.zeros(n_samples))

  # solve QP problem
  solution = cvxopt.solvers.qp(P, q, G, h, A, b)

  # Lagrange multipliers
  a = np.ravel(solution[&#39;x&#39;])

  # Support vectors have non zero lagrange multipliers
  sv = a &amp;gt; 1e-5  
  ind = np.arange(len(a))[sv]  
  a = a[sv]  
  sv_ = X[sv]  
  sv_y = y[sv]

  # Intercept
  b = 0  
  for n in range(len(a)):  
    b += sv_y[n]  
    b -= np.sum(a * sv_y * K[ind[n], sv])  
  b /= len(a)

  # Weight vector
  w = np.zeros(n_features)  
  for n in range(len(a)):  
    w += a[n] * sv_y[n] * sv_[n]

  return w, b
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Predict:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;w, b = fit(features, labels)

def predict(x):  
  classification = np.sign(np.dot(x, w) + b)  
  return classification

# test  
x = [3, 4]  
print(predict(x))
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;the-kerneltrick&#34;&gt;The Kernel trick&lt;/h1&gt;
&lt;p&gt;The data we’ve been dealing with is linearly separable i.e we can draw a straight line (speaking in 2D) that separates the data into 2 categories. What if we have a data set like this?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*SGJF-6P3gQH5cHlarb7m6w.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;There’s no hyperplane that can separate this data.&lt;/p&gt;
&lt;p&gt;The kernel trick introduces a new dimension to the vector space. Adding a dimension to the data in the diagram above yields a 3D vector space. Can we separate the data now? Probably.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*aBJJ38sQ1yIZBGFNBzjZmA.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;If we can’t we could add more dimensions until we can. That’s beyond the scope of this tutorial so we won’t go any further. Do read about kernels in SVM though. There’s some pretty interesting stuff to explore!&lt;/p&gt;
&lt;p&gt;Don’t forget to check out the ML Chops repo for all the code: &lt;a href=&#34;https://github.com/nicholaskajoh/ML_Chops/tree/master/support-vector-machine&#34;&gt;https://github.com/nicholaskajoh/ML_Chops/tree/master/support-vector-machine&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have any questions, concerns or suggestions, don’t hesitate to comment! 👍&lt;/p&gt;
- https://alphacoder.xyz/support-vector-machine/ - Copyright 2020 to ∞. Try Catch Finally Solutions Ltd. All rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>Build a Facebook clone from scratch with PHP — Part 7</title>
        <link>https://alphacoder.xyz/facebook-clone-7/</link>
        <pubDate>Sat, 09 Dec 2017 09:07:25 +0100</pubDate>
        
        <guid>https://alphacoder.xyz/facebook-clone-7/</guid>
        <description>Alpha Coder https://alphacoder.xyz/facebook-clone-7/ -&lt;h1 id=&#34;all-parts&#34;&gt;All parts&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-1&#34;&gt;Build a Facebook clone from scratch with PHP — Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-2&#34;&gt;Build a Facebook clone from scratch with PHP — Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-3&#34;&gt;Build a Facebook clone from scratch with PHP — Part 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-4&#34;&gt;Build a Facebook clone from scratch with PHP — Part 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-5&#34;&gt;Build a Facebook clone from scratch with PHP — Part 5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-6&#34;&gt;Build a Facebook clone from scratch with PHP — Part 6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Build a Facebook clone from scratch with PHP — Part 7 (this article)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&amp;rsquo;s time to deploy FaceClone and invite friends to test it out!&lt;/p&gt;
&lt;h1 id=&#34;hosting&#34;&gt;Hosting&lt;/h1&gt;
&lt;p&gt;The FaceClone app has been running on our local computers all the while. For it to be accessible by anyone and everyone, it needs to run online. In other words, we need to host it. There are many hosting services out there. For this tutorial, we&amp;rsquo;ll be using &lt;a href=&#34;https://www.000webhost.com&#34;&gt;000webhost&lt;/a&gt;. 000webhost is free and offers an easy-to-use interface. Feel free to try out other web hosting services afterwards.&lt;/p&gt;
&lt;h1 id=&#34;domain-name&#34;&gt;Domain name&lt;/h1&gt;
&lt;p&gt;Every website needs an address from which to access it. 000webhost provides us with a domain name out of the box: APP_NAME.000webhost.com. This would suffice, for now. If you want a more professional domain name like facecloneapp.com or thefaceclone.co.uk, you&amp;rsquo;ll have to purchase it from a domain name registrar and &amp;ldquo;point it&amp;rdquo; to your web host&amp;rsquo;s servers. But that&amp;rsquo;s beyond the scope of this tutorial so we&amp;rsquo;ll pass. Most domain registrars provide elaborate tutorials on how to setup domains with web hosts so it&amp;rsquo;s really no biggie.&lt;/p&gt;
&lt;h1 id=&#34;000webhost&#34;&gt;000webhost&lt;/h1&gt;
&lt;p&gt;Visit &lt;a href=&#34;https://www.000webhost.com&#34;&gt;https://www.000webhost.com&lt;/a&gt; and sign up for an account. You may need to verify your account by email.&lt;/p&gt;
&lt;p&gt;Login and create a new website using the dialog as shown below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc7/000webhost-new-site.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;Create a new website on 000webhost&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; Note the password you set. We&amp;rsquo;ll use it in a bit.&lt;/p&gt;
&lt;p&gt;Say you named your site faceclone-app, you can check it out using the address faceclone-app.000webhost.com.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc7/new-site-page.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;000webhost&amp;rsquo;s new website page&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;ftp&#34;&gt;FTP&lt;/h1&gt;
&lt;p&gt;Remember FileZilla from Part 1? We&amp;rsquo;ll be using FileZilla, a File Transfer Protocol (FTP) app to upload FaceClone to 000webhost.&lt;/p&gt;
&lt;p&gt;First go to settings on 000webhost. Make sure FTP transfer is set to on. Also take note of the FTP host name and username.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc7/enable-ftp.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now start FileZilla.&lt;/p&gt;
&lt;p&gt;Slot in hostname, username and password (the password for your 000webhost site) in the fields a top the screen and click &lt;em&gt;Quick connect&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc7/connect-with-ftp.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The left part of FileZilla represents your local computer while the right side represents the remote computer (000webhost&amp;rsquo;s server). If you&amp;rsquo;re able to connect successfully, the file system of your site&amp;rsquo;s server would open up on the right side.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; You must be connected to the internet for this to work.&lt;/p&gt;
&lt;p&gt;Navigate your computer&amp;rsquo;s file system to the folder where the FaceClone source code is located. Select all the files and folders there and copy them to your website&amp;rsquo;s server&amp;rsquo;s public_html folder.&lt;/p&gt;
&lt;p&gt;Once the copying is done, try refreshing your 000webhost website page e.g &lt;em&gt;faceclone-app.000webhost.com&lt;/em&gt;. You should see something similar to this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc7/faceclone-db-error.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Everything seems to work f&amp;hellip; The DB&amp;rsquo;s not working. That&amp;rsquo;s a problem! 😑&lt;/p&gt;
&lt;h1 id=&#34;db-setup&#34;&gt;DB setup&lt;/h1&gt;
&lt;p&gt;We need to setup a database on 000webhost to store FaceClone data. Our website&amp;rsquo;s database server rejected the database parameters we have in the source code i.e &lt;em&gt;root&lt;/em&gt; as username with no password. That configuration was for the local database server. We need to change the parameters.&lt;/p&gt;
&lt;p&gt;To create a database on 000webhost, navigate to the &lt;em&gt;Manage database&lt;/em&gt; tab and click on &lt;em&gt;New Database&lt;/em&gt;. You need to set a database name, user and password.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc7/new-db.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that a prefix was added to the database name and user. We&amp;rsquo;ll be using these values (including the db password you set) to configure the FaceClone app.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc7/manage-dbs.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Navigate to the File manager tab and click Upload files now. You&amp;rsquo;ll be redirected to &lt;a href=&#34;https://files.000webhost.com&#34;&gt;https://files.000webhost.com&lt;/a&gt; where you should see all the files uploaded via FTP.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc7/000webhost-files.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Right click on functions.php and click edit.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc7/edit-functions.php.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Change the database params as appropriate, save and close.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc7/update-db-params.jpg&#34; alt=&#34;&#34;&gt;
&lt;em&gt;Change the params in functions.php&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now try refreshing your app&amp;rsquo;s url&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc7/faceclone-index-page.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;Hurray! It works!!!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;import-schema&#34;&gt;Import schema&lt;/h1&gt;
&lt;p&gt;We&amp;rsquo;re not done yet. We need to import the database schema in the new database we created on 000webhost. The schema can be found &lt;a href=&#34;https://github.com/nicholaskajoh/faceclone-site/blob/master/faceclone.sql&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Navigate to the &lt;em&gt;Manage database&lt;/em&gt; tab, click on the &lt;em&gt;Manage&lt;/em&gt; dropdown for your FaceClone database then select PhpMyAdmin.&lt;/p&gt;
&lt;p&gt;Use your database user and password for PhpMyAdmin.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc7/phpmyadmin-login.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;PhpMyAdmin login&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc7/phpmyadmin-home.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;PhpMyAdmin home&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Select your FaceClone database from the sidebar and click on the import tab.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc7/phpmyadmin-import.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Select the schema from your computer and click go&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc7/phpmyadmin-import2.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;Perfecto!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Test out the whole app to ensure there are no breaking errors lurking around&amp;hellip; 😏&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc7/faceclone-signup-success.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc7/faceclone-home.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Remember to change &lt;em&gt;Show errors&lt;/em&gt; in the settings to &lt;strong&gt;Off&lt;/strong&gt; when you&amp;rsquo;re done testing the app.&lt;/p&gt;
&lt;p&gt;Awesome!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; You can share links to your FaceClone app in the comments.&lt;/p&gt;
&lt;h1 id=&#34;next-steps&#34;&gt;Next steps&lt;/h1&gt;
&lt;p&gt;The repo for the version of FaceClone running on 000webhost can be found here: &lt;a href=&#34;https://github.com/nicholaskajoh/faceclone-site&#34;&gt;https://github.com/nicholaskajoh/faceclone-site&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s open to everyone for bug fixes and new features. If you have any ideas and want to code, head over there and contribute to the project.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;A big thanks to you if you followed through to this point! 🎉🎉🎉&lt;/p&gt;
&lt;p&gt;I wish you success in your software development endeavours. Keep building!!!&lt;/p&gt;
- https://alphacoder.xyz/facebook-clone-7/ - Copyright 2020 to ∞. Try Catch Finally Solutions Ltd. All rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>K Nearest Neighbors</title>
        <link>https://alphacoder.xyz/k-nearest-neighbors/</link>
        <pubDate>Sat, 09 Dec 2017 08:44:05 +0100</pubDate>
        
        <guid>https://alphacoder.xyz/k-nearest-neighbors/</guid>
        <description>Alpha Coder https://alphacoder.xyz/k-nearest-neighbors/ -&lt;p&gt;K Nearest Neighbors (KNN) is a Machine Learning algorithm for classification — a &lt;strong&gt;classifier&lt;/strong&gt; as the experts would call it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*eg_VDV5KPHZ-aIzbI11fwg.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Classification is a very fundamental and important activity we perform as humans. We’ve grouped animals, plants, stars, humans, music etc to help us understand them and their relationships better, among other things. Often, we need to classify a thing as part of one of several groups. This crucial activity gets boring to do though. What if computers could do that for us?&lt;/p&gt;
&lt;p&gt;Teaching computers to classify things has been very tedious until Machine Learning. While hard-coded rules may work for a given problem set, everything falls like a pack of cards when a few parameters are added/changed/removed. Worse, a solution becomes useless when a new problem arises. That’s bad for business. 😠&lt;/p&gt;
&lt;h1 id=&#34;the-ml-chops-series&#34;&gt;The ML Chops series&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/linear-regression&#34;&gt;Linear Regression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;K Nearest Neighbors (this article)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/naive-bayes&#34;&gt;Naive Bayes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/support-vector-machine&#34;&gt;Support Vector Machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/k-means&#34;&gt;K Means&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;supervised-learning&#34;&gt;Supervised learning&lt;/h1&gt;
&lt;p&gt;KNN is a supervised learning algorithm. Supervised learning algorithms infer from labelled training data. Say we want to determine whether a person is male or female, the following samples may be useful:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;height (ft)    weight (kg)    sex  
6.3            50.2           Male  
5.9            79.7           Female  
5.1            61.4           Female  
5.6            47.1           Male  
5.1            59.8           Female
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each row of training data (sample) represents a person. The &lt;em&gt;sex&lt;/em&gt; column shows the labels while the &lt;em&gt;height&lt;/em&gt; and &lt;em&gt;weight&lt;/em&gt; columns show the features for each person. Good features translate to better classifiers. Height and weight are probably not the best features to train a classifier that determines the sex of a human being, but they are far better than Hair style or Eye color, for instance. Voice is a very good feature (I think).&lt;/p&gt;
&lt;p&gt;Also, more training data means a better classifier because there are more examples to “learn” from.&lt;/p&gt;
&lt;h1 id=&#34;meet-knn&#34;&gt;Meet KNN&lt;/h1&gt;
&lt;p&gt;K Nearest Neighbors is probably the easiest classification algorithm to understand. Take a look at the following graph:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*hhHhEwuLhRMXQ6gSXEOqdg.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;Graph of height vs weight (data is theoretical)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;What would you classify &lt;em&gt;Blue Diamond 1&lt;/em&gt; as? At a glance, it’s easy to predict/infer that &lt;em&gt;Blue Diamond 1&lt;/em&gt; is most likely/is a &lt;em&gt;Female&lt;/em&gt;. It seems logical to say that &lt;em&gt;Blue Diamond 1&lt;/em&gt; is in the cluster of Females so it’s female. Fair enough.&lt;/p&gt;
&lt;p&gt;What of &lt;em&gt;Blue Diamond 2&lt;/em&gt;? Not so fast! While it seems likely &lt;em&gt;Female&lt;/em&gt;, one could argue it’s &lt;em&gt;Male&lt;/em&gt;. Hmm… Eye-balling won’t cut it.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;KNN provides us a pretty solid way to predict which class Blue Diamond 2 belongs to.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;K Nearest Neighbors outputs a class membership of a feature set by a majority vote of its closest neighbors. In other words, we can find the persons closest to &lt;em&gt;Blue Diamond 2&lt;/em&gt; then cast a vote. If majority are &lt;em&gt;Male&lt;/em&gt;, then we say &lt;em&gt;Blue Diamond 2&lt;/em&gt; is &lt;em&gt;Male&lt;/em&gt;, else we say it’s &lt;em&gt;Female&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*KVn_DG3XvlEiizLesA0rHQ.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;KNN visualization&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Looking at the circled area, we can easily see from the graph (above) that there are 5 persons closest to &lt;em&gt;Blue Diamond 2&lt;/em&gt;. 3 &lt;em&gt;Red Squares&lt;/em&gt; and 2 &lt;em&gt;Green Circles&lt;/em&gt;. KNN says &lt;em&gt;Blue Diamond 2&lt;/em&gt; is Male since males are the majority of the closest neighbors.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;k&lt;/em&gt; in KNN represents the number of neighbors being considered. In the case of classifying &lt;em&gt;Blue Diamond 2&lt;/em&gt;, it’s 5. &lt;em&gt;k&lt;/em&gt; directly affects our prediction so we must use a “good” value. Take into account your data, specifically the number of classes and the sample size of the training set when choosing k.&lt;/p&gt;
&lt;p&gt;In the person classification example we’ve been looking at, we have 2 classes (Male and Female), so k = 2 (or a multiple of 2) is a bad idea right off the bat.&lt;/p&gt;
&lt;p&gt;k = 1? Nah. You can’t have an election with just one candidate, can you?&lt;/p&gt;
&lt;p&gt;k = 3? Yep. Works for me! Since there are only 3 slots, we’ll never have a tie between Male and Female. Also, 3 is a reasonable number of samples to consider for the person classification problem we’re dealing with (the way I see it).&lt;/p&gt;
&lt;p&gt;A “small” value of &lt;em&gt;k&lt;/em&gt; means that noise will have a higher influence on the result. A “large” value of &lt;em&gt;k&lt;/em&gt; defeats the basic philosophy behind the KNN algorithm. There’s no rule for choosing k. It’s best to try out different values and see what works best.&lt;/p&gt;
&lt;h1 id=&#34;code&#34;&gt;Code&lt;/h1&gt;
&lt;p&gt;Let’s use the data from that table 👆 above…&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import numpy as np  
from collections import Counter

data = {&amp;quot;male&amp;quot;: [[6.3, 50.2], [5.6, 47.1]],  
        &amp;quot;female&amp;quot;: [[5.9, 79.7], [5.1, 61.4], [5.1, 59.8]]}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; You need &lt;a href=&#34;https://pypi.python.org/pypi/numpy&#34;&gt;Numpy&lt;/a&gt; installed on your computer.&lt;/p&gt;
&lt;p&gt;Next, let’s write a predict function. This function takes in the input feature set (Python list) we want to classify e.g &lt;code&gt;[6.0, 52.1]&lt;/code&gt; -&amp;gt; &lt;code&gt;[height, weight]&lt;/code&gt;, as well as the value of k, and returns a class (&lt;code&gt;Male&lt;/code&gt; or &lt;code&gt;Female&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def predict(input_feature_set, k):  
  distances = []

  for group in data:  
    for training_feature_set in data[group]:  
      euclidean_distance = np.linalg.norm(np.array(input_feature_set) - np.array(training_feature_set))  
      distances.append([euclidean_distance, group])

  nearest = sorted(distances)[:k]  
  votes = [d[1] for d in nearest]   
  prediction = Counter(votes).most_common(1)[0][0]

  return prediction
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that’s some chunk of code!&lt;/p&gt;
&lt;p&gt;First things first! We loop through each training sample, calculating the &lt;a href=&#34;https://en.wikipedia.org/wiki/Euclidean_distance&#34;&gt;Euclidean distance&lt;/a&gt; between it and the input set.&lt;/p&gt;
&lt;p&gt;The euclidean distance between two points on a cartesian plane is given by:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*j8gq_zqgxLfkbDMCFVDJvg.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Sound familiar?&lt;/p&gt;
&lt;p&gt;In the code, we used numpy’s euclidean distance function &lt;code&gt;np.linalg.norm()&lt;/code&gt; for simplicity and efficiency.&lt;/p&gt;
&lt;p&gt;Next, we append the distance along with the class/group of the set (&lt;code&gt;[euclidean distance, group]&lt;/code&gt; -&amp;gt; &lt;code&gt;[12.092364, “male”]&lt;/code&gt;) to &lt;code&gt;distances&lt;/code&gt; list.&lt;/p&gt;
&lt;p&gt;Afterwards, we sort &lt;code&gt;distances&lt;/code&gt; in ascending order of magnitude and select the first &lt;em&gt;k&lt;/em&gt; elements using &lt;code&gt;sorted(distances)[:k]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then we dispose the distances with the new &lt;code&gt;votes&lt;/code&gt; variable using &lt;code&gt;[d[1] for d in nearest]&lt;/code&gt;. We don’t need the numbers anymore, only the nearest classes/groups e.g &lt;code&gt;[“male”, “female”, “male”]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally, we count the occurrences of each class in &lt;code&gt;votes&lt;/code&gt; and return the class with the highest occurrence.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;prediction = Counter(votes).most_common(1)[0][0]

return prediction
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;predict&#34;&gt;Predict&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;print(predict([6.0, 52.1], 3))
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;accuracy&#34;&gt;Accuracy&lt;/h1&gt;
&lt;p&gt;To find out how accurate a KNN classifier is, we can divide a given data set into training and testing data, then run the test data through the predict function, noting if the classifier got the class right or wrong. This can be used to calculate accuracy, like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;accuracy = correct_predictions / test_sample_size * 100
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;confidence&#34;&gt;Confidence&lt;/h1&gt;
&lt;p&gt;Confidence is, well how &amp;ldquo;confident&amp;rdquo; a KNN classifier is about a prediction. If we have k to be 3 and the nearest neighbors for a person classifier are female, male and female, we can say we’re &lt;code&gt;2/3 * 100&lt;/code&gt; percent confident that the person is female. Likewise, if the nearest neighbors are all male, we can say we’re 100% confident that the person is a male.&lt;/p&gt;
&lt;h1 id=&#34;perf&#34;&gt;Perf&lt;/h1&gt;
&lt;p&gt;While KNN produces good classifiers, it takes a lot of time to predict outputs for large data sets. This is because euclidean distance must be calculated for all training samples in order to find the “nearest” samples in the data.&lt;/p&gt;
&lt;h1 id=&#34;data-sets&#34;&gt;Data sets&lt;/h1&gt;
&lt;p&gt;I suggest you try out KNN with a couple popular data sets to get a feel of how powerful the algorithm is. There are many free KNN data sets online like &lt;a href=&#34;https://www.kaggle.com/styven/iris-dataset&#34;&gt;the Iris data set&lt;/a&gt; and the &lt;a href=&#34;https://www.kaggle.com/uciml/breast-cancer-wisconsin-data&#34;&gt;Breast Cancer Wisconsin (diagnostic) data set&lt;/a&gt;. You should totally check them out!&lt;/p&gt;
&lt;p&gt;Don’t forget to check out the ML Chops repo for the complete KNN code: &lt;a href=&#34;https://github.com/nicholaskajoh/ML_Chops/tree/master/k-nearest-neighbors&#34;&gt;https://github.com/nicholaskajoh/ML_Chops/tree/master/k-nearest-neighbors&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have any questions, concerns or suggestions, don’t hesitate to comment! 👍&lt;/p&gt;
- https://alphacoder.xyz/k-nearest-neighbors/ - Copyright 2020 to ∞. Try Catch Finally Solutions Ltd. All rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>Linear Regression</title>
        <link>https://alphacoder.xyz/linear-regression/</link>
        <pubDate>Mon, 04 Dec 2017 08:44:05 +0100</pubDate>
        
        <guid>https://alphacoder.xyz/linear-regression/</guid>
        <description>Alpha Coder https://alphacoder.xyz/linear-regression/ -&lt;p&gt;What better way to learn than to do? I decided to implement from scratch some Machine Learning algorithms I’m learning as a way to better understand and internalize them. The algorithms include Linear Regression, K Nearest Neighbors, Support Vector Machine, Naive Bayes, K Means and Neural Networks.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*otatqOkzhxFl4LXtkbDmhQ.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ML Chops&lt;/strong&gt; is a series meant to explain the inner workings of these algorithms so you can get a pretty good grasp of how they work as well as know how to implement them yourself. We’ll be using the Python programming language.&lt;/p&gt;
&lt;p&gt;There’s a repo on my GitHub where all the code can be found. The url is: &lt;a href=&#34;https://github.com/nicholaskajoh/ML_Chops&#34;&gt;https://github.com/nicholaskajoh/ML_Chops&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;the-ml-chops-series&#34;&gt;The ML Chops series&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Linear Regression (this article)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/k-nearest-neighbors&#34;&gt;K Nearest Neighbors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/naive-bayes&#34;&gt;Naive Bayes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/support-vector-machine&#34;&gt;Support Vector Machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/k-means&#34;&gt;K Means&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;machine-learning&#34;&gt;Machine Learning&lt;/h1&gt;
&lt;p&gt;I’m assuming Machine Learning is not strange-ish to you. You may not really know how to implement or use Machine Learning algorithms, but you probably have some intuition about how it all works. You essentially “train” an algorithm/a model with data and then it’s able to make predictions, a lot of times very accurately.&lt;/p&gt;
&lt;p&gt;If all this sounds Mandarin, you should probably watch Josh Gordon’s explanation of what Machine Learning is.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;If you’re good at this point, then let’s talk Linear Regression.&lt;/p&gt;
&lt;h1 id=&#34;linear-regression-lr&#34;&gt;Linear Regression (LR)&lt;/h1&gt;
&lt;p&gt;Linear Regression is a simple model for predicting &lt;a href=&#34;https://www.mathsisfun.com/definitions/continuous-data.html&#34;&gt;continuous data&lt;/a&gt;/real-valued outputs. It’s commonly used in subjects like physics, chemistry and math. I first came across it in secondary school practical physics when I had to predict outputs using data recorded during experiments. Sound familiar? 🙄&lt;/p&gt;
&lt;p&gt;Imagine you want to predict the price per barrel of crude oil in Nigeria for tomorrow, next week or next month. With data on the prices over the years or past months, you can make a fairly accurate forecast of what the price would be using LR. Keep in mind that we’re assuming the data is correlated (positively or negatively). If it’s not correlated, then LR is probably not a good fit. We’ll talk about other algorithms that can handle nonlinear data later on in the series. For now we need to use linear data else, our predictions would be really really bad. We don’t want bad! 😒&lt;/p&gt;
&lt;p&gt;The graph below may help you visualize linear data better…&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*iC2R89E_DBY5fSuQApTwhg.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;Graph of linear data&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The first thing you probably noticed is how somewhat scattered the data points are. There’s a pattern though, and it’s linear. As the value on the horizontal axis increases, the value on the vertical axis [generally] increases as well (positive correlation).&lt;/p&gt;
&lt;h1 id=&#34;best-fitline&#34;&gt;Best fit line&lt;/h1&gt;
&lt;p&gt;There’s a green line that passes through some of the points on the graph. It’s called the &lt;strong&gt;line of best fit&lt;/strong&gt;. Ideally this line should pass through all the points. However there is some “error” in the data. This explains why there is some scatteredness in the plot.&lt;/p&gt;
&lt;p&gt;The line of best fit is the best possible line you can draw to fit the data. If the data had no errors, this line would pass through every point in the graph. The real world is not that perfect though. There’s always some degree of error. For instance, the price of crude oil generally increases year after year but not by a constant amount. It may increase $3 this year and $1 next year. As a result, we can’t know for sure how much it would cost in the near future, but we can make predictions given the best fit line. But how do we get the best fit line?&lt;/p&gt;
&lt;h1 id=&#34;equation-of-aline&#34;&gt;Equation of a line&lt;/h1&gt;
&lt;p&gt;Recall the equation of a straight line? It’s &lt;code&gt;y = mx + c&lt;/code&gt;. The best fit line is a straight line so we can use this equation to figure it out.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;x&lt;/em&gt; is the independent variable. In the case of the crude oil example, it’s a year (e.g 2001, 2002, 2003, …, 2010 etc).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;y&lt;/em&gt; is the dependent variable. This is the value we want to predict. Given the prices of oil from 2001 to 2010, we may want to predict the price in 2011, 2012 or even 2018.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;m&lt;/em&gt; is the slope of the line. It’s a number that measures its “steepness”. In other words, it is the change in &lt;em&gt;y&lt;/em&gt; for a unit change in &lt;em&gt;x&lt;/em&gt; along the line.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;c&lt;/em&gt; is the y intercept. That is, the point where the line crosses the vertical/y-axis.&lt;/p&gt;
&lt;p&gt;We know &lt;em&gt;x&lt;/em&gt;. We want to find &lt;em&gt;y&lt;/em&gt;. We just need to figure out what &lt;em&gt;m&lt;/em&gt; and &lt;em&gt;c&lt;/em&gt; is for the best fit line (of a given data set) to be able to make predictions… 🤔&lt;/p&gt;
&lt;p&gt;It turns out that there are formulas from which we can evaluate the slope, &lt;em&gt;m&lt;/em&gt; and y intercept, &lt;em&gt;c.&lt;/em&gt; Once we get the slope and y intercept, our model is ready!&lt;/p&gt;
&lt;p&gt;Mathematically, our LR model may look like this: &lt;code&gt;y = 2.1x + 1.4&lt;/code&gt; where m = 2.1 and c = 1.4&lt;/p&gt;
&lt;h1 id=&#34;slope&#34;&gt;Slope&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*vji1X_3xW3lZsXUY4Vf-cg.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;slope formula&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; the &lt;em&gt;bar&lt;/em&gt; symbol represents &lt;strong&gt;mean/average&lt;/strong&gt;. E.g “X bar” is the mean of the Xs in the dataset.&lt;/p&gt;
&lt;h1 id=&#34;intercept&#34;&gt;Intercept&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*MtVs1yxkMyl2MpK2Wystbg.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;y intercept formula&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;simple-example&#34;&gt;Simple example&lt;/h1&gt;
&lt;p&gt;Say we have the years 2001, 2002, 2003, &amp;hellip;, 2010 and oil prices 43.1, 45.2, 43.7, 49.0, 50.5, 53.7, 53.0, 56.8, 57.2, 60.0. We could come up with a table like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x (yrs)   1    2    3    4    5    6    7    8    9    10

y (in $)  43.1 45.2 43.7 49.0 50.5 53.7 53.0 56.8 57.2 60.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I used 1 to 10 to represent 2001 to 2010 so that calculations would be easier to comprehend. It doesn’t affect anything. You can use the years to do your calculation if that resonates with you. Keep in mind though that the difference of any two consecutive values of x must be 1.&lt;/p&gt;
&lt;p&gt;Using code, we can calculate the slope and intercept like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import numpy as np  
from statistics import mean

xs = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])  
ys = np.array([43.1, 45.2, 43.7, 49.0, 50.5, 53.7, 53.0, 56.8, 57.2, 60.0])

m = ((mean(xs) * mean(ys)) - mean(xs * ys)) / (mean(xs)**2 - mean(xs * xs))

c = mean(ys) - (m * mean(xs))
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;predict&#34;&gt;Predict&lt;/h1&gt;
&lt;p&gt;If we want to predict how much oil would cost in 2018, all we need to do is supply &lt;em&gt;x&lt;/em&gt; in our model. &lt;em&gt;x&lt;/em&gt; would be 18. Thus:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = 18  
y = m * x + c  
print(y)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;model-accuracy&#34;&gt;Model accuracy&lt;/h1&gt;
&lt;p&gt;Accuracy is very important to Machine Learning developers. Our LR model makes predictions. It’s of interest to us to know how accurate these predictions are. While 80% accuracy of a model that predicts the price of oil for me sounds good enough, it’s probably a deal breaker for my client who buys and sells oil. He’s probably looking for somewhere around 95 to 99.9%. 80% is too much risk!&lt;/p&gt;
&lt;p&gt;There are several ways to calculate how accurate a LR model is. We’re going to talk about one of them called R-squared. It’s a statistical measure of how close the data are to the fitted regression line/best fit line. It is also known as the coefficient of determination. With R-squared, we’re simply asking: &lt;em&gt;how good is the best fit line?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Of course, if the best fit line is not good enough, then it’s the data to blame (it’s the best fit line duh 😜). Regardless, it means the predictions made using the line would be less accurate.&lt;/p&gt;
&lt;p&gt;R-squared is given by the formula:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*HTeayn8hGYQzICFcYc3OdA.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;r squared&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;SS stands for &lt;em&gt;Sum of Squared error of&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;y hat line (y with the caret) is the &lt;em&gt;ys of the best fit line ( for each x)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;y bar is the &lt;em&gt;mean of the ys&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;To calculate the R-squared for a given model:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;best_fit_line = [(m * x) + c for x in xs]

SSy_hat = sum([y * y for y in (best_fit_line - ys)]) # y hat line  
SSy_mean = sum([y * y for y in [y - mean(ys) for y in ys]]) # mean of ys

r2 = 1 - (SSy_hat / SSy_mean)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The range of r2 is usually 0 to 1 so you can multiply it by 100 to get a percentage.&lt;/p&gt;
&lt;p&gt;Don’t forget to check out the repo for the complete Linear Regression code: &lt;a href=&#34;https://github.com/nicholaskajoh/ML_Chops/tree/master/linear-regression&#34;&gt;https://github.com/nicholaskajoh/ML_Chops/tree/master/linear-regression&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have any questions, concerns or suggestions, don’t hesitate to comment! 👍&lt;/p&gt;
- https://alphacoder.xyz/linear-regression/ - Copyright 2020 to ∞. Try Catch Finally Solutions Ltd. All rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>A responsive grid system with few lines of CSS</title>
        <link>https://alphacoder.xyz/responsive-grid-system/</link>
        <pubDate>Sun, 19 Nov 2017 20:07:00 +0000</pubDate>
        
        <guid>https://alphacoder.xyz/responsive-grid-system/</guid>
        <description>Alpha Coder https://alphacoder.xyz/responsive-grid-system/ -&lt;p&gt;How many times have you added Bootstrap to your project just for its grid system? Probably not enough times to think about learning how to create your own grid system. However, there are times when you need &lt;em&gt;something light&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;Say you’re learning a new framework or testing out some code and you want to throw in some grid love so that things look a little organized on the page. Would you rather include the heavyweight champ that is Bootstrap, or scribble a few lines of grid code?&lt;/p&gt;
&lt;p&gt;While adding Bootstrap may sound easier, you might be faced with the nightmare that is overriding classes. Nobody loves overriding the classes they don’t want/need, plus you’re now distracted from what you really want to accomplish. Besides, you don’t lose anything by learning how to write a grid system. In fact, it makes you understand and appreciate CSS libraries and better.&lt;/p&gt;
&lt;p&gt;There was this school project I had to work on. It was pretty basic, but I needed a grid system. I had already decided to build it from the ground up with only vanilla, so Bootstrap or Materialize was not an option. I had to learn how to write my own grid system. It turns out that it’s not difficult at all. In fact, I wrote a grid system with a few lines of CSS code.&lt;/p&gt;
&lt;p&gt;It’s important to note that there are several ways of building a grid system; each with its own quirks. It’s easy to forget that CSS 1.0 wasn’t made with grid in mind as the webosphere is now littered with millions of sites using layouts of all shapes and sizes.&lt;/p&gt;
&lt;p&gt;Devs cooked up various workarounds and hacks. They used &lt;strong&gt;tables&lt;/strong&gt; to create grids back in the day. More recently, they used &lt;strong&gt;floats&lt;/strong&gt;. Float grids sufficed until they didn’t. They are still in use today. However, &lt;strong&gt;flexbox&lt;/strong&gt; has replaced float grid systems on many sites online. Flexbox was made to solve the grid problem. Nevertheless, flexbox has it’s own limitations. The new kid on the block, &lt;strong&gt;grid layout&lt;/strong&gt;, was created to handle more complex systems that web apps of today demand.&lt;/p&gt;
&lt;p&gt;I used flexbox to create a simple grid system. Flexbox is great! It&amp;rsquo;s supported in major browsers and is easy to implement.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;I don’t want get into the intricacies of flexbox. I’ll be reinventing the wheel by doing that. Instead I’ll point you to a resource that helped me wrap my head around it. Nonetheless, from the code, it’s relatively easy to figure out how everything kinda works. It’s basically some flexbox code and media queries for 3 view ports — mobile, tablet and desktop.&lt;/p&gt;
&lt;p&gt;Just add the following simple markup and you’re good to go.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;section&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;article&lt;/span&gt;&amp;gt;Content&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;article&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;aside&lt;/span&gt;&amp;gt;Sidebar&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;aside&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;section&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can always add a few more lines for other neat functionalities. If you feel you’re doing too much, it may be time to throw in a library or something. If you feel Bootstrap or any other UI library is overkill, there are a ton of CSS grid libraries. I don’t want to name names, but Google is your friend. A search would yield a ton of interesting results.&lt;/p&gt;
&lt;p&gt;Check out the repo for this tutorial: &lt;a href=&#34;https://github.com/nicholaskajoh/Simple-CSS-Grid&#34;&gt;https://github.com/nicholaskajoh/Simple-CSS-Grid&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also, you should totally read &lt;a href=&#34;https://css-tricks.com/snippets/css/a-guide-to-flexbox/&#34;&gt;Chris Coyier’s complete guide to flexbox&lt;/a&gt;. If you have the time, go through &lt;a href=&#34;https://css-tricks.com/snippets/css/complete-guide-grid/&#34;&gt;Chris House’ complete guide to grid&lt;/a&gt; as well.&lt;/p&gt;
- https://alphacoder.xyz/responsive-grid-system/ - Copyright 2020 to ∞. Try Catch Finally Solutions Ltd. All rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>Build a Facebook clone from scratch with PHP — Part 6</title>
        <link>https://alphacoder.xyz/facebook-clone-6/</link>
        <pubDate>Sat, 23 Sep 2017 09:07:23 +0100</pubDate>
        
        <guid>https://alphacoder.xyz/facebook-clone-6/</guid>
        <description>Alpha Coder https://alphacoder.xyz/facebook-clone-6/ -&lt;h1 id=&#34;all-parts&#34;&gt;All parts&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-1&#34;&gt;Build a Facebook clone from scratch with PHP — Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-2&#34;&gt;Build a Facebook clone from scratch with PHP — Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-3&#34;&gt;Build a Facebook clone from scratch with PHP — Part 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-4&#34;&gt;Build a Facebook clone from scratch with PHP — Part 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-5&#34;&gt;Build a Facebook clone from scratch with PHP — Part 5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Build a Facebook clone from scratch with PHP — Part 6 (this article)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-7&#34;&gt;Build a Facebook clone from scratch with PHP — Part 7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Relationships are the point of social networks. For real! Social networks like Facebook enable us connect with different people far and near and to share in their life and experiences. Facebook uses the &amp;ldquo;friend&amp;rdquo; model of relationships (I&amp;rsquo;m your friend; you&amp;rsquo;re my friend). There are other models like the popular &amp;ldquo;following-follower&amp;rdquo; model. Implementing relationships can easily get complex. We want to keep things simple though so we&amp;rsquo;ll explore a very basic approach. Also, we won&amp;rsquo;t be exploiting the relationship model we&amp;rsquo;ll be creating in the workings of our application. Again, it&amp;rsquo;s to keep things simple.&lt;/p&gt;
&lt;h1 id=&#34;friend-relationships&#34;&gt;Friend relationships&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;I&amp;rsquo;m your friend and you&amp;rsquo;re my friend&lt;/em&gt;. That&amp;rsquo;s the idea for the friend relationship model. It starts by making a friend request. The user at the receiving end may choose to accept or decline the request. If they accept, the user who made the request is added to their friends&amp;rsquo; list and vice versa [or so] thus a relationship exists between the two of them. If a request is declined, nothing happens, basically.&lt;/p&gt;
&lt;p&gt;Without further ado, let&amp;rsquo;s implement something of that sort for FaceClone.&lt;/p&gt;
&lt;h1 id=&#34;list-users&#34;&gt;List users&lt;/h1&gt;
&lt;p&gt;We want to provide a list of FaceClone users to a user so that they can add any of them as friends. The right sidebar of the home.php template has an &amp;ldquo;add friend&amp;rdquo; panel. Let&amp;rsquo;s use it. All we need do is list out all our users.&lt;/p&gt;
&lt;p&gt;In the &amp;ldquo;add friend&amp;rdquo; section, we&amp;rsquo;ll have…&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;h4&amp;gt;add friend&amp;lt;/h4&amp;gt;
&amp;lt;?php
    $sql = &amp;quot;SELECT id, username, (SELECT COUNT(*) FROM friends WHERE friends.user_id = users.id AND friends.friend_id = {$_SESSION[&#39;user_id&#39;]}) AS is_friend FROM users WHERE id != {$_SESSION[&#39;user_id&#39;]} HAVING is_friend = 0&amp;quot;;
    $result = $conn-&amp;gt;query($sql);

    if ($result-&amp;gt;num_rows &amp;gt; 0) {
        ?&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;?php
    
        while($fc_user = $result-&amp;gt;fetch_assoc()) {
            ?&amp;gt;&amp;lt;li&amp;gt;
                &amp;lt;a href=&amp;quot;profile.php?username=&amp;lt;?php echo $fc_user[&#39;username&#39;]; ?&amp;gt;&amp;quot;&amp;gt;
                    &amp;lt;?php echo $fc_user[&#39;username&#39;]; ?&amp;gt;
                &amp;lt;/a&amp;gt; 
                &amp;lt;a href=&amp;quot;php/add-friend.php?uid=&amp;lt;?php echo $fc_user[&#39;id&#39;]; ?&amp;gt;&amp;quot;&amp;gt;[add]&amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;&amp;lt;?php
        }
    
        ?&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;?php
    } else {
        ?&amp;gt;&amp;lt;p class=&amp;quot;text-center&amp;quot;&amp;gt;No users to add!&amp;lt;/p&amp;gt;&amp;lt;?php
    }
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that&amp;rsquo;s some code! Let&amp;rsquo;s break it down bit by bit. We want to list FaceClone users. That&amp;rsquo;s the goal. So why do we have a long and &amp;ldquo;complex&amp;rdquo; SQL query? Can&amp;rsquo;t we just use &lt;code&gt;SELECT * FROM users&lt;/code&gt;? We can. But it&amp;rsquo;s not that simple. There are 2 constraints we need to set. First, users that are already friends with the current user (who is looking to get new friends) shouldn&amp;rsquo;t be displayed on the list. That makes sense right? Secondly, the current user shouldn&amp;rsquo;t be on the list. You shouldn&amp;rsquo;t be able to friend yourself, should you? There are other constraints that can be added to make things more fluid as well as &amp;ldquo;waterproof&amp;rdquo;, but considering them would just make things more complicated so we&amp;rsquo;ll just leave things as they are.&lt;/p&gt;
&lt;p&gt;To achieve the first constraint, we added a column to the users table results called &lt;code&gt;is_friend&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(SELECT COUNT(*) FROM friends WHERE friends.user_id = users.id AND friends.friend_id = {$_SESSION[&#39;user_id&#39;]}) AS is_friend
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This column would contain a 0 or 1 for each user record. 0 means not a friend of the current user while 1 means [already] a friend. Using the &lt;code&gt;HAVING&lt;/code&gt; keyword, we exclude records with &lt;code&gt;is_friend&lt;/code&gt; value of 1. That is&amp;hellip;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;HAVING is_friend = 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The second constraint is achieved using the &lt;code&gt;WHERE&lt;/code&gt; clause to exclude the current user from the list thus:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;WHERE id != {$_SESSION[&#39;user_id&#39;]}
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;send-a-friendrequest&#34;&gt;Send a friend request&lt;/h1&gt;
&lt;p&gt;In the users list, there&amp;rsquo;s an add friend link beside each username.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;php/add-friend.php?uid=&amp;lt;?php echo $fc_user[&#39;id&#39;]; ?&amp;gt;&amp;quot;&amp;gt;[add]&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The links lead to a GET endpoint &lt;code&gt;php/add-friend.php?uid=&lt;/code&gt;. Go ahead, as always and create a file in the php folder called add-friend.php with the following code&amp;hellip;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
    require_once &amp;quot;../functions.php&amp;quot;;
    db_connect();
    $sql = &amp;quot;INSERT INTO friend_requests (user_id, friend_id) VALUES (?, ?)&amp;quot;;
    $statement = $conn-&amp;gt;prepare($sql);
    $statement-&amp;gt;bind_param(&#39;ii&#39;, $_SESSION[&#39;user_id&#39;], $_GET[&#39;uid&#39;]);
    if ($statement-&amp;gt;execute()) {
        redirect_to(&amp;quot;/home.php?request_sent=true&amp;quot;);
    } else {
        echo &amp;quot;Error: &amp;quot; . $conn-&amp;gt;error;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With a supplied user id in the GET request, we can create a new friend request. The user to whom the request is being made is the friend so their id is stored in &lt;code&gt;friend_id&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;acceptdecline-friendrequests&#34;&gt;Accept/decline friend requests&lt;/h1&gt;
&lt;p&gt;The user who is requested should be able to see who requested them and choose whether to accept or decline. The left sidebar in home.php provides such a facility. With a little padding, we could arrive at something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;h4&amp;gt;friend requests&amp;lt;/h4&amp;gt;
&amp;lt;?php
    $sql = &amp;quot;SELECT * FROM friend_requests WHERE friend_id = {$_SESSION[&#39;user_id&#39;]}&amp;quot;;
    $result = $conn-&amp;gt;query($sql);

    if ($result-&amp;gt;num_rows &amp;gt; 0) {
        ?&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;?php

        while($f_request = $result-&amp;gt;fetch_assoc()) {
            ?&amp;gt;&amp;lt;li&amp;gt;&amp;lt;?php
                
            $u_sql = &amp;quot;SELECT * FROM users WHERE id = {$f_request[&#39;user_id&#39;]} LIMIT 1&amp;quot;;
            $u_result = $conn-&amp;gt;query($u_sql);
            $fr_user = $u_result-&amp;gt;fetch_assoc();
            
            ?&amp;gt;&amp;lt;a href=&amp;quot;profile.php?username=&amp;lt;?php echo $fr_user[&#39;username&#39;]; ?&amp;gt;&amp;quot;&amp;gt;
                &amp;lt;?php echo $fr_user[&#39;username&#39;]; ?&amp;gt;
            &amp;lt;/a&amp;gt; 
                
            &amp;lt;a class=&amp;quot;text-success&amp;quot; href=&amp;quot;php/accept-request.php?uid=&amp;lt;?php echo $fr_user[&#39;id&#39;]; ?&amp;gt;&amp;quot;&amp;gt;
                [accept]
            &amp;lt;/a&amp;gt; 
                
            &amp;lt;a class=&amp;quot;text-danger&amp;quot; href=&amp;quot;php/remove-request.php?uid=&amp;lt;?php echo $fr_user[&#39;id&#39;]; ?&amp;gt;&amp;quot;&amp;gt;
                [decline]
            &amp;lt;/a&amp;gt;

            &amp;lt;/li&amp;gt;&amp;lt;?php
        }

        ?&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;?php
    } else {
        ?&amp;gt;&amp;lt;p class=&amp;quot;text-center&amp;quot;&amp;gt;No friend requests!&amp;lt;/p&amp;gt;&amp;lt;?php
    }
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the snippet above, there are two sets of queries. The first pulls out all the friend requests to the current user. The second fetches data (of the requesting user) for each friend request.&lt;/p&gt;
&lt;p&gt;There are two links beside each user&amp;rsquo;s username. One to accept and the other to decline. They both lead to different end points. The former to &lt;code&gt;php/accept-request.php?uid=&lt;/code&gt; and the latter to &lt;code&gt;php/remove-request.php?uid=&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Remove request:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
    require_once &amp;quot;../functions.php&amp;quot;;
    db_connect();
    $sql = &amp;quot;DELETE FROM friend_requests WHERE user_id = ?&amp;quot;;
    $statement = $conn-&amp;gt;prepare($sql);
    $statement-&amp;gt;bind_param(&#39;i&#39;, $_GET[&#39;uid&#39;]);
    if ($statement-&amp;gt;execute()) {
        redirect_to(&amp;quot;/profile.php?username=&amp;quot; . $_SESSION[&#39;user_username&#39;]);
    } else {
        echo &amp;quot;Error: &amp;quot; . $conn-&amp;gt;error;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Accept request:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
    require_once &amp;quot;../functions.php&amp;quot;;
    db_connect();
    // add users to friends table
    $statement = $conn-&amp;gt;prepare(&amp;quot;INSERT INTO friends (user_id, friend_id) VALUES (?, ?), (?, ?)&amp;quot;);
    $statement-&amp;gt;bind_param(&#39;iiii&#39;, $_SESSION[&#39;user_id&#39;], $_GET[&#39;uid&#39;], $_GET[&#39;uid&#39;], $_SESSION[&#39;user_id&#39;]);
    // remove friend request
    if ($statement-&amp;gt;execute()) {
        redirect_to(&amp;quot;/php/remove-request.php?uid=&amp;quot; . $_GET[&#39;uid&#39;]);
    } else {
        echo &amp;quot;Error: &amp;quot; . $conn-&amp;gt;error;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Friendship is two-sided. I am your and you are my friend. As such, in accept-request.php we insert two records. In one, the current user is the friend and in the other the requesting user is the friend. While it seems like unnecessary duplication, it proves easier to manage. Also notice we use remove-request.php in accept-request.php to delete a friend request once two users have been added as friends.&lt;/p&gt;
&lt;h1 id=&#34;unfriend-user&#34;&gt;Unfriend user&lt;/h1&gt;
&lt;p&gt;Unfriending is as simple as removing the records in the friends table that connects two users.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
    require_once &amp;quot;../functions.php&amp;quot;;
    db_connect();
    $sql = &amp;quot;DELETE FROM friends WHERE (user_id = ? AND friend_id = ?) OR (user_id = ? AND friend_id = ?)&amp;quot;;
    $statement = $conn-&amp;gt;prepare($sql);
    $statement-&amp;gt;bind_param(&#39;iiii&#39;, $_GET[&#39;uid&#39;], $_SESSION[&#39;user_id&#39;], $_SESSION[&#39;user_id&#39;], $_GET[&#39;uid&#39;]);
    if ($statement-&amp;gt;execute()) {
        redirect_to(&amp;quot;/profile.php?username=&amp;quot; . $_SESSION[&#39;user_username&#39;]);
    } else {
        echo &amp;quot;Error: &amp;quot; . $conn-&amp;gt;error;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Viola! We&amp;rsquo;ve built friend relationships into FaceClone!&lt;/p&gt;
&lt;p&gt;Again, we&amp;rsquo;re not exploiting the relationships we just created, to keep things simple. But it&amp;rsquo;s pretty straightforward to do so. For example, instead of displaying all FaceClone posts on a user&amp;rsquo;s feed, we could display only posts from their friends. We could also make some of a user&amp;rsquo;s profile information only available to their friends. If we had a chat feature, we could allow only friends chat with each other. As a social network grows, this would make more sense. So if you&amp;rsquo;re working on your social network app after this series (I totally encourage it), keep in mind what the relationships you create would imply.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;At this point, I must say we are done; at least at the most basic level. So congrats for following through!!! Building a social networking app, especially one like Facebook, is a never-ending journey. There&amp;rsquo;s always something to add to make it easier, faster and/or better to use.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll be deploying the FaceClone web app online for anyone to use in the next and last part of this series. Be sure to read it!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The final code for this part is contained in my &lt;a href=&#34;https://github.com/nicholaskajoh/faceclone&#34;&gt;FaceClone repo&lt;/a&gt;. Visit the link and click on the part-6 folder to see progress made so far.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Next: &lt;a href=&#34;https://alphacoder.xyz/facebook-clone-7&#34;&gt;Build a Facebook clone from scratch with PHP — Part 7&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Previous: &lt;a href=&#34;https://alphacoder.xyz/facebook-clone-5&#34;&gt;Build a Facebook clone from scratch with PHP — Part 5&lt;/a&gt;.&lt;/p&gt;
- https://alphacoder.xyz/facebook-clone-6/ - Copyright 2020 to ∞. Try Catch Finally Solutions Ltd. All rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>Build a Facebook clone from scratch with PHP — Part 5</title>
        <link>https://alphacoder.xyz/facebook-clone-5/</link>
        <pubDate>Wed, 20 Sep 2017 09:07:20 +0100</pubDate>
        
        <guid>https://alphacoder.xyz/facebook-clone-5/</guid>
        <description>Alpha Coder https://alphacoder.xyz/facebook-clone-5/ -&lt;h1 id=&#34;all-parts&#34;&gt;All parts&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-1&#34;&gt;Build a Facebook clone from scratch with PHP — Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-2&#34;&gt;Build a Facebook clone from scratch with PHP — Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-3&#34;&gt;Build a Facebook clone from scratch with PHP — Part 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-4&#34;&gt;Build a Facebook clone from scratch with PHP — Part 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Build a Facebook clone from scratch with PHP — Part 5 (this article)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-6&#34;&gt;Build a Facebook clone from scratch with PHP — Part 6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-7&#34;&gt;Build a Facebook clone from scratch with PHP — Part 7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Every Facebook user has a profile. Let&amp;rsquo;s create profile pages for FaceClone users!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc5/faceclone-profile.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;FaceClone profile page&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;but-before-iforget&#34;&gt;But before I forget&amp;hellip;&lt;/h1&gt;
&lt;p&gt;Recall that we used id of &lt;em&gt;zero&lt;/em&gt; for the user_id fields in our posts table. That was because we didn&amp;rsquo;t have any users. Now that we do, let&amp;rsquo;s change things a bit.
The query in create-post.php becomes&amp;hellip;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
$sql = &amp;quot;INSERT INTO posts (content, user_id) VALUES (?, ?)&amp;quot;;
...
$statement-&amp;gt;bind_param(&#39;si&#39;, $_POST[&#39;content&#39;], $_SESSION[&#39;user_id&#39;]);
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We simply change the user_id value to the user_id session which is created when a user logs in.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; Since registration now works in our application, you may delete the dummy user accounts and use the registration form for account/user creation.&lt;/p&gt;
&lt;h1 id=&#34;so&#34;&gt;So&amp;hellip;&lt;/h1&gt;
&lt;p&gt;Isn&amp;rsquo;t there just one profile page (i.e profile.php)? How do we create profile pages for &amp;ldquo;all&amp;rdquo; our users? Well, we can make profile.php dynamic like we did with home.php. In essence, we would have one page, but different data depending on a given user. There are many ways to achieve this. Our approach in this part is simple though. We simply provide a user&amp;rsquo;s username as a parameter in the profile url and use it (the username) to pull the user&amp;rsquo;s data from the DB. E.g example.com/profile.php?username=nicholas.&lt;/p&gt;
&lt;p&gt;Since the username is sent through a GET request, we can retrieve it with the &lt;code&gt;$_GET&lt;/code&gt; superglobal using &lt;code&gt;$_GET[&#39;username&#39;]&lt;/code&gt;. Let&amp;rsquo;s write some code:&lt;/p&gt;
&lt;p&gt;Atop profile.php…&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
$sql = &amp;quot;SELECT id, username, status, profile_image_url, location FROM users WHERE username = ?&amp;quot;;
$statement = $conn-&amp;gt;prepare($sql);
$statement-&amp;gt;bind_param(&#39;s&#39;, $_GET[&#39;username&#39;]);
$statement-&amp;gt;execute();
$statement-&amp;gt;store_result();
$statement-&amp;gt;bind_result($id, $username, $status, $profile_image_url, $location);
$statement-&amp;gt;fetch();
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, we get the username, then run a query to fetch a user using their username and that&amp;rsquo;s just about it. &lt;code&gt;$id&lt;/code&gt;, &lt;code&gt;$username&lt;/code&gt;, &lt;code&gt;$status&lt;/code&gt;, &lt;code&gt;$profile_image_url&lt;/code&gt; and &lt;code&gt;$location&lt;/code&gt; variables can now be echoed out where we need them in the page.&lt;/p&gt;
&lt;h1 id=&#34;user-posts&#34;&gt;User posts&lt;/h1&gt;
&lt;p&gt;Then again, we want to show only the posts belonging to the user whose profile is being displayed. Taking a cue from the home page which displays the posts of all users across FaceClone (part 3), we can create a new sql query:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$user_posts_sql = &amp;quot;SELECT * FROM posts WHERE user_id = {$id} ORDER BY created_at DESC&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the query above, we use the where clause to limit the posts to the ones belonging to the profile owner. &lt;code&gt;$id&lt;/code&gt; is the user&amp;rsquo;s id got from the query to fetch a user&amp;rsquo;s record.&lt;/p&gt;
&lt;h1 id=&#34;edit-profile&#34;&gt;Edit profile&lt;/h1&gt;
&lt;p&gt;Lastly, we need to allow users to make changes to their profiles. There&amp;rsquo;s a little form in profile.php we can use to update status and location. Let&amp;rsquo;s make it work!
The form…&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
&amp;lt;form method=&amp;quot;post&amp;quot; action=&amp;quot;php/edit-profile.php&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
    &amp;lt;input class=&amp;quot;form-control&amp;quot; type=&amp;quot;text&amp;quot; name=&amp;quot;status&amp;quot; placeholder=&amp;quot;Status&amp;quot; value=&amp;quot;&amp;quot;&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
    &amp;lt;input class=&amp;quot;form-control&amp;quot; type=&amp;quot;text&amp;quot; name=&amp;quot;location&amp;quot; placeholder=&amp;quot;Location&amp;quot; value=&amp;quot;&amp;quot;&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
    &amp;lt;input class=&amp;quot;btn btn-primary&amp;quot; type=&amp;quot;submit&amp;quot; value=&amp;quot;Save&amp;quot;&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/form&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now create a file in the php folder called edit-profile.php with the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
    require_once &amp;quot;../functions.php&amp;quot;;
    db_connect();
    $sql = &amp;quot;UPDATE users SET status = ?, location = ? WHERE id = ?&amp;quot;;
    $statement = $conn-&amp;gt;prepare($sql);
    $statement-&amp;gt;bind_param(&#39;ssi&#39;, $_POST[&#39;status&#39;], $_POST[&#39;location&#39;], $_SESSION[&#39;user_id&#39;]);
    if ($statement-&amp;gt;execute()) {
        redirect_to(&amp;quot;/profile.php?username={$_SESSION[&#39;user_username&#39;]}&amp;quot;);
    } else {
        echo &amp;quot;Error: &amp;quot; . $conn-&amp;gt;error;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You&amp;rsquo;re probably used to the above snippet by now. We update the status and location of a user using the &lt;code&gt;UPDATE&lt;/code&gt; sql statement then redirect back to profile.php. Sweet!&lt;/p&gt;
&lt;p&gt;*drops mic*&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The final code for this part is contained in my &lt;a href=&#34;https://github.com/nicholaskajoh/faceclone&#34;&gt;FaceClone repo&lt;/a&gt;. Visit the link and click on the part-5 folder to see progress made so far.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Next: &lt;a href=&#34;https://alphacoder.xyz/facebook-clone-6&#34;&gt;Build a Facebook clone from scratch with PHP — Part 6&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Previous: &lt;a href=&#34;https://alphacoder.xyz/facebook-clone-4&#34;&gt;Build a Facebook clone from scratch with PHP — Part 4&lt;/a&gt;.&lt;/p&gt;
- https://alphacoder.xyz/facebook-clone-5/ - Copyright 2020 to ∞. Try Catch Finally Solutions Ltd. All rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>Build a Facebook clone from scratch with PHP — Part 4</title>
        <link>https://alphacoder.xyz/facebook-clone-4/</link>
        <pubDate>Thu, 14 Sep 2017 09:07:14 +0100</pubDate>
        
        <guid>https://alphacoder.xyz/facebook-clone-4/</guid>
        <description>Alpha Coder https://alphacoder.xyz/facebook-clone-4/ -&lt;h1 id=&#34;all-parts&#34;&gt;All parts&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-1&#34;&gt;Build a Facebook clone from scratch with PHP — Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-2&#34;&gt;Build a Facebook clone from scratch with PHP — Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-3&#34;&gt;Build a Facebook clone from scratch with PHP — Part 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Build a Facebook clone from scratch with PHP — Part 4 (this article)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-5&#34;&gt;Build a Facebook clone from scratch with PHP — Part 5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-6&#34;&gt;Build a Facebook clone from scratch with PHP — Part 6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-7&#34;&gt;Build a Facebook clone from scratch with PHP — Part 7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Users are at the center of any application. It&amp;rsquo;s all about the user, right? Unlike other types of web apps (e.g blogs), our users must be identifiable. They can&amp;rsquo;t be anonymous. They need to have accounts on our platform. And to get accounts, they have to register. After registration, they must login to their accounts. In this part, we&amp;rsquo;re going to make all this possible, and some.&lt;/p&gt;
&lt;h1 id=&#34;registration&#34;&gt;Registration&lt;/h1&gt;
&lt;p&gt;We already have a registration form in our index.php template.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
&amp;lt;form method=&amp;quot;post&amp;quot; action=&amp;quot;php/register.php&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
        &amp;lt;input class=&amp;quot;form-control&amp;quot; type=&amp;quot;text&amp;quot; name=&amp;quot;username&amp;quot; placeholder=&amp;quot;Username&amp;quot; required&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
        &amp;lt;input class=&amp;quot;form-control&amp;quot; type=&amp;quot;text&amp;quot; name=&amp;quot;location&amp;quot; placeholder=&amp;quot;Location&amp;quot;&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
        &amp;lt;input class=&amp;quot;form-control&amp;quot; type=&amp;quot;password&amp;quot; name=&amp;quot;password&amp;quot; placeholder=&amp;quot;Password&amp;quot; required&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
        &amp;lt;input class=&amp;quot;btn btn-success&amp;quot; type=&amp;quot;submit&amp;quot; name=&amp;quot;register&amp;quot; value=&amp;quot;Register&amp;quot;&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/form&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When a user fills the registration form and submits, all we need to do is feed our database with the information.&lt;/p&gt;
&lt;p&gt;Create a file called register.php in the php folder. This is where we would process registration submissions.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
    require_once &amp;quot;../functions.php&amp;quot;;
    db_connect();
    $sql = &amp;quot;INSERT INTO users (username, password, location) VALUES (?, ?, ?)&amp;quot;;
    $statement = $conn-&amp;gt;prepare($sql);
    $statement-&amp;gt;bind_param(&#39;sss&#39;, $_POST[&#39;username&#39;], password_hash($_POST[&#39;password&#39;], PASSWORD_DEFAULT), $_POST[&#39;location&#39;]);
    if ($statement-&amp;gt;execute()) {
        redirect_to(&amp;quot;/index.php?registered=true&amp;quot;);
    } else {
        echo &amp;quot;Error: &amp;quot; . $conn-&amp;gt;error;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Like always, the code is easy to understand. After we call &lt;code&gt;db_connect()&lt;/code&gt; to help us establish a connection to the database, we build an SQL query, an insert query that, well, inserts (or creates) data in our DB.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;ve noticed, we&amp;rsquo;ve been using &amp;ldquo;prepared statements&amp;rdquo; to perform some SQL queries. There are couple other ways to perform operations [using PHP] on our DB (e.g the way we used to pull up post records in part 3). Prepared statements are however preferred/safer for operations that change/manipulate data because, BAD PEOPLE (the black hats) can attempt to mess us up using SQL Injection. There&amp;rsquo;s no time to talk about SQL Injection here but hey, Google is your friend. Anyways, let&amp;rsquo;s move on.&lt;/p&gt;
&lt;p&gt;Another security concern is with passwords. It is bad practice to store &amp;ldquo;raw&amp;rdquo; passwords because if someone gets access to your DB, they can screw you and your users over. It&amp;rsquo;s safer to &amp;ldquo;hash&amp;rdquo; passwords. Hashing algorithms perform one-way transformations, turning one string to another string called a hash. There are a good number of hashing algorithms you can use for passwords e.g md5, sha1, bcrypt etc. Lucky for us, we don&amp;rsquo;t have to worry about these algorithms. PHP provides a hashing function we can use:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;password_hash(&#39;secret123&#39;, PASSWORD_DEFAULT);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Password hashes are usually a long string of &amp;ldquo;random&amp;rdquo; characters like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$2y$10$aClhvyCsqbPgx.SE7L43z.oZhBPNhqg3lOMJWPMC1KUT9UIeiR.Vi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once the insert is done, we redirect the user to same index.php with some GET data.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;example.com/index.php?registered=true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This data tells us the user has been registered, so we can alert the user as well and urge them to login. Somewhere atop index.php, we can have:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
&amp;lt;?php if(isset($_GET[&#39;registered&#39;])): ?&amp;gt;
&amp;lt;div class=&amp;quot;alert alert-success&amp;quot;&amp;gt;
    &amp;lt;p&amp;gt;Account created successfully! Use your username and password to login.&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;?php endif; ?&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;login&#34;&gt;Login&lt;/h1&gt;
&lt;p&gt;Login is also straightforward. What we want to achieve is to create a way to identify users as they go from page to page in our application. We want to be able to know if the person [currently] using our app is &amp;ldquo;logged in&amp;rdquo;, but more importantly, who they are if they are logged in.&lt;/p&gt;
&lt;p&gt;There are two things involved:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Authentication&lt;/strong&gt; - which asks &amp;ldquo;Who are you?&amp;rdquo; and &amp;ldquo;Are you really who you say you are?&amp;rdquo;. The former is asked through a login form where the user provides their username and password, while the latter is asked when the application checks to see if the credentials submitted match any existing records.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Authorization&lt;/strong&gt; - If a user is who they say they are, then we can give them access to resources (e.g pages) unavailable to people not registered to our app. We have to do some kind of check to see if a request coming to our server is from a &amp;ldquo;legit&amp;rdquo; user and then authorize/allow access to the page they requested.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We use &lt;em&gt;sessions&lt;/em&gt; to authorize requests. Like the name implies, a session grants access to an application&amp;rsquo;s resources for a period. For instance, after being authenticated by security at, say, a library (probably with a student or National ID), you can do whatever you like (read books, watch educational material, browse the internet etc) until you leave/the library is closed for the day. When you visit next time, you must be authenticated again. But while you&amp;rsquo;re in the library, nobody asks you to identify yourself before picking up a book or watching some educational video. It is believed that you have been &amp;ldquo;authenticated&amp;rdquo;, so to speak.&lt;/p&gt;
&lt;p&gt;PHP provides us a superglobal called &lt;code&gt;$_SESSION&lt;/code&gt; - an array which contains session variables. The variables we store in &lt;code&gt;$_SESSION&lt;/code&gt; persist until the browser is closed. I don&amp;rsquo;t want to go into exactly how sessions work. Again, Google is your friend, so google.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a snippet of the login form:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
&amp;lt;form method=&amp;quot;post&amp;quot; action=&amp;quot;php/login.php&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
    &amp;lt;input class=&amp;quot;form-control&amp;quot; type=&amp;quot;text&amp;quot; name=&amp;quot;username&amp;quot; placeholder=&amp;quot;Username&amp;quot; required&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
    &amp;lt;input class=&amp;quot;form-control&amp;quot; type=&amp;quot;password&amp;quot; name=&amp;quot;password&amp;quot; placeholder=&amp;quot;Password&amp;quot; required&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
    &amp;lt;input class=&amp;quot;btn btn-primary&amp;quot; type=&amp;quot;submit&amp;quot; name=&amp;quot;login&amp;quot; value=&amp;quot;Login&amp;quot;&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/form&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create a file login.php in the php folder and add the following bit of code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
    require_once &amp;quot;../functions.php&amp;quot;;
    db_connect();
    $sql = &amp;quot;SELECT id, username, password FROM users WHERE username = ?&amp;quot;;
    $statement = $conn-&amp;gt;prepare($sql);
    $statement-&amp;gt;bind_param(&#39;s&#39;, $_POST[&#39;username&#39;]);
    $statement-&amp;gt;execute();
    $statement-&amp;gt;store_result();
    $statement-&amp;gt;bind_result($id, $username, $password);
    $statement-&amp;gt;fetch();
    if ($statement-&amp;gt;execute()) {
        if(password_verify($_POST[&#39;password&#39;], $password)) {
        $_SESSION[&#39;user_id&#39;] = $id;
        $_SESSION[&#39;user_username&#39;] = $username;
        redirect_to(&amp;quot;/home.php&amp;quot;);
        } else {
        redirect_to(&amp;quot;/index.php?login_error=true&amp;quot;);
        }
    } else {
        echo &amp;quot;Error: &amp;quot; . $conn-&amp;gt;error;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As with the the code for registration, login.php is easy to digest. We establish a connection with our dear DB, then write a query to fetch a user with the supplied username. Next, we get the hashed password of the fetched user record and compare it to the password provided by the user to see if they match. PHP provides another slick function to do this called, as you could guess, &lt;code&gt;password_verify()&lt;/code&gt;. Once our user has been verified to have provided the correct details, we create 2 sessions. One to store the user&amp;rsquo;s id and the other the user&amp;rsquo;s username. Then we redirect them to home.php.&lt;/p&gt;
&lt;p&gt;With the sessions in place, we can check any request coming to our server to know if it&amp;rsquo;s from an authenticated user or not, and who the user is if they&amp;rsquo;re authenticated. This is vital for our app cos we don&amp;rsquo;t want unregistered persons to access pages like home.php as well as to take actions like creating a post or making a friend request. Also, we want to be able to know [the user] who takes a given action. These sessions help us achieve just that.&lt;/p&gt;
&lt;p&gt;But how?&lt;/p&gt;
&lt;p&gt;For starters, let&amp;rsquo;s a write function that allows only authenticated users to access the home page. The unauthenticated are redirected to index.php.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function is_auth() {
    return isset($_SESSION[&#39;user_id&#39;]);
}

function check_auth() {
    if(!is_auth()) {
        redirect_to(&amp;quot;/index.php?logged_in=false&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are two functions defined above. The first &lt;code&gt;is_auth()&lt;/code&gt; is a helper function for &lt;code&gt;check_auth()&lt;/code&gt;. It checks if a user has been authenticated using the &lt;code&gt;user_id&lt;/code&gt; session. &lt;code&gt;check_auth()&lt;/code&gt; is the main function here. It uses &lt;code&gt;is_auth()&lt;/code&gt; to check if a request is not authenticated and then redirects to index.php.&lt;/p&gt;
&lt;p&gt;Now you can place &lt;code&gt;check_auth()&lt;/code&gt; atop all the pages you want restricted.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; You need to place the function &lt;code&gt;session_start()&lt;/code&gt; at the beginning of every page where sessions would be used, for them to work. functions.php is a nice place to put this function cos it&amp;rsquo;s required at the start of all our pages.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
    session_start();
    function db_connect() {
        ...
    }
    ...
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;logout&#34;&gt;Logout&lt;/h1&gt;
&lt;p&gt;Logout is freakishly easy. All we have to do is destroy the session, and PHP provides us a function to do just that.&lt;/p&gt;
&lt;p&gt;Create a new file in the php folder called logout.php with the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
    require_once &amp;quot;../functions.php&amp;quot;;
    // destroy all sessions
    session_destroy();
    redirect_to(&amp;quot;/index.php&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;rsquo;s all! Hopefully, there&amp;rsquo;s nothing to explain here. Right?&lt;/p&gt;
&lt;p&gt;Great!&lt;/p&gt;
&lt;p&gt;Just create a logout link like so: &lt;code&gt;&amp;lt;a href=&amp;quot;php/logout.php&amp;quot;&amp;gt;Logout&amp;lt;/a&amp;gt;&lt;/code&gt; and you&amp;rsquo;re good.&lt;/p&gt;
&lt;p&gt;At this point, we can call it a day. Phew!!!&lt;/p&gt;
&lt;p&gt;Well done!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The final code for this part is contained in my FaceClone repo here: &lt;a href=&#34;https://github.com/nicholaskajoh/faceclone&#34;&gt;https://github.com/nicholaskajoh/faceclone&lt;/a&gt;. Visit the link and click on the part-4 folder to see progress made so far.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Next: &lt;a href=&#34;https://alphacoder.xyz/facebook-clone-5&#34;&gt;Build a Facebook clone from scratch with PHP — Part 5&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Previous: &lt;a href=&#34;https://alphacoder.xyz/facebook-clone-3&#34;&gt;Build a Facebook clone from scratch with PHP — Part 3&lt;/a&gt;.&lt;/p&gt;
- https://alphacoder.xyz/facebook-clone-4/ - Copyright 2020 to ∞. Try Catch Finally Solutions Ltd. All rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>Build a Facebook clone from scratch with PHP — Part 3</title>
        <link>https://alphacoder.xyz/facebook-clone-3/</link>
        <pubDate>Mon, 17 Jul 2017 08:35:09 +0100</pubDate>
        
        <guid>https://alphacoder.xyz/facebook-clone-3/</guid>
        <description>Alpha Coder https://alphacoder.xyz/facebook-clone-3/ -&lt;h1 id=&#34;all-parts&#34;&gt;All parts&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-1&#34;&gt;Build a Facebook clone from scratch with PHP — Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-2&#34;&gt;Build a Facebook clone from scratch with PHP — Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Build a Facebook clone from scratch with PHP — Part 3 (this article)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-4&#34;&gt;Build a Facebook clone from scratch with PHP — Part 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-5&#34;&gt;Build a Facebook clone from scratch with PHP — Part 5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-6&#34;&gt;Build a Facebook clone from scratch with PHP — Part 6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-7&#34;&gt;Build a Facebook clone from scratch with PHP — Part 7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Posts are the heart and soul of Facebook. In this part, we&amp;rsquo;ll be writing code that would allow us view, make and delete posts on FaceClone.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc3/faceclone-home.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;functionsphp&#34;&gt;Functions.php&lt;/h1&gt;
&lt;p&gt;In the spirit of code reusability A.K.A writing DRY (&lt;a href=&#34;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34;&gt;Don&amp;rsquo;t Repeat Yourself&lt;/a&gt;) code, let&amp;rsquo;s create a functions.php file in the root of our project. We&amp;rsquo;ll use this file to write different bits of code — functions — which can be used across our app. Now include functions.php at the top of all app pages like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php require_once &amp;quot;functions.php&amp;quot;; ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;connect-todb&#34;&gt;Connect to DB&lt;/h1&gt;
&lt;p&gt;To interact with a database e.g perform CRUD (Create, Read, Update, Delete) operations, we must connect to it. Connecting to MySQL with PHP is pretty easy. Create a function in functions.php called db_connect and add the following code like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
    function db_connect() {
        global $conn; // db connection variable
        $db_server = &amp;quot;localhost&amp;quot;;
        $username = &amp;quot;root&amp;quot;;
        $password = &amp;quot;&amp;quot;;
        $db_name = &amp;quot;faceclone&amp;quot;;
        // create a connection
        $conn = new mysqli($db_server, $username, $password, $db_name);
        // check connection for errors
        if ($conn-&amp;gt;connect_error) {
            die(&amp;quot;Error: &amp;quot; . $conn-&amp;gt;connect_error);
        }
        // uncomment the line below to confirm a connection is established
        // echo &#39;&amp;lt;h1 style=&amp;quot;color: green;&amp;quot;&amp;gt;Connected to DB!&amp;lt;/h1&amp;gt;&#39;;
        // your can clear these comments afterwards
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can call this function in any page like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php require_once &amp;quot;functions.php&amp;quot;; ?&amp;gt;
&amp;lt;?php include &amp;quot;header.php&amp;quot;; ?&amp;gt;
&amp;lt;?php 
    db_connect();
?&amp;gt;
&amp;lt;!-- main --&amp;gt;
&amp;lt;main class=&amp;quot;container&amp;quot;&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc3/db-connect.jpg&#34; alt=&#34;&#34;&gt;
&lt;em&gt;Connect FaceClone to the DB&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The above code is quite self-explanatory. We specify our database server name, username, password and the particular database we want to access. Then, we use the MySQLi extension to establish a connection to the database. There are other extensions and therefore ways to connect to a database. Also, we can choose to &lt;a href=&#34;https://www.w3schools.com/php/php_mysql_connect.asp&#34;&gt;write the code procedurally or using object-oriented programming&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ensure your MySQL server is running. You can start the server from XAMPP&amp;rsquo;s control panel.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc3/xampp-control-panel.jpg&#34; alt=&#34;&#34;&gt;
&lt;em&gt;XAMPP control panel&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now that we have a connection, let&amp;rsquo;s write code to get posts from the database. Wait! There&amp;rsquo;s no data in there, is there? Let&amp;rsquo;s quickly generate some data. Head over to PHP My Admin and have some fun.&lt;/p&gt;
&lt;p&gt;Go to faceclone &amp;gt; posts &amp;gt; insert&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc3/create-dummy-data.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;Add dummy data to your DB&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; I set user_id to 0 cos we don&amp;rsquo;t have any users yet.&lt;/p&gt;
&lt;h1 id=&#34;view-posts&#34;&gt;View posts&lt;/h1&gt;
&lt;p&gt;Now, let&amp;rsquo;s get the posts from the DB to our home page. There&amp;rsquo;s already template code for posts with some static data. Using the template, we&amp;rsquo;ll have something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- post --&amp;gt;
&amp;lt;?php 
    $sql = &amp;quot;SELECT * FROM posts&amp;quot;;
    $result = $conn-&amp;gt;query($sql);
    if ($result-&amp;gt;num_rows &amp;gt; 0) {
        while($post = $result-&amp;gt;fetch_assoc()) {
?&amp;gt;
            &amp;lt;div class=&amp;quot;panel panel-default&amp;quot;&amp;gt;
            &amp;lt;div class=&amp;quot;panel-body&amp;quot;&amp;gt;
                &amp;lt;p&amp;gt;&amp;lt;?php echo $post[&#39;content&#39;]; ?&amp;gt;&amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class=&amp;quot;panel-footer&amp;quot;&amp;gt;
                &amp;lt;span&amp;gt;posted &amp;lt;?php echo $post[&#39;created_at&#39;]; ?&amp;gt; by nicholaskajoh&amp;lt;/span&amp;gt; 
                &amp;lt;span class=&amp;quot;pull-right&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;text-danger&amp;quot; href=&amp;quot;php/delete-post.php?id=&amp;lt;?php echo $post[&#39;id&#39;]; ?&amp;gt;&amp;quot;&amp;gt;[delete]&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
&amp;lt;?php
        }
    } else {
?&amp;gt;
        &amp;lt;p class=&amp;quot;text-center&amp;quot;&amp;gt;No posts yet!&amp;lt;/p&amp;gt;
&amp;lt;?php
    }
    $conn-&amp;gt;close();
?&amp;gt;
&amp;lt;!-- ./post --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nothing much here. First, we write an SQL query and execute it, then we get the results and display each post using a while loop. The query SELECT * FROM posts simply says &amp;ldquo;get all the records from the posts table&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; The words (in the code) with &lt;code&gt;$&lt;/code&gt; before them are variable names (e.g &lt;code&gt;$result&lt;/code&gt;). We use the dollar sign to denote variable names in PHP.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re not done yet though. Wouldn&amp;rsquo;t it be better to display the more recent posts first? We can do that by adjusting our query a little bit.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT * FROM posts ORDER BY created_at DESC
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bingo!&lt;/p&gt;
&lt;h1 id=&#34;make-posts&#34;&gt;Make posts&lt;/h1&gt;
&lt;p&gt;We don&amp;rsquo;t expect users to use PHP MyAdmin to make posts on FaceClone, do we? It only seems logical that we allow users create posts in our app. Thanks to the template, we have a nifty little textbox on the home page.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This point in our journey looks like a good time to separate concerns. We could write the code that&amp;rsquo;ll create a new post in home.php, but this can lead to messy code as there may be too many moving parts, so to speak, in one file. Let&amp;rsquo;s avoid this by creating a new folder called php in the root of our project to store php files which aren&amp;rsquo;t pages. functions.php fits the description of a file that should be in the php folder. Let&amp;rsquo;s leave it where it is, though. I like to keep it in the root folder as it serves kind of like a general purpose.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Create a new file in the php folder called create-post.php and add the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
    require_once &amp;quot;../functions.php&amp;quot;;
    db_connect();
    $sql = &amp;quot;INSERT INTO posts (content, user_id) VALUES (?, 0)&amp;quot;;
    $statement = $conn-&amp;gt;prepare($sql);
    $statement-&amp;gt;bind_param(&#39;s&#39;, $_POST[&#39;content&#39;]);
    if ($statement-&amp;gt;execute()) {
        redirect_to(&amp;quot;/home.php&amp;quot;);
    } else {
        echo &amp;quot;Error: &amp;quot; . $conn-&amp;gt;error;
    }
    $conn-&amp;gt;close();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now edit the form in home.php by adding php/create-post.php as the value for the action attribute.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- post form --&amp;gt;
&amp;lt;form method=&amp;quot;post&amp;quot; action=&amp;quot;php/create-post.php&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;input-group&amp;quot;&amp;gt;
    &amp;lt;input class=&amp;quot;form-control&amp;quot; type=&amp;quot;text&amp;quot; name=&amp;quot;content&amp;quot; placeholder=&amp;quot;Make a post…&amp;quot;&amp;gt;
    &amp;lt;span class=&amp;quot;input-group-btn&amp;quot;&amp;gt;
    &amp;lt;button class=&amp;quot;btn btn-success&amp;quot; type=&amp;quot;submit&amp;quot; name=&amp;quot;post&amp;quot;&amp;gt;Post&amp;lt;/button&amp;gt;
    &amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/form&amp;gt;&amp;lt;hr&amp;gt;
&amp;lt;!-- ./post form --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code to create a post is straightforward. We write a query and execute it. If it&amp;rsquo;s executed (meaning everything went well), we redirect to the home page where we can see the newly created post. Else, we throw an error.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$_POST&lt;/code&gt; is a superglobal. superglobals are variables that are always accessible regardless of scope i.e you can access them from any function, class or file without having to do anything. $_POST is an array that contains data sent in POST requests. When a user submits the form to create a post, we can access the content in &lt;code&gt;$_POST&lt;/code&gt; variable using &lt;code&gt;$_POST[&#39;content&#39;]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; Ensure the default value for the created_at column of the posts table is set to &lt;code&gt;CURRENT_TIMESTAMP&lt;/code&gt;.
The redirect_to method is a custom method. Add the definition to functions.php.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function redirect_to($url) {
    header(&amp;quot;Location: &amp;quot; . $url);
    exit();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;delete-posts&#34;&gt;Delete posts&lt;/h1&gt;
&lt;p&gt;Create a new file in the php folder. Call it delete-post.php. Similar to create-post.php, we have:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
    require_once &amp;quot;../functions.php&amp;quot;;
    db_connect();
    $sql = &amp;quot;DELETE FROM posts WHERE id = ?&amp;quot;;
    $statement = $conn-&amp;gt;prepare($sql);
    $statement-&amp;gt;bind_param(&#39;i&#39;, $_GET[&#39;id&#39;]);
    if ($statement-&amp;gt;execute()) {
        redirect_to(&amp;quot;/home.php&amp;quot;);
    } else {
        echo &amp;quot;Error: &amp;quot; . $conn-&amp;gt;error;
    }
    $conn-&amp;gt;close();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when we click the delete link for a post, it&amp;rsquo;s gone for good! 😊&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$_GET&lt;/code&gt; is another superglobal. As you might imagine, it contains data sent from GET requests.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s it for part 3!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The final code for this part is contained in my FaceClone repo here: &lt;a href=&#34;https://github.com/nicholaskajoh/faceclone&#34;&gt;https://github.com/nicholaskajoh/faceclone&lt;/a&gt;. Visit the link and click on the part-3 folder to see progress made so far.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Next: &lt;a href=&#34;https://alphacoder.xyz/facebook-clone-4&#34;&gt;Build a Facebook clone from scratch with PHP — Part 4&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Previous: &lt;a href=&#34;https://alphacoder.xyz/facebook-clone-2&#34;&gt;Build a Facebook clone from scratch with PHP — Part 2&lt;/a&gt;.&lt;/p&gt;
- https://alphacoder.xyz/facebook-clone-3/ - Copyright 2020 to ∞. Try Catch Finally Solutions Ltd. All rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>Build a Facebook clone from scratch with PHP — Part 2</title>
        <link>https://alphacoder.xyz/facebook-clone-2/</link>
        <pubDate>Sat, 17 Jun 2017 05:53:39 +0100</pubDate>
        
        <guid>https://alphacoder.xyz/facebook-clone-2/</guid>
        <description>Alpha Coder https://alphacoder.xyz/facebook-clone-2/ -&lt;h1 id=&#34;all-parts&#34;&gt;All parts&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-1&#34;&gt;Build a Facebook clone from scratch with PHP — Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Build a Facebook clone from scratch with PHP — Part 2 (this article)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-3&#34;&gt;Build a Facebook clone from scratch with PHP — Part 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-4&#34;&gt;Build a Facebook clone from scratch with PHP — Part 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-5&#34;&gt;Build a Facebook clone from scratch with PHP — Part 5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-6&#34;&gt;Build a Facebook clone from scratch with PHP — Part 6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-7&#34;&gt;Build a Facebook clone from scratch with PHP — Part 7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;a-little-about-php-andmysql&#34;&gt;A little about PHP and MySQL&lt;/h1&gt;
&lt;p&gt;So in part 1, we didn&amp;rsquo;t get to talk about PHP as we should have because we were all about the FaceClone template. We also didn&amp;rsquo;t get to talk about MySQL, the database we&amp;rsquo;ll be using. Let&amp;rsquo;s quickly get to know a little about PHP and MySQL.&lt;/p&gt;
&lt;h1 id=&#34;php&#34;&gt;PHP&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;PHP (recursive acronym for PHP: Hypertext Preprocessor) is a widely-used open source general-purpose scripting language that is especially suited for web development and can be embedded into HTML. - http://php.net/manual/en/intro-whatis.php&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;PHP is the most popular server-side programming language for the web and runs millions of websites. To write PHP, all we need to do is create a file with a &lt;em&gt;.php&lt;/em&gt; file extension and add the php tags &lt;code&gt;&amp;lt;?php&lt;/code&gt; and &lt;code&gt;?&amp;gt;&lt;/code&gt;. &lt;code&gt;&amp;lt;?php&lt;/code&gt; is the opening tag and &lt;code&gt;?&amp;gt;&lt;/code&gt; the closing tag. We can write a Hello World PHP program like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above example, the PHP code is embedded in HTML. When PHP parses a file, it looks for opening and closing tags, &lt;code&gt;&amp;lt;?php&lt;/code&gt; and &lt;code&gt;?&amp;gt;&lt;/code&gt; which tell it to start and stop interpreting the code between them. We could decide to write PHP-only code too:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We may choose to omit the closing tag &lt;code&gt;?&amp;gt;&lt;/code&gt; in this case to have:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;echo&lt;/code&gt; prints out Hello World as HTML text when the php file is served. We&amp;rsquo;ll be learning PHP as we go about building FaceClone. Don&amp;rsquo;t worry, PHP is pretty easy! 👍&lt;/p&gt;
&lt;h1 id=&#34;mysql&#34;&gt;MySQL&lt;/h1&gt;
&lt;p&gt;MySQL is the fastest growing open-source relational database management system. It is a popular database of choice for use in web apps and is currently used by many large websites like Facebook and Twitter. It makes use of SQL, a language for managing data in relational databases. SQL is an abbreviation which stands for Structured Query Language. We&amp;rsquo;ll be writing SQL queries along side PHP. SQL databases contain tables. Think of a table as an Excel spreadsheet. For our app, we&amp;rsquo;ll create tables like &lt;em&gt;users&lt;/em&gt; (to store information about our users) and &lt;em&gt;posts&lt;/em&gt; (to store our users&amp;rsquo; posts). Tables have columns. For a users table, we could have columns like &lt;em&gt;name&lt;/em&gt;, &lt;em&gt;password&lt;/em&gt;, &lt;em&gt;email&lt;/em&gt; etc. Then each row of the users table could contain details about a user under each column heading. Say we want to get all the posts made by FaceClone users, we could write a query like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; posts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;SELECT&lt;/code&gt; lets us read data from the database. &lt;code&gt;*&lt;/code&gt; gets all the columns in the table posts. We could use &lt;code&gt;SELECT name, email FROM posts&lt;/code&gt; if we don&amp;rsquo;t want all the columns from the posts table. We&amp;rsquo;ll be dealing with more SQL queries as we build FaceClone. SQL is easy as well, plus there are a ton of query snippets online for most queries you&amp;rsquo;ll want to write. Sweet!!!&lt;/p&gt;
&lt;h1 id=&#34;back-to-business&#34;&gt;Back to business&amp;hellip;&lt;/h1&gt;
&lt;p&gt;When we changed our template files from .html to .php, we broke our navigation links. Let&amp;rsquo;s go ahead and fix that. We just need to change the href attributes of those links to .php. Or not. We have 3 templates and need to make each change 3 times. That&amp;rsquo;s not much of a problem since there are only 3 templates. What if there were 10, 15, 20? It doesn&amp;rsquo;t make sense to make the same change x times. The navigation bar is a component we use in all of our templates. Why don&amp;rsquo;t we make it reusable?&lt;/p&gt;
&lt;h1 id=&#34;partials&#34;&gt;Partials&lt;/h1&gt;
&lt;p&gt;We can achieve reusability by creating partials. Partials are files that contain different components of our app. So we can have a header partial and a footer partial. If we need a header in home.php, all we need to do is simply &amp;ldquo;include&amp;rdquo; it. Let&amp;rsquo;s go ahead and do that. Create a header.php and footer.php file in the same folder as your other templates. It may be more efficient to create a folder for partials but we&amp;rsquo;ll just have the templates and partials together for now. In your header.php, add the following code (the snippet below can be gotten from home.php or profile.php):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;FaceClone&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text/css&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;css/bootstrap.min.css&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text/css&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;css/style.css&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- nav --&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;nav&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;navbar navbar-default&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;container-fluid&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;navbar-header&amp;#34;&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;navbar-brand&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;index.html&amp;#34;&lt;/span&gt;&amp;gt;FaceClone&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;ul&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nav navbar-nav navbar-right&amp;#34;&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;home.html&amp;#34;&lt;/span&gt;&amp;gt;Home&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;profile.html&amp;#34;&lt;/span&gt;&amp;gt;Profile&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#&amp;#34;&lt;/span&gt;&amp;gt;Logout&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;ul&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;nav&lt;/span&gt;&amp;gt;
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- ./nav --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then in footer.php add:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- footer --&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;footer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;container text-center&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;ul&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nav nav-pills pull-right&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;FaceClone - Made by [your name here]&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;ul&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;footer&lt;/span&gt;&amp;gt;
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- ./footer --&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text/javascript&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;js/bootstrap.min.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text/javascript&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;js/script.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now instead of making a change in 3 places, we can make just one change in header.php. Change the nav link hrefs to .php so &lt;code&gt;href=&amp;quot;home.html&amp;quot;&lt;/code&gt; becomes &lt;code&gt;href=&amp;quot;home.php&amp;quot;&lt;/code&gt; for example.
We&amp;rsquo;ve just created 2 partials. We need to include them in all our template files. To do so, clear the header and footer code (which we&amp;rsquo;ve already moved to header.php and footer.php respectively) in our template files and add &lt;code&gt;&amp;lt;?php include &amp;quot;header.php&amp;quot;; ?&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;?php include &amp;quot;header.php&amp;quot;; ?&amp;gt;&lt;/code&gt; like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;header.php&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;! - main --&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;container&amp;#34;&lt;/span&gt;&amp;gt;
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- page content here --&amp;gt;&lt;/span&gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;main&lt;/span&gt;&amp;gt;
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- ./main --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;footer.php&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run PHP&amp;rsquo;s development server to to confirm everything works fine.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; Open up a terminal and change directory to the project&amp;rsquo;s folder then run &lt;code&gt;php -S localhost:8080&lt;/code&gt; to start the server (refer to part 1 if you don&amp;rsquo;t remember how to run the app).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc2/faceclone-home.php.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;lets-write-a-dbschema&#34;&gt;Let&amp;rsquo;s write a DB schema&lt;/h1&gt;
&lt;p&gt;We need to &amp;ldquo;architect&amp;rdquo; a schema for our database. There&amp;rsquo;s quite some data that needs to be stored. When a user makes a post, we need to store it so they (and other users) can view it [later]. We even need to store information about users like their usernames and passwords. There needs to be some structure. We must know before hand what data we want to store and how we want to store it. A schema is simply a representation of a database structure. Smooth and easy!&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the schema I made for FaceClone:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc2/faceclone-schema.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;This schema is very basic. I should have specified the data types for each column. But don&amp;rsquo;t worry, we&amp;rsquo;ll choose data types when we transform this schema into a real database. The column names suggest the data that would be stored under them. The id columns allow us uniquely identify records in the database. If we want to get a post from the database, we need a unique feature that identifies it - the id. For the users table, we could use the username column to identify users because each user&amp;rsquo;s username must be unique but we&amp;rsquo;ll be using ids nonetheless.&lt;/p&gt;
&lt;p&gt;The user_id and friend_id columns are foreign key columns. user_id represents a user in the users table. Every post, for example must belong to a user. Instead of adding fields like username, password, location etc to the posts table to represent the user who made a given post, we can simply add a reference (user_id) which represents a user&amp;rsquo;s id in users table. This is some form of normalization and in helps us avoid redundancy/duplicate data.&lt;/p&gt;
&lt;h1 id=&#34;create-thedatabase&#34;&gt;Create the Database&lt;/h1&gt;
&lt;p&gt;With a schema in sight, we should get started creating the database for FaceClone. Power up XAMMP to begin. When XAMPP is executed, a view like the one below greets you:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc2/xampp-control-panel.jpg&#34; alt=&#34;&#34;&gt;
&lt;em&gt;XAMPP&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Start Apache and MySQL. We&amp;rsquo;re going to use a web app called PHP My Admin to create our database. We&amp;rsquo;ll serve PHP My Admin with Apache (a web server). We also need MySQL server running too.
Once Apache and MySQL start running, go to your browser and visit http://localhost/phpmyadmin. You should be greeted by a page that looks like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc2/phpmyadmin.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;PHP My Admin&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Click on the databases tab to create a new database. Let&amp;rsquo;s call our database faceclone. Once our database is created, we are taken to a screen where we can create tables. Type in the name of the table and the number of columns and click &amp;ldquo;Go&amp;rdquo;. Our posts table for instance would have 4 columns: id, content, user_id and created_at. Go ahead and create all the database tables like so:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc2/create-posts.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;Create posts table&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; For &lt;em&gt;id&lt;/em&gt; columns, remember to make the index PRIMARY and tick the AI (auto increment) checkbox.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc2/create-users.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;Create users table&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc2/create-friends.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;Create friends table&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc2/create-friend-requests.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;Create friend_requests table&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Done with that? Cool. Our database is up and ready!&lt;/p&gt;
&lt;p&gt;That wraps it up for part 2!!!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The final code for this part is contained in my FaceClone repo here: &lt;a href=&#34;https://github.com/nicholaskajoh/faceclone&#34;&gt;https://github.com/nicholaskajoh/faceclone&lt;/a&gt;. Visit the link and click on the part-2 folder to see progress made so far.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Next: &lt;a href=&#34;https://alphacoder.xyz/facebook-clone-3&#34;&gt;Build a Facebook clone from scratch with PHP — Part 3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Previous: &lt;a href=&#34;https://alphacoder.xyz/facebook-clone-1&#34;&gt;Build a Facebook clone from scratch with PHP — Part 1&lt;/a&gt;.&lt;/p&gt;
- https://alphacoder.xyz/facebook-clone-2/ - Copyright 2020 to ∞. Try Catch Finally Solutions Ltd. All rights reserved.</description>
        </item>
    
    
  </channel>
</rss> 