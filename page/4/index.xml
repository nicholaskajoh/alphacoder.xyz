<?xml-stylesheet href="/rss.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>I code, therefore I am on Alpha Coder</title>
    <link>https://alphacoder.xyz/</link>
    <description>Recent content in I code, therefore I am on Alpha Coder</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright 2017 to ∞. Nicholas Kajoh. All rights reserved.</copyright>
    <lastBuildDate>Sun, 09 Oct 2022 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://alphacoder.xyz/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>Image upload with Django and Cloudinary</title>
        <link>https://alphacoder.xyz/image-upload-with-django-and-cloudinary/</link>
        <pubDate>Sun, 18 Feb 2018 08:50:00 +0000</pubDate>
        
        <guid>https://alphacoder.xyz/image-upload-with-django-and-cloudinary/</guid>
        <description>Alpha Coder https://alphacoder.xyz/image-upload-with-django-and-cloudinary/ -&lt;p&gt;Managing files/images can be a hassle. It can be a real pain to have to deal with uploads, storage, manipulation, administration and delivery of media content in every project you start/or are involved in.&lt;/p&gt;
&lt;p&gt;Luckily, there are cloud platforms that take away the stress of all that, allowing you to ship faster and deliver your product(s) at scale. Cloudinary is one of such platforms. It tags itself as &lt;em&gt;the media management platform for web and mobile developers — an end-to-end solution for all your image and video needs&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Aside Cloudinary’s easy to use API, I was attracted by their very generous free plan. See for yourself at &lt;a href=&#34;https://cloudinary.com/pricing&#34;&gt;https://cloudinary.com/pricing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Learn more about Cloudinary: &lt;a href=&#34;https://cloudinary.com/solutions&#34;&gt;https://cloudinary.com/solutions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is a quick tutorial on how setup image upload with Django and Cloudinary. Let’s roll…&lt;/p&gt;
&lt;h2 id=&#34;console&#34;&gt;Console&lt;/h2&gt;
&lt;p&gt;Visit &lt;a href=&#34;https://cloudinary.com&#34;&gt;Cloudinary.com&lt;/a&gt; and create an account or login if you already have one. You’ll be provided a nice dashboard/console at &lt;a href=&#34;https://cloudinary.com/console&#34;&gt;https://cloudinary.com/console&lt;/a&gt;. There you’ll find your account details i.e cloud name, API key and secret.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/1000/1*ZxPbpbatoeCyZzldXXoX2Q.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;install&#34;&gt;Install&lt;/h2&gt;
&lt;p&gt;Cloudinary has an open source &lt;a href=&#34;https://pypi.python.org/pypi/cloudinary&#34;&gt;integration library for Python/Django&lt;/a&gt;. Install it using pip.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ pip install cloudinary
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;settings&#34;&gt;Settings&lt;/h2&gt;
&lt;p&gt;Go to your project’s &lt;em&gt;settings.py&lt;/em&gt; and make the following additions.&lt;/p&gt;
&lt;p&gt;First import cloudinary.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; cloudinary
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then add cloudinary to installed apps.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;INSTALLED_APPS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cloudinary&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# other apps&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now add the configs from your console.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cloudinary&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;config(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cloud_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CLOUDINARY_CLOUD_NAME,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    api_key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CLOUDINARY_API_KEY,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    api_secret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CLOUDINARY_API_SECRET
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Replace &lt;code&gt;CLOUDINARY_CLOUD_NAME&lt;/code&gt;, &lt;code&gt;CLOUDINARY_API_KEY&lt;/code&gt; and &lt;code&gt;CLOUDINARY_API_SECRET&lt;/code&gt; as appropriate (they should be in quotes e.g &lt;code&gt;cloud_name = &amp;quot;tchalla&amp;quot;&lt;/code&gt;).&lt;/p&gt;
&lt;h2 id=&#34;models&#34;&gt;Models&lt;/h2&gt;
&lt;p&gt;At any point and in any file in your Django project, you can easily make use of all the functions and classes the Cloudinary Python library provides. For instance, you can upload a file like so.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; cloudinary.uploader
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cloudinary&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;uploader&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;upload(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;my_picture.jpg&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;See &lt;a href=&#34;https://cloudinary.com/documentation/django_image_upload&#34;&gt;https://cloudinary.com/documentation/django_image_upload&lt;/a&gt; for more info on uploads.&lt;/p&gt;
&lt;p&gt;However, you want to handle things the Django way as this would allow you utilize the rich APIs that Django ships with. By “the Django way”, I mean using models (in this case).&lt;/p&gt;
&lt;p&gt;In Django, you can use ImageField or FileField in your model. Cloudinary provides CloudinaryField. Let’s create a Photo model using CloudinaryField in &lt;em&gt;models.py&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.db &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; models
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; cloudinary.models &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; CloudinaryField
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Photo&lt;/span&gt;(models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Model):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    image &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CloudinaryField(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;image&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    caption &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;CharField(max_length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, blank&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __str__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;caption &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;caption &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No caption&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Additionally, if you want to delete an image from Cloudinary when it’s model instance is deleted in your app (Django/Cloudinary doesn’t do this by default), you can add the following pre-delete signal after your model definition.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@receiver&lt;/span&gt;(pre_delete, sender&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Photo)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;photo_delete&lt;/span&gt;(sender, instance, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cloudinary&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;uploader&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;destroy(instance&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;image&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;public_id)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then add the following imports at the top of the file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.db.models.signals &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pre_delete
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; cloudinary
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;forms&#34;&gt;Forms&lt;/h2&gt;
&lt;p&gt;Using ModelForm to create a form from the Photo model, we have:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.forms &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; ModelForm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; .models &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Photo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PhotoForm&lt;/span&gt;(ModelForm):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Meta&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Photo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        fields &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;image&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;caption&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;views&#34;&gt;Views&lt;/h2&gt;
&lt;p&gt;For the view of PhotoForm form, we could have:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.shortcuts &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; render, redirect
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; .forms &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; PhotoForm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; .models &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Photo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_photo&lt;/span&gt;(request):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;method &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        form &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PhotoForm(request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;POST, request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FILES)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; form&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;is_valid():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            photo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Photo()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            photo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;caption &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;POST&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;caption&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            photo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;save()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; redirect(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/photo/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; photo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;id)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        form &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PhotoForm()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; render(request, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;add-photo.html&amp;#39;&lt;/span&gt;, {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;form&amp;#39;&lt;/span&gt;: form})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;template&#34;&gt;Template&lt;/h2&gt;
&lt;p&gt;In the upload form template, you can simple do &lt;code&gt;{{ form }}&lt;/code&gt; or manually design the HTML form to your taste.&lt;/p&gt;
&lt;h2 id=&#34;display&#34;&gt;Display&lt;/h2&gt;
&lt;p&gt;Displaying images from Cloudinary in your app is super simple and straight forward. If we fetch a Photo model instance in a view using &lt;code&gt;photo = Photo.objects.get(id=1)&lt;/code&gt;, we can retrieve the image with &lt;code&gt;photo.image&lt;/code&gt; which returns a CloudinaryResource object. This object has properties such as public_id, url, size (bytes), format etc.&lt;/p&gt;
&lt;p&gt;One way to display the image in a template after passing the photo object from the view is to use the url property.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ photo.image.url }}&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is great and all but it won’t afford us the opportunity to use the many image transformation options Cloudinary provides. Fortunately, the Cloudinary library provides a template tag we can load up and use.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{% load cloudinary %}{% cloudinary photo.image.public_id className=&amp;#34;my-class&amp;#34; height=200 width=100 %}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This template tag allows you to not only specify any Cloudinary transformation parameter, but also to specify regular HTML image tag attributes (like &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;alt&lt;/code&gt;). For instance, we specified the class (className) &lt;code&gt;my-class&lt;/code&gt; in the snippet above. This actually generates an image tag. E.g&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;my-class&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://res.cloudinary.com/demo/image/upload/h_200,w_100/sample.jpg&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;200&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;100&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Read about all the transformation parameters available here: &lt;a href=&#34;https://cloudinary.com/documentation/image_transformations&#34;&gt;https://cloudinary.com/documentation/image_transformations&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That’s it!&lt;/p&gt;
- https://alphacoder.xyz/image-upload-with-django-and-cloudinary/ - Copyright 2017 to ∞. Nicholas Kajoh. All rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>Deploy your React-Django app on Heroku</title>
        <link>https://alphacoder.xyz/deploy-react-django-app-on-heroku/</link>
        <pubDate>Tue, 30 Jan 2018 11:52:00 +0000</pubDate>
        
        <guid>https://alphacoder.xyz/deploy-react-django-app-on-heroku/</guid>
        <description>Alpha Coder https://alphacoder.xyz/deploy-react-django-app-on-heroku/ -&lt;p&gt;This is a follow up to my post on &lt;em&gt;&lt;a href=&#34;https://alphacoder.xyz/dead-simple-react-django-setup/&#34;&gt;setting up a React-Django web app&lt;/a&gt;&lt;/em&gt;. You can take a quick glance if you’ve not seen it yet.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR: The setup is deployed at&lt;/strong&gt; &lt;a href=&#34;http://react-django.herokuapp.com/&#34;&gt;&lt;strong&gt;http://react-django.herokuapp.com&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;(nothing much there actually) and the code at&lt;/strong&gt; &lt;a href=&#34;https://github.com/nicholaskajoh/React-Django&#34;&gt;&lt;strong&gt;https://github.com/nicholaskajoh/React-Django&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;We’re going to be deploying the app we setup in the previous post on Heroku. Heroku is a popular cloud hosting platform (PaaS) and offers a generous free tier which we’ll be using.&lt;/p&gt;
&lt;h2 id=&#34;heroku-dashboard&#34;&gt;Heroku dashboard&lt;/h2&gt;
&lt;p&gt;First things first. You need a Heroku account. Head over to &lt;a href=&#34;https://heroku.com&#34;&gt;Heroku.com&lt;/a&gt; and sign up/login, then go to your dashboard at &lt;a href=&#34;https://dashboard.heroku.com&#34;&gt;https://dashboard.heroku.com&lt;/a&gt; and create a new app.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/dply-dj/heroku-dashboard.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;heroku-cli&#34;&gt;Heroku CLI&lt;/h2&gt;
&lt;p&gt;There are a couple deploy methods to choose from on Heroku (visit the &lt;em&gt;deploy&lt;/em&gt; tab on the app page on the dashboard). Here, we’ll use the &lt;em&gt;Heroku Git&lt;/em&gt; method via the &lt;em&gt;Heroku CLI&lt;/em&gt;. You can use &lt;a href=&#34;https://devcenter.heroku.com/articles/heroku-cli&#34;&gt;this guide to learn how to set up Heroku CLI on your OS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, let’s link our project to the Heroku app we created using the Heroku CLI and Git.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Initialize a Git repository in the root folder of the project with &lt;code&gt;git init&lt;/code&gt; (you need to have Git installed on your computer).&lt;/li&gt;
&lt;li&gt;Login with your Heroku account on the CLI using &lt;code&gt;heroku login&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add the Heroku remote via &lt;code&gt;heroku git:remote -a your-heroku-app&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/dply-dj/link-app-to-heroku.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;I already initialized Git in the project prior to this.&lt;/p&gt;
&lt;h2 id=&#34;heroku-buildpacks&#34;&gt;Heroku buildpacks&lt;/h2&gt;
&lt;p&gt;The React app build process depends on NPM, so we need Node.js. We also need Python to run Django.&lt;/p&gt;
&lt;p&gt;Heroku uses &lt;a href=&#34;https://devcenter.heroku.com/articles/buildpacks&#34;&gt;buildpacks&lt;/a&gt; to transform deployed code into slugs which can be executed by Dynos (server instances on Heroku). We’ll be needing two buildpacks. One for Node and another for Python.&lt;/p&gt;
&lt;p&gt;Our app would run on a Python server, even though we’ll use Node/NPM to build/bundle the React frontend. So the Python buildpack will be the main one in our config. The main buildpack determines the process type of the Heroku app. You can &lt;a href=&#34;https://devcenter.heroku.com/articles/using-multiple-buildpacks-for-an-app&#34;&gt;read about multiple buildpacks&lt;/a&gt; to understand how they work.&lt;/p&gt;
&lt;p&gt;You can add buildpacks via the Heroku CLI. Head back to your terminal and run the following to set/add the buildpacks we need.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;heroku buildpacks:set heroku/python
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now add the buildpack for Node.js.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;heroku buildpacks:add --index &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; heroku/nodejs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can see the buildpacks we’ve added by running &lt;code&gt;heroku buildpacks&lt;/code&gt;. The last buildpack on the list determines the process type of the app.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/dply-dj/buildpacks.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;packagejson&#34;&gt;package.json&lt;/h2&gt;
&lt;p&gt;We need to tell the Node.js buildpack to build the React app after it has installed Node and NPM. We can do this by adding the build command &lt;code&gt;npm run build&lt;/code&gt; in the &lt;em&gt;postinstall&lt;/em&gt; hook.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/dply-dj/package-json.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;See postinstall under scripts&lt;/p&gt;
&lt;p&gt;Notice that I specified Node and NPM versions in &lt;em&gt;engines&lt;/em&gt;. The buildpack will install these exact versions. It’s highly recommended you use the versions running on your PC to avoid errors from a version that might be incompatible with your code.&lt;/p&gt;
&lt;h2 id=&#34;procfile&#34;&gt;Procfile&lt;/h2&gt;
&lt;p&gt;Create a file called &lt;em&gt;&lt;a href=&#34;https://devcenter.heroku.com/articles/procfile&#34;&gt;Procfile&lt;/a&gt;&lt;/em&gt; (no file extension) in the project root and add the following code:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;release: python manage.py migrate
web: gunicorn reactdjango.wsgi --log-file -
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Replace &lt;code&gt;reactdjango.wsgi&lt;/code&gt; with &lt;code&gt;YOUR-DJANGO-APP-NAME.wsgi&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;requirementstxt&#34;&gt;requirements.txt&lt;/h2&gt;
&lt;p&gt;The Python buildpack, after installing Python looks for &lt;em&gt;requirements.txt&lt;/em&gt; to install the dependencies in it. Add the following to the requirements file, including all the other dependencies your Django app needs.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;django&amp;gt;=2.1.2
gunicorn==19.7.1
whitenoise==3.3.1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;PS: Whitenoise helps to serve static files and Gunicorn is the HTTP server we’ll be using.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;By the way, you can specify the Python version you want by adding it to a file named &lt;em&gt;runtime.txt&lt;/em&gt; in the project root.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;python-3.5.2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Configure whitenoise to serve static files by doing the following:&lt;/p&gt;
&lt;p&gt;Add &lt;em&gt;static root&lt;/em&gt; and &lt;em&gt;static files storage&lt;/em&gt; in &lt;em&gt;settings.py&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;BASE_DIR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dirname(os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dirname(os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;abspath(__file__)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;STATIC_ROOT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(BASE_DIR, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;staticfiles&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;STATICFILES_STORAGE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;whitenoise.django.GzipManifestStaticFilesStorage&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Add whitenoise to your &lt;em&gt;wsgi.py&lt;/em&gt; file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.core.wsgi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; get_wsgi_application
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; whitenoise.django &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; DjangoWhiteNoise
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;environ&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setdefault(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DJANGO_SETTINGS_MODULE&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reactdjango.settings&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;application &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_wsgi_application()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;application &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DjangoWhiteNoise(application)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;allowed-hosts&#34;&gt;Allowed hosts&lt;/h2&gt;
&lt;p&gt;In your &lt;em&gt;settings.py&lt;/em&gt;, you need to add your Heroku domain to allowed hosts.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ALLOWED_HOSTS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;react-django.herokuapp.com&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;127.0.0.1:8000&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;NB: I personally prefer to add allowed hosts using environment variables e.g with&lt;/strong&gt; &lt;a href=&#34;https://github.com/theskumar/python-dotenv&#34;&gt;&lt;strong&gt;python-dotenv&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;commit-push&#34;&gt;Commit, push&lt;/h2&gt;
&lt;p&gt;It’s time to commit and push the changes. Phew!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;blah blah blah&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push heroku master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After the build is done and your app has been released, visit &lt;em&gt;YOUR-APP-NAME.herokuapp.com&lt;/em&gt;. Neat!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Two libraries you might find really helpful when building your Django API are&lt;/em&gt; &lt;a href=&#34;http://www.django-rest-framework.org/&#34;&gt;&lt;em&gt;Django Rest Framework&lt;/em&gt;&lt;/a&gt; &lt;em&gt;and&lt;/em&gt; &lt;a href=&#34;https://github.com/ottoyiu/django-cors-headers/&#34;&gt;&lt;em&gt;Django CORS Headers&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. You should check them out!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you had any issues deploying please share in the comments. A lot of times, things don’t work the first time.&lt;/p&gt;
- https://alphacoder.xyz/deploy-react-django-app-on-heroku/ - Copyright 2017 to ∞. Nicholas Kajoh. All rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>Here’s a dead simple React-Django setup for your next project</title>
        <link>https://alphacoder.xyz/dead-simple-react-django-setup/</link>
        <pubDate>Thu, 11 Jan 2018 14:39:00 +0000</pubDate>
        
        <guid>https://alphacoder.xyz/dead-simple-react-django-setup/</guid>
        <description>Alpha Coder https://alphacoder.xyz/dead-simple-react-django-setup/ -&lt;p&gt;There are several reasons why you might not want to have separate code bases for the front and back end of your app. For one, the project becomes more portable since it can live in one repository/folder. Then again, everything can be deployed on just one server.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR: &lt;a href=&#34;https://github.com/nicholaskajoh/React-Django&#34;&gt;https://github.com/nicholaskajoh/React-Django&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here’s a simple setup for creating a React-Django project. With just a few tweaks, you can swap out React for Angular or Vue.js and everything would work fine.&lt;/p&gt;
&lt;h2 id=&#34;django&#34;&gt;Django&lt;/h2&gt;
&lt;p&gt;Follow the steps below to setup Django:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Have Python and pip installed on your computer.&lt;/li&gt;
&lt;li&gt;Install &lt;a href=&#34;http://virtualenvwrapper.readthedocs.io/en/latest/install.html&#34;&gt;virtualenv and virtualenvwrapper&lt;/a&gt; by running &lt;code&gt;pip install virtualenvwrapper&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create a virtual environment for the project using &lt;code&gt;mkvirtualenv name-of-virtual-env&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;workon name-of-virtual-env&lt;/code&gt; to activate the virtual environment.&lt;/li&gt;
&lt;li&gt;Install Django with &lt;code&gt;pip install django&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Start a django project by running &lt;code&gt;django-admin startproject nameOfProject&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Change directory to the project root and create a new app with &lt;code&gt;django-admin startapp mynewapp&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add &lt;em&gt;mynewapp&lt;/em&gt; to installed apps in &lt;em&gt;settings.py&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Run app with &lt;code&gt;python manage.py runserver&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See the &lt;a href=&#34;https://docs.djangoproject.com/en/dev/topics/install/&#34;&gt;official Django installation guide&lt;/a&gt; for more info.&lt;/p&gt;
&lt;h2 id=&#34;react&#34;&gt;React&lt;/h2&gt;
&lt;p&gt;We’ll be using &lt;a href=&#34;https://github.com/facebookincubator/create-react-app&#34;&gt;Create React App&lt;/a&gt; in this setup. Feel free to use your preferred method of/tool for setting up a React project.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Have Node.js and NPM installed.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;npm install -g create-react-app&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create a new app with &lt;code&gt;create-react-app name-of-project&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Copy/cut all the contents of the React app (in &lt;em&gt;name-of-project&lt;/em&gt; folder) and paste in the root of the Django project.**&lt;/li&gt;
&lt;li&gt;Run app with &lt;code&gt;npm start&lt;/code&gt; from the project root.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;configure&#34;&gt;Configure&lt;/h2&gt;
&lt;p&gt;If you followed all the instructions above, you should have both React and Django apps in one folder. See the starred step (**) under the &lt;em&gt;React&lt;/em&gt; heading. Good!&lt;/p&gt;
&lt;p&gt;The React app is the SPA (Single Page App) while the Django app is the API. Let’s do some config, shall we?&lt;/p&gt;
&lt;p&gt;The goal is to expose two sets of urls/routes. One for the SPA (e.g &lt;em&gt;example.com&lt;/em&gt;, &lt;em&gt;example.com/home&lt;/em&gt;, etc) and the other for the API (e.g &lt;em&gt;example.com/api/posts&lt;/em&gt;, &lt;em&gt;example.com/api/post/1&lt;/em&gt;, etc).&lt;/p&gt;
&lt;p&gt;The React-Django app would be deployed on a Python web server, so we can easily achieve this using Django.&lt;/p&gt;
&lt;h4 id=&#34;step-1-build&#34;&gt;Step 1: build&lt;/h4&gt;
&lt;p&gt;Run &lt;code&gt;npm run build&lt;/code&gt;. This creates a folder named &lt;em&gt;build&lt;/em&gt; in the project root containing a production-ready version of the React app.&lt;/p&gt;
&lt;h4 id=&#34;step-2-settingspy&#34;&gt;Step 2: settings.py&lt;/h4&gt;
&lt;p&gt;Add the &lt;em&gt;build&lt;/em&gt; folder to template directories in &lt;em&gt;settings.py&lt;/em&gt; so that Django can load &lt;em&gt;/build/index.html&lt;/em&gt; as a template.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;BASE_DIR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dirname(os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dirname(os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;abspath(__file__)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TEMPLATES &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DIRS&amp;#39;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(BASE_DIR, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;build&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Also add &lt;em&gt;build&lt;/em&gt; as a static files directory so that &lt;code&gt;collectstatic&lt;/code&gt; can copy the css and js files.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;STATICFILES_DIRS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(BASE_DIR, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;build&amp;#39;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;step-3-urlspy&#34;&gt;Step 3: urls.py&lt;/h4&gt;
&lt;p&gt;Add pattern to return &lt;em&gt;/build/index.html&lt;/em&gt; in &lt;em&gt;urls.py&lt;/em&gt; as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.contrib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; admin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.urls &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; path, re_path
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.views.generic &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; TemplateView
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;urlpatterns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    path(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;admin/&amp;#39;&lt;/span&gt;, admin&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;site&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;urls),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# path(&amp;#39;api/&amp;#39;, include(&amp;#39;mynewapp.urls&amp;#39;)),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    re_path(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.*&amp;#39;&lt;/span&gt;, TemplateView&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;as_view(template_name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;)),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run Django’s dev server (&lt;code&gt;python manage.py runserver&lt;/code&gt;) to test the app.&lt;/p&gt;
&lt;h2 id=&#34;angular-vuejs-etc&#34;&gt;Angular, Vue.js, etc&lt;/h2&gt;
&lt;p&gt;As you’ve seen with React, all you need to do is make a build available to Django, then configure Django to handle API requests and React to handle normal web page routes. You can use the same steps to setup Angular, Vue.js etc with Django.&lt;/p&gt;
&lt;h2 id=&#34;repo&#34;&gt;Repo&lt;/h2&gt;
&lt;p&gt;Check out the code for this tutorial here: &lt;a href=&#34;https://github.com/nicholaskajoh/React-Django&#34;&gt;https://github.com/nicholaskajoh/React-Django&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;deploy&#34;&gt;Deploy&lt;/h2&gt;
&lt;p&gt;Deploying the React-Django app is a story for another day. The process largely depends on your hosting environment and workflow. I made &lt;a href=&#34;https://alphacoder.xyz/deploy-react-django-app-on-heroku/&#34;&gt;a post on deploying it to Heroku&lt;/a&gt;.&lt;/p&gt;
- https://alphacoder.xyz/dead-simple-react-django-setup/ - Copyright 2017 to ∞. Nicholas Kajoh. All rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>Naive Bayes</title>
        <link>https://alphacoder.xyz/naive-bayes/</link>
        <pubDate>Tue, 26 Dec 2017 08:44:05 +0100</pubDate>
        
        <guid>https://alphacoder.xyz/naive-bayes/</guid>
        <description>Alpha Coder https://alphacoder.xyz/naive-bayes/ -&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/mlc-nb/nb-meme.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Naive Bayes is a classifier just like &lt;a href=&#34;https://alphacoder.xyz/k-nearest-neighbors&#34;&gt;K Nearest Neighbors&lt;/a&gt;. The Naive Bayes algorithm applies the popular &lt;a href=&#34;https://en.wikipedia.org/wiki/Bayes%27_theorem&#34;&gt;Bayes Theorem&lt;/a&gt; (used to calculate conditional probability) given by the formula:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/mlc-nb/bayes-formula.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;Bayes formula&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Here’s a great explanation to read if you’ve not come across/don’t understand the theorem yet: &lt;a href=&#34;https://betterexplained.com/articles/an-intuitive-and-short-explanation-of-bayes-theorem&#34;&gt;https://betterexplained.com/articles/an-intuitive-and-short-explanation-of-bayes-theorem&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;the-ml-chops-series&#34;&gt;The ML Chops series&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/linear-regression&#34;&gt;Linear Regression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/k-nearest-neighbors&#34;&gt;K Nearest Neighbors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Naive Bayes (this article)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/support-vector-machine&#34;&gt;Support Vector Machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/k-means&#34;&gt;K Means&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s consider the data we used in the last post on KNNs:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;height (ft)    weight (kg)    sex  
6.3            50.2           Male  
5.9            79.7           Female  
5.1            61.4           Female  
5.6            47.1           Male  
5.1            59.8           Female
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In Naive Bayes, we calculate the probabilities of an input feature set being in each of the classes in the data and return the class with the highest probability as the predicted output.&lt;/p&gt;
&lt;p&gt;Our goal with the data in the table above is to determine whether an individual is &lt;em&gt;Male&lt;/em&gt; or &lt;em&gt;Female&lt;/em&gt;. Given the height and weight of a person e.g &lt;code&gt;[height, weight] -&amp;gt; [5.8, 82.1]&lt;/code&gt;, a Naive Bayes classifier calculates the probabilities of the person being a Male and a Female e.g &lt;code&gt;[(“Male”, 7.92248128417e-103), (“Female”, 0.00355626444241)]&lt;/code&gt; then returns the class with the highest probability (in this example &lt;code&gt;“Female”&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;How do we find the probabilities for each class?&lt;/p&gt;
&lt;p&gt;You guessed right! &lt;strong&gt;Bayes formula&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Let’s put the formula into context for better understanding:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/mlc-nb/male-person-prob.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;Probability that a person is Male&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Substitute &lt;em&gt;Female&lt;/em&gt; for &lt;em&gt;Male&lt;/em&gt; in the formula and you have the probability that a person is female.&lt;/p&gt;
&lt;p&gt;Let’s explain terms in the equation briefly:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;P(Male | height &amp;amp; weight)&lt;/strong&gt; is the probability that a person is Male given their height and weight (better put: given all the features provided in the data). This is what we’re looking for.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;P(Male)&lt;/strong&gt; is the probability of selecting a Male person from the data.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;P(height | Male)&lt;/strong&gt; and &lt;strong&gt;P(weight | Male)&lt;/strong&gt; equate to &lt;strong&gt;P(B|A)&lt;/strong&gt; [from the first formula]. &lt;strong&gt;P(height | Male)&lt;/strong&gt; is the probability of getting the height of a person given that they are Male (same for the weight). Essentially we want to find the percentage of Males with the same height as the person we’re classifying. This not feasible with our data however because both height and weight are continuous. Besides, it would be very costly when we have a large amount of training data (we’d have to run through the data every time to count the number of people with same height and weight with the person being classified). Thankfully, we have the &lt;strong&gt;Probability Density Function (PDF)&lt;/strong&gt; to help us with this. We’ll use PDF to determine both &lt;strong&gt;P(height | Male)&lt;/strong&gt; and &lt;strong&gt;P(weight | Male)&lt;/strong&gt; in a bit.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;P(height &amp;amp; weight)&lt;/strong&gt; or better put &lt;strong&gt;P(all features)&lt;/strong&gt; is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Marginal_distribution&#34;&gt;marginal probability&lt;/a&gt;. For our classification, it’s not really useful to us because it’s the denominator for all class probabilities. We’re actually interested in finding the class with the highest probability and not the actually probability figure like 0.9 for instance. We might as well not use it since we’re dividing by it in every class probability calculation. It doesn’t change anything. We’ll still get the class with the highest probability.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;pclass&#34;&gt;P(Class)&lt;/h1&gt;
&lt;p&gt;The probability of selecting a person from a given class is the simplest calculation to perform. From the data table, we can see that there are 5 samples. 2 are Male. Thus &lt;strong&gt;P(Male)&lt;/strong&gt; = 2/5. And 3 are Female. Thus &lt;strong&gt;P(Female)&lt;/strong&gt; = 3/5.&lt;/p&gt;
&lt;h1 id=&#34;the-pdf&#34;&gt;The PDF&lt;/h1&gt;
&lt;p&gt;The &lt;a href=&#34;https://en.wikipedia.org/wiki/Probability_density_function&#34;&gt;PDF&lt;/a&gt; can be computed using the following formula:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/mlc-nb/pdf.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;The PDF&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Substitute Female with Male and/or weight with height to calculate other PDFs.&lt;/p&gt;
&lt;p&gt;Using PDF, we assume:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each feature is uncorrelated from the others (i.e height is independent of weight for instance).&lt;/li&gt;
&lt;li&gt;The values of the features (i.e heights, weights) are &lt;a href=&#34;https://www.thoughtco.com/what-is-normal-distribution-3026707&#34;&gt;normally distributed&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are assumptions and are not completely true most times for a given data set. As such, we’re being “naive” by assuming.&lt;/p&gt;
&lt;h1 id=&#34;code&#34;&gt;Code&lt;/h1&gt;
&lt;p&gt;First things first! The data.&lt;/p&gt;
&lt;p&gt;For convenience, I’m using 3 arrays:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; np
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# data  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;heights &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([&lt;span style=&#34;color:#ae81ff&#34;&gt;6.3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5.9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5.1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5.6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5.1&lt;/span&gt;])  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;weights &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([&lt;span style=&#34;color:#ae81ff&#34;&gt;50.2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;79.7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;61.4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;47.1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;59.8&lt;/span&gt;])  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;classes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Male&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Female&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Female&amp;#34;&lt;/span&gt; , &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Male&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Female&amp;#34;&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, let’s find P(Class) for Male and Female:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;males_count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;females_count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sample_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(classes)  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; classes:  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Male&amp;#34;&lt;/span&gt;:  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        males_count &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        females_count &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p_male &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; males_count &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; sample_size  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p_female &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; females_count &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; sample_size
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;pdfs&#34;&gt;PDFs&lt;/h1&gt;
&lt;p&gt;We need to find the various means and variances required to compute the PDFs:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;heights_of_males &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;weights_of_males &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;heights_of_females &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;weights_of_females &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(sample_size):  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; classes[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Male&amp;#34;&lt;/span&gt;:  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        heights_of_males&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(heights[i])  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        weights_of_males&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(weights[i])  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        heights_of_females&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(heights[i])  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        weights_of_females&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(weights[i])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mean_height_males &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(heights_of_males)  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mean_weight_males &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(weights_of_males)  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mean_height_females &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(heights_of_females)  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mean_weight_females &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(weights_of_females)  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;var_height_males &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;var(heights_of_males)  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;var_weight_males &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;var(weights_of_males)  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;var_height_females &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;var(heights_of_females)  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;var_weight_females &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;var(weights_of_females)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now to the PDF formula in code&amp;hellip;&lt;/p&gt;
&lt;p&gt;Let’s define a function as we’ll use it severally:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;the_pdf&lt;/span&gt;(x, mean, variance):  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; (np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sqrt(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pi &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; variance)) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exp((&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; mean)&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; variance))  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; pd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;predict&#34;&gt;Predict&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;5.8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;82.1&lt;/span&gt;] &lt;span style=&#34;color:#75715e&#34;&gt;# [height, weight]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p_height_male &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; the_pdf(x[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], mean_height_males, var_height_males)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p_weight_male &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; the_pdf(x[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], mean_weight_males, var_weight_males)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p_height_female &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; the_pdf(x[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], mean_height_females, var_height_females)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p_weight_female &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; the_pdf(x[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], mean_weight_females, var_weight_females)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Get class probabilities  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p_male_h_and_w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p_male &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; p_height_male &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; p_weight_male  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p_female_h_and_w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p_female &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; p_height_female &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; p_weight_female  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P(Male | height &amp;amp; weight) =&amp;#34;&lt;/span&gt;, p_male_h_and_w)  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P(Female | height &amp;amp; weight) =&amp;#34;&lt;/span&gt;, p_female_h_and_w)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Return prediction  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; p_male_h_and_w &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; p_female_h_and_w:  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;class = Male&amp;#34;&lt;/span&gt;)  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;class = Female&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Output:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;P(Male | height &amp;amp; weight) = 7.92248128417e-103  
P(Female | height &amp;amp; weight) = 0.00355626444241  
class = Female
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Putting everything together, we have:&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/nicholaskajoh/3ae130a7e7df91141c3efdbc7a989304.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;Don’t forget to check out the ML Chops repo for a more robust and efficient implementation: &lt;a href=&#34;https://github.com/nicholaskajoh/ML_Chops/tree/master/naive-bayes&#34;&gt;https://github.com/nicholaskajoh/ML_Chops/tree/master/naive-bayes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have any questions, concerns or suggestions, don’t hesitate to comment! 👍&lt;/p&gt;
- https://alphacoder.xyz/naive-bayes/ - Copyright 2017 to ∞. Nicholas Kajoh. All rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>Support Vector Machine</title>
        <link>https://alphacoder.xyz/support-vector-machine/</link>
        <pubDate>Tue, 26 Dec 2017 08:44:05 +0100</pubDate>
        
        <guid>https://alphacoder.xyz/support-vector-machine/</guid>
        <description>Alpha Coder https://alphacoder.xyz/support-vector-machine/ -&lt;p&gt;The Support Vector Machine (SVM) is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Supervised_learning&#34;&gt;supervised learning&lt;/a&gt; model used for classification and regression. In this tutorial, we’ll be using it for classification.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*36seqRE8giOL5saMNGKCig.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;the-ml-chops-series&#34;&gt;The ML Chops series&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/linear-regression&#34;&gt;Linear Regression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/k-nearest-neighbors&#34;&gt;K Nearest Neighbors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/naive-bayes&#34;&gt;Naive Bayes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Support Vector Machine (this article)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/k-means&#34;&gt;K Means&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Created by &lt;a href=&#34;https://en.wikipedia.org/wiki/Vladimir_Vapnik&#34;&gt;Vladimir Vapnik&lt;/a&gt; in the 1960s, the SVM is one of most popular machine learning classifiers. Given a set of training samples, each marked as belonging to one or the other of two categories, the goal of SVM is to find the best splitting boundary between the data. This boundary is known as a &lt;a href=&#34;https://en.wikipedia.org/wiki/Hyperplane&#34;&gt;hyperplane&lt;/a&gt; — the best separating hyperplane.&lt;/p&gt;
&lt;p&gt;Let’s take the points on the graph below for example:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*2tviRinseZn7KMMCIPieVw.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;What line best divides the red pluses and green minuses? Eye-balling the data points, I came up with this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*YtZfClUNObb85VrKWKvz6g.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Any data point that falls on the right side of the boundary is classified as a &lt;em&gt;red plus&lt;/em&gt; and any point that falls on the left side is classified as a &lt;em&gt;green minus&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How do we arrive at the best separating hyperplane, mathematically?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Well, the equation of a hyperplane is given by &lt;strong&gt;wx + b = y&lt;/strong&gt; where &lt;em&gt;w&lt;/em&gt; is the normal vector to the hyperplane, &lt;em&gt;b&lt;/em&gt; is a bias/shift and &lt;em&gt;x&lt;/em&gt; is a vector the hyperplane passes through. &lt;em&gt;y&lt;/em&gt; determines the position of the hyperplane.&lt;/p&gt;
&lt;p&gt;Take a look at the diagram below for better understanding:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*3xsACXxhR4rZeXLTSAnfVQ.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;It turns out that y = 0 at the best separating hyperplane. Thus the equation of the best separating hyperplane is &lt;strong&gt;wx + b = 0&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;With this hyperplane, it shouldn’t be difficult to determine if an input vector (a feature set we desire to classify) is on one or the other side of it. To make a prediction, we’d return the sign of &lt;strong&gt;wx + b&lt;/strong&gt;. A positive sign (+) represents one class and negative sign (-) represents the other.&lt;/p&gt;
&lt;p&gt;There’s just one problem. We need to find &lt;em&gt;w&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; when &lt;em&gt;y&lt;/em&gt; = 0. Now there’s a new question to answer. &lt;strong&gt;How do we find w and b?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We’ll come to that in a bit.&lt;/p&gt;
&lt;h1 id=&#34;what-are-supportvectors&#34;&gt;What are Support Vectors?&lt;/h1&gt;
&lt;p&gt;In SVM, each sample in a data set is a vector. The area covered by the data points is a vector space.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*NWryt8J6zqRWpQ5QOmEWWg.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;A support vector is a vector in this vector space which determines the hyperplane that best separates the data. They are the closest points to the best separating hyperplane.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*J1D7tjrKTwBZEc8D__474g.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;If any of the support vectors change, the best separating hyperplane changes as well. You could say they “support” the best separating hyperplane.&lt;/p&gt;
&lt;p&gt;We can draw 2 hyperplanes both parallel to the best separating hyperplane that pass through the support vectors. The best separating hyperplane divides these hyperplanes into two equal parts/areas.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*EuCGXKeyCRJ_BAlm2t73tg.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;It turns out that these two hyperplanes are given by &lt;strong&gt;wx + b = -1&lt;/strong&gt; and &lt;strong&gt;wx + b = 1&lt;/strong&gt; as show in the graph above.&lt;/p&gt;
&lt;h1 id=&#34;w-andb&#34;&gt;w and b&lt;/h1&gt;
&lt;p&gt;The geometric distance between the hyperplanes enclosing the best separating hyperplane is &lt;strong&gt;2 / ||w||&lt;/strong&gt; where &lt;strong&gt;||w||&lt;/strong&gt; is the magnitude of &lt;em&gt;w&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*Dm3swkj4iJHNofRzt6zzcQ.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;This distance is maximum at the values of &lt;em&gt;w&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; which produce the best separating hyperplane. As such, our goal is to get a value of &lt;em&gt;w&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; that maximize &lt;strong&gt;2 / ||w||&lt;/strong&gt;. Maximizing &lt;strong&gt;2 / ||w||&lt;/strong&gt; equates to minimizing &lt;strong&gt;||w||&lt;/strong&gt;, so we could as well do just that.&lt;/p&gt;
&lt;p&gt;For mathematical convenience, let’s minimize &lt;strong&gt;1/2 * ||w||²&lt;/strong&gt; instead of &lt;strong&gt;||w||&lt;/strong&gt;. Note that this doesn’t change anything. Minimizing &lt;strong&gt;||w||&lt;/strong&gt; is minimizing &lt;strong&gt;1/2 * ||w||²&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;There’s a constraint to this minimization given by &lt;strong&gt;y(wx + b) &amp;gt;= 1&lt;/strong&gt;. This ensures that we don’t maximize the distance beyond the 2 hyperplanes that separate the 2 categories of data.&lt;/p&gt;
&lt;p&gt;This is a classic quadratic optimization problem!&lt;/p&gt;
&lt;p&gt;We are tasked with minimizing &lt;strong&gt;1/2 * ||w||²&lt;/strong&gt; subject to &lt;strong&gt;y(wx + b) &amp;gt;= 1&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;There are several methods for optimization at our disposal including &lt;a href=&#34;https://en.wikipedia.org/wiki/Convex_optimization&#34;&gt;Convex Optimization&lt;/a&gt; and the popular &lt;a href=&#34;https://en.wikipedia.org/wiki/Sequential_minimal_optimization&#34;&gt;Sequential Minimal Optimization (SMO)&lt;/a&gt; invented by John Platt in 1998 at Microsoft.&lt;/p&gt;
&lt;p&gt;We’ll be using Convex Optimization to solve this problem.&lt;/p&gt;
&lt;h1 id=&#34;convex-optimization&#34;&gt;Convex Optimization&lt;/h1&gt;
&lt;p&gt;I chose to use the &lt;a href=&#34;http://cvxopt.org/&#34;&gt;CVXOPT python library&lt;/a&gt; for Convex Optimization because I didn’t want to delve into too much math. Feel free to explore Convex Optimization (the math and the code). Here’s a little explanation of convex optimization for the problem we’re solving — to get optimum values of &lt;em&gt;w&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*W3MMVrG7QUc3USJyrp5kaw.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Suppose the optimum value for &lt;em&gt;w&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; is at X. We could move from A to C in a bid to get to X. B is the point where &lt;strong&gt;1/2 * ||w||²&lt;/strong&gt; is minimum but it does not satisfy the constraint &lt;strong&gt;y(wx + b) &amp;gt;= 1&lt;/strong&gt; (in this example) so it’s not the optimum point.&lt;/p&gt;
&lt;h1 id=&#34;code&#34;&gt;Code&lt;/h1&gt;
&lt;p&gt;Data:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import numpy as np  
import cvxopt  
import cvxopt.solvers

features = np.array([[5, 4], [5, -1], [3, 3], [7, 9], [6, 7], [7, 11]])  
labels = np.array([-1.0, -1.0, -1.0, 1.0, 1.0, 1.0])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Train/fit using CVXOPT:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def fit(X, y):  
  n_samples, n_features = X.shape

  # Gram matrix
  K = np.zeros((n_samples, n_samples))  
  for i in range(n_samples):  
    for j in range(n_samples):  
      K[i,j] = np.dot(X[i], X[j])

  P = cvxopt.matrix(np.outer(y,y) * K)  
  q = cvxopt.matrix(np.ones(n_samples) * -1)  
  A = cvxopt.matrix(y, (1, n_samples))  
  b = cvxopt.matrix(0.0)  
  G = cvxopt.matrix(np.diag(np.ones(n_samples) * -1))  
  h = cvxopt.matrix(np.zeros(n_samples))

  # solve QP problem
  solution = cvxopt.solvers.qp(P, q, G, h, A, b)

  # Lagrange multipliers
  a = np.ravel(solution[&#39;x&#39;])

  # Support vectors have non zero lagrange multipliers
  sv = a &amp;gt; 1e-5  
  ind = np.arange(len(a))[sv]  
  a = a[sv]  
  sv_ = X[sv]  
  sv_y = y[sv]

  # Intercept
  b = 0  
  for n in range(len(a)):  
    b += sv_y[n]  
    b -= np.sum(a * sv_y * K[ind[n], sv])  
  b /= len(a)

  # Weight vector
  w = np.zeros(n_features)  
  for n in range(len(a)):  
    w += a[n] * sv_y[n] * sv_[n]

  return w, b
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Predict:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;w, b = fit(features, labels)

def predict(x):  
  classification = np.sign(np.dot(x, w) + b)  
  return classification

# test  
x = [3, 4]  
print(predict(x))
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;the-kerneltrick&#34;&gt;The Kernel trick&lt;/h1&gt;
&lt;p&gt;The data we’ve been dealing with is linearly separable i.e we can draw a straight line (speaking in 2D) that separates the data into 2 categories. What if we have a data set like this?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*SGJF-6P3gQH5cHlarb7m6w.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;There’s no hyperplane that can separate this data.&lt;/p&gt;
&lt;p&gt;The kernel trick introduces a new dimension to the vector space. Adding a dimension to the data in the diagram above yields a 3D vector space. Can we separate the data now? Probably.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*aBJJ38sQ1yIZBGFNBzjZmA.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;If we can’t we could add more dimensions until we can. That’s beyond the scope of this tutorial so we won’t go any further. Do read about kernels in SVM though. There’s some pretty interesting stuff to explore!&lt;/p&gt;
&lt;p&gt;Don’t forget to check out the ML Chops repo for all the code: &lt;a href=&#34;https://github.com/nicholaskajoh/ML_Chops/tree/master/support-vector-machine&#34;&gt;https://github.com/nicholaskajoh/ML_Chops/tree/master/support-vector-machine&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have any questions, concerns or suggestions, don’t hesitate to comment! 👍&lt;/p&gt;
- https://alphacoder.xyz/support-vector-machine/ - Copyright 2017 to ∞. Nicholas Kajoh. All rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>Build a Facebook clone from scratch with PHP — Part 7</title>
        <link>https://alphacoder.xyz/facebook-clone-7/</link>
        <pubDate>Sat, 09 Dec 2017 09:07:25 +0100</pubDate>
        
        <guid>https://alphacoder.xyz/facebook-clone-7/</guid>
        <description>Alpha Coder https://alphacoder.xyz/facebook-clone-7/ -&lt;h1 id=&#34;all-parts&#34;&gt;All parts&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-1&#34;&gt;Build a Facebook clone from scratch with PHP — Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-2&#34;&gt;Build a Facebook clone from scratch with PHP — Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-3&#34;&gt;Build a Facebook clone from scratch with PHP — Part 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-4&#34;&gt;Build a Facebook clone from scratch with PHP — Part 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-5&#34;&gt;Build a Facebook clone from scratch with PHP — Part 5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-6&#34;&gt;Build a Facebook clone from scratch with PHP — Part 6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Build a Facebook clone from scratch with PHP — Part 7 (this article)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&amp;rsquo;s time to deploy FaceClone and invite friends to test it out!&lt;/p&gt;
&lt;h1 id=&#34;hosting&#34;&gt;Hosting&lt;/h1&gt;
&lt;p&gt;The FaceClone app has been running on our local computers all the while. For it to be accessible by anyone and everyone, it needs to run online. In other words, we need to host it. There are many hosting services out there. For this tutorial, we&amp;rsquo;ll be using &lt;a href=&#34;https://www.000webhost.com&#34;&gt;000webhost&lt;/a&gt;. 000webhost is free and offers an easy-to-use interface. Feel free to try out other web hosting services afterwards.&lt;/p&gt;
&lt;h1 id=&#34;domain-name&#34;&gt;Domain name&lt;/h1&gt;
&lt;p&gt;Every website needs an address from which to access it. 000webhost provides us with a domain name out of the box: APP_NAME.000webhost.com. This would suffice, for now. If you want a more professional domain name like facecloneapp.com or thefaceclone.co.uk, you&amp;rsquo;ll have to purchase it from a domain name registrar and &amp;ldquo;point it&amp;rdquo; to your web host&amp;rsquo;s servers. But that&amp;rsquo;s beyond the scope of this tutorial so we&amp;rsquo;ll pass. Most domain registrars provide elaborate tutorials on how to setup domains with web hosts so it&amp;rsquo;s really no biggie.&lt;/p&gt;
&lt;h1 id=&#34;000webhost&#34;&gt;000webhost&lt;/h1&gt;
&lt;p&gt;Visit &lt;a href=&#34;https://www.000webhost.com&#34;&gt;https://www.000webhost.com&lt;/a&gt; and sign up for an account. You may need to verify your account by email.&lt;/p&gt;
&lt;p&gt;Login and create a new website using the dialog as shown below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc7/000webhost-new-site.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;Create a new website on 000webhost&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; Note the password you set. We&amp;rsquo;ll use it in a bit.&lt;/p&gt;
&lt;p&gt;Say you named your site faceclone-app, you can check it out using the address faceclone-app.000webhost.com.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc7/new-site-page.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;000webhost&amp;rsquo;s new website page&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;ftp&#34;&gt;FTP&lt;/h1&gt;
&lt;p&gt;Remember FileZilla from Part 1? We&amp;rsquo;ll be using FileZilla, a File Transfer Protocol (FTP) app to upload FaceClone to 000webhost.&lt;/p&gt;
&lt;p&gt;First go to settings on 000webhost. Make sure FTP transfer is set to on. Also take note of the FTP host name and username.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc7/enable-ftp.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now start FileZilla.&lt;/p&gt;
&lt;p&gt;Slot in hostname, username and password (the password for your 000webhost site) in the fields a top the screen and click &lt;em&gt;Quick connect&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc7/connect-with-ftp.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The left part of FileZilla represents your local computer while the right side represents the remote computer (000webhost&amp;rsquo;s server). If you&amp;rsquo;re able to connect successfully, the file system of your site&amp;rsquo;s server would open up on the right side.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; You must be connected to the internet for this to work.&lt;/p&gt;
&lt;p&gt;Navigate your computer&amp;rsquo;s file system to the folder where the FaceClone source code is located. Select all the files and folders there and copy them to your website&amp;rsquo;s server&amp;rsquo;s public_html folder.&lt;/p&gt;
&lt;p&gt;Once the copying is done, try refreshing your 000webhost website page e.g &lt;em&gt;faceclone-app.000webhost.com&lt;/em&gt;. You should see something similar to this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc7/faceclone-db-error.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Everything seems to work f&amp;hellip; The DB&amp;rsquo;s not working. That&amp;rsquo;s a problem! 😑&lt;/p&gt;
&lt;h1 id=&#34;db-setup&#34;&gt;DB setup&lt;/h1&gt;
&lt;p&gt;We need to setup a database on 000webhost to store FaceClone data. Our website&amp;rsquo;s database server rejected the database parameters we have in the source code i.e &lt;em&gt;root&lt;/em&gt; as username with no password. That configuration was for the local database server. We need to change the parameters.&lt;/p&gt;
&lt;p&gt;To create a database on 000webhost, navigate to the &lt;em&gt;Manage database&lt;/em&gt; tab and click on &lt;em&gt;New Database&lt;/em&gt;. You need to set a database name, user and password.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc7/new-db.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that a prefix was added to the database name and user. We&amp;rsquo;ll be using these values (including the db password you set) to configure the FaceClone app.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc7/manage-dbs.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Navigate to the File manager tab and click Upload files now. You&amp;rsquo;ll be redirected to &lt;a href=&#34;https://files.000webhost.com&#34;&gt;https://files.000webhost.com&lt;/a&gt; where you should see all the files uploaded via FTP.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc7/000webhost-files.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Right click on functions.php and click edit.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc7/edit-functions.php.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Change the database params as appropriate, save and close.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc7/update-db-params.jpg&#34; alt=&#34;&#34;&gt;
&lt;em&gt;Change the params in functions.php&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now try refreshing your app&amp;rsquo;s url&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc7/faceclone-index-page.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;Hurray! It works!!!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;import-schema&#34;&gt;Import schema&lt;/h1&gt;
&lt;p&gt;We&amp;rsquo;re not done yet. We need to import the database schema in the new database we created on 000webhost. The schema can be found &lt;a href=&#34;https://github.com/nicholaskajoh/faceclone-site/blob/master/faceclone.sql&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Navigate to the &lt;em&gt;Manage database&lt;/em&gt; tab, click on the &lt;em&gt;Manage&lt;/em&gt; dropdown for your FaceClone database then select PhpMyAdmin.&lt;/p&gt;
&lt;p&gt;Use your database user and password for PhpMyAdmin.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc7/phpmyadmin-login.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;PhpMyAdmin login&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc7/phpmyadmin-home.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;PhpMyAdmin home&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Select your FaceClone database from the sidebar and click on the import tab.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc7/phpmyadmin-import.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Select the schema from your computer and click go&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc7/phpmyadmin-import2.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;Perfecto!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Test out the whole app to ensure there are no breaking errors lurking around&amp;hellip; 😏&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc7/faceclone-signup-success.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alphacoder.xyz/images/fbc7/faceclone-home.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Remember to change &lt;em&gt;Show errors&lt;/em&gt; in the settings to &lt;strong&gt;Off&lt;/strong&gt; when you&amp;rsquo;re done testing the app.&lt;/p&gt;
&lt;p&gt;Awesome!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; You can share links to your FaceClone app in the comments.&lt;/p&gt;
&lt;h1 id=&#34;next-steps&#34;&gt;Next steps&lt;/h1&gt;
&lt;p&gt;The repo for the version of FaceClone running on 000webhost can be found here: &lt;a href=&#34;https://github.com/nicholaskajoh/faceclone-site&#34;&gt;https://github.com/nicholaskajoh/faceclone-site&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s open to everyone for bug fixes and new features. If you have any ideas and want to code, head over there and contribute to the project.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;A big thanks to you if you followed through to this point! 🎉🎉🎉&lt;/p&gt;
&lt;p&gt;I wish you success in your software development endeavours. Keep building!!!&lt;/p&gt;
- https://alphacoder.xyz/facebook-clone-7/ - Copyright 2017 to ∞. Nicholas Kajoh. All rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>K Nearest Neighbors</title>
        <link>https://alphacoder.xyz/k-nearest-neighbors/</link>
        <pubDate>Sat, 09 Dec 2017 08:44:05 +0100</pubDate>
        
        <guid>https://alphacoder.xyz/k-nearest-neighbors/</guid>
        <description>Alpha Coder https://alphacoder.xyz/k-nearest-neighbors/ -&lt;p&gt;K Nearest Neighbors (KNN) is a Machine Learning algorithm for classification — a &lt;strong&gt;classifier&lt;/strong&gt; as the experts would call it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*eg_VDV5KPHZ-aIzbI11fwg.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Classification is a very fundamental and important activity we perform as humans. We’ve grouped animals, plants, stars, humans, music etc to help us understand them and their relationships better, among other things. Often, we need to classify a thing as part of one of several groups. This crucial activity gets boring to do though. What if computers could do that for us?&lt;/p&gt;
&lt;p&gt;Teaching computers to classify things has been very tedious until Machine Learning. While hard-coded rules may work for a given problem set, everything falls like a pack of cards when a few parameters are added/changed/removed. Worse, a solution becomes useless when a new problem arises. That’s bad for business. 😠&lt;/p&gt;
&lt;h1 id=&#34;the-ml-chops-series&#34;&gt;The ML Chops series&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/linear-regression&#34;&gt;Linear Regression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;K Nearest Neighbors (this article)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/naive-bayes&#34;&gt;Naive Bayes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/support-vector-machine&#34;&gt;Support Vector Machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/k-means&#34;&gt;K Means&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;supervised-learning&#34;&gt;Supervised learning&lt;/h1&gt;
&lt;p&gt;KNN is a supervised learning algorithm. Supervised learning algorithms infer from labelled training data. Say we want to determine whether a person is male or female, the following samples may be useful:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;height (ft)    weight (kg)    sex  
6.3            50.2           Male  
5.9            79.7           Female  
5.1            61.4           Female  
5.6            47.1           Male  
5.1            59.8           Female
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each row of training data (sample) represents a person. The &lt;em&gt;sex&lt;/em&gt; column shows the labels while the &lt;em&gt;height&lt;/em&gt; and &lt;em&gt;weight&lt;/em&gt; columns show the features for each person. Good features translate to better classifiers. Height and weight are probably not the best features to train a classifier that determines the sex of a human being, but they are far better than Hair style or Eye color, for instance. Voice is a very good feature (I think).&lt;/p&gt;
&lt;p&gt;Also, more training data means a better classifier because there are more examples to “learn” from.&lt;/p&gt;
&lt;h1 id=&#34;meet-knn&#34;&gt;Meet KNN&lt;/h1&gt;
&lt;p&gt;K Nearest Neighbors is probably the easiest classification algorithm to understand. Take a look at the following graph:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*hhHhEwuLhRMXQ6gSXEOqdg.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;Graph of height vs weight (data is theoretical)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;What would you classify &lt;em&gt;Blue Diamond 1&lt;/em&gt; as? At a glance, it’s easy to predict/infer that &lt;em&gt;Blue Diamond 1&lt;/em&gt; is most likely/is a &lt;em&gt;Female&lt;/em&gt;. It seems logical to say that &lt;em&gt;Blue Diamond 1&lt;/em&gt; is in the cluster of Females so it’s female. Fair enough.&lt;/p&gt;
&lt;p&gt;What of &lt;em&gt;Blue Diamond 2&lt;/em&gt;? Not so fast! While it seems likely &lt;em&gt;Female&lt;/em&gt;, one could argue it’s &lt;em&gt;Male&lt;/em&gt;. Hmm… Eye-balling won’t cut it.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;KNN provides us a pretty solid way to predict which class Blue Diamond 2 belongs to.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;K Nearest Neighbors outputs a class membership of a feature set by a majority vote of its closest neighbors. In other words, we can find the persons closest to &lt;em&gt;Blue Diamond 2&lt;/em&gt; then cast a vote. If majority are &lt;em&gt;Male&lt;/em&gt;, then we say &lt;em&gt;Blue Diamond 2&lt;/em&gt; is &lt;em&gt;Male&lt;/em&gt;, else we say it’s &lt;em&gt;Female&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*KVn_DG3XvlEiizLesA0rHQ.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;KNN visualization&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Looking at the circled area, we can easily see from the graph (above) that there are 5 persons closest to &lt;em&gt;Blue Diamond 2&lt;/em&gt;. 3 &lt;em&gt;Red Squares&lt;/em&gt; and 2 &lt;em&gt;Green Circles&lt;/em&gt;. KNN says &lt;em&gt;Blue Diamond 2&lt;/em&gt; is Male since males are the majority of the closest neighbors.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;k&lt;/em&gt; in KNN represents the number of neighbors being considered. In the case of classifying &lt;em&gt;Blue Diamond 2&lt;/em&gt;, it’s 5. &lt;em&gt;k&lt;/em&gt; directly affects our prediction so we must use a “good” value. Take into account your data, specifically the number of classes and the sample size of the training set when choosing k.&lt;/p&gt;
&lt;p&gt;In the person classification example we’ve been looking at, we have 2 classes (Male and Female), so k = 2 (or a multiple of 2) is a bad idea right off the bat.&lt;/p&gt;
&lt;p&gt;k = 1? Nah. You can’t have an election with just one candidate, can you?&lt;/p&gt;
&lt;p&gt;k = 3? Yep. Works for me! Since there are only 3 slots, we’ll never have a tie between Male and Female. Also, 3 is a reasonable number of samples to consider for the person classification problem we’re dealing with (the way I see it).&lt;/p&gt;
&lt;p&gt;A “small” value of &lt;em&gt;k&lt;/em&gt; means that noise will have a higher influence on the result. A “large” value of &lt;em&gt;k&lt;/em&gt; defeats the basic philosophy behind the KNN algorithm. There’s no rule for choosing k. It’s best to try out different values and see what works best.&lt;/p&gt;
&lt;h1 id=&#34;code&#34;&gt;Code&lt;/h1&gt;
&lt;p&gt;Let’s use the data from that table 👆 above…&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import numpy as np  
from collections import Counter

data = {&amp;quot;male&amp;quot;: [[6.3, 50.2], [5.6, 47.1]],  
        &amp;quot;female&amp;quot;: [[5.9, 79.7], [5.1, 61.4], [5.1, 59.8]]}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; You need &lt;a href=&#34;https://pypi.python.org/pypi/numpy&#34;&gt;Numpy&lt;/a&gt; installed on your computer.&lt;/p&gt;
&lt;p&gt;Next, let’s write a predict function. This function takes in the input feature set (Python list) we want to classify e.g &lt;code&gt;[6.0, 52.1]&lt;/code&gt; -&amp;gt; &lt;code&gt;[height, weight]&lt;/code&gt;, as well as the value of k, and returns a class (&lt;code&gt;Male&lt;/code&gt; or &lt;code&gt;Female&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def predict(input_feature_set, k):  
  distances = []

  for group in data:  
    for training_feature_set in data[group]:  
      euclidean_distance = np.linalg.norm(np.array(input_feature_set) - np.array(training_feature_set))  
      distances.append([euclidean_distance, group])

  nearest = sorted(distances)[:k]  
  votes = [d[1] for d in nearest]   
  prediction = Counter(votes).most_common(1)[0][0]

  return prediction
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that’s some chunk of code!&lt;/p&gt;
&lt;p&gt;First things first! We loop through each training sample, calculating the &lt;a href=&#34;https://en.wikipedia.org/wiki/Euclidean_distance&#34;&gt;Euclidean distance&lt;/a&gt; between it and the input set.&lt;/p&gt;
&lt;p&gt;The euclidean distance between two points on a cartesian plane is given by:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*j8gq_zqgxLfkbDMCFVDJvg.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Sound familiar?&lt;/p&gt;
&lt;p&gt;In the code, we used numpy’s euclidean distance function &lt;code&gt;np.linalg.norm()&lt;/code&gt; for simplicity and efficiency.&lt;/p&gt;
&lt;p&gt;Next, we append the distance along with the class/group of the set (&lt;code&gt;[euclidean distance, group]&lt;/code&gt; -&amp;gt; &lt;code&gt;[12.092364, “male”]&lt;/code&gt;) to &lt;code&gt;distances&lt;/code&gt; list.&lt;/p&gt;
&lt;p&gt;Afterwards, we sort &lt;code&gt;distances&lt;/code&gt; in ascending order of magnitude and select the first &lt;em&gt;k&lt;/em&gt; elements using &lt;code&gt;sorted(distances)[:k]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then we dispose the distances with the new &lt;code&gt;votes&lt;/code&gt; variable using &lt;code&gt;[d[1] for d in nearest]&lt;/code&gt;. We don’t need the numbers anymore, only the nearest classes/groups e.g &lt;code&gt;[“male”, “female”, “male”]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally, we count the occurrences of each class in &lt;code&gt;votes&lt;/code&gt; and return the class with the highest occurrence.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;prediction = Counter(votes).most_common(1)[0][0]

return prediction
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;predict&#34;&gt;Predict&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;print(predict([6.0, 52.1], 3))
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;accuracy&#34;&gt;Accuracy&lt;/h1&gt;
&lt;p&gt;To find out how accurate a KNN classifier is, we can divide a given data set into training and testing data, then run the test data through the predict function, noting if the classifier got the class right or wrong. This can be used to calculate accuracy, like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;accuracy = correct_predictions / test_sample_size * 100
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;confidence&#34;&gt;Confidence&lt;/h1&gt;
&lt;p&gt;Confidence is, well how &amp;ldquo;confident&amp;rdquo; a KNN classifier is about a prediction. If we have k to be 3 and the nearest neighbors for a person classifier are female, male and female, we can say we’re &lt;code&gt;2/3 * 100&lt;/code&gt; percent confident that the person is female. Likewise, if the nearest neighbors are all male, we can say we’re 100% confident that the person is a male.&lt;/p&gt;
&lt;h1 id=&#34;perf&#34;&gt;Perf&lt;/h1&gt;
&lt;p&gt;While KNN produces good classifiers, it takes a lot of time to predict outputs for large data sets. This is because euclidean distance must be calculated for all training samples in order to find the “nearest” samples in the data.&lt;/p&gt;
&lt;h1 id=&#34;data-sets&#34;&gt;Data sets&lt;/h1&gt;
&lt;p&gt;I suggest you try out KNN with a couple popular data sets to get a feel of how powerful the algorithm is. There are many free KNN data sets online like &lt;a href=&#34;https://www.kaggle.com/styven/iris-dataset&#34;&gt;the Iris data set&lt;/a&gt; and the &lt;a href=&#34;https://www.kaggle.com/uciml/breast-cancer-wisconsin-data&#34;&gt;Breast Cancer Wisconsin (diagnostic) data set&lt;/a&gt;. You should totally check them out!&lt;/p&gt;
&lt;p&gt;Don’t forget to check out the ML Chops repo for the complete KNN code: &lt;a href=&#34;https://github.com/nicholaskajoh/ML_Chops/tree/master/k-nearest-neighbors&#34;&gt;https://github.com/nicholaskajoh/ML_Chops/tree/master/k-nearest-neighbors&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have any questions, concerns or suggestions, don’t hesitate to comment! 👍&lt;/p&gt;
- https://alphacoder.xyz/k-nearest-neighbors/ - Copyright 2017 to ∞. Nicholas Kajoh. All rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>Linear Regression</title>
        <link>https://alphacoder.xyz/linear-regression/</link>
        <pubDate>Mon, 04 Dec 2017 08:44:05 +0100</pubDate>
        
        <guid>https://alphacoder.xyz/linear-regression/</guid>
        <description>Alpha Coder https://alphacoder.xyz/linear-regression/ -&lt;p&gt;What better way to learn than to do? I decided to implement from scratch some Machine Learning algorithms I’m learning as a way to better understand and internalize them. The algorithms include Linear Regression, K Nearest Neighbors, Support Vector Machine, Naive Bayes, K Means and Neural Networks.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*otatqOkzhxFl4LXtkbDmhQ.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ML Chops&lt;/strong&gt; is a series meant to explain the inner workings of these algorithms so you can get a pretty good grasp of how they work as well as know how to implement them yourself. We’ll be using the Python programming language.&lt;/p&gt;
&lt;p&gt;There’s a repo on my GitHub where all the code can be found. The url is: &lt;a href=&#34;https://github.com/nicholaskajoh/ML_Chops&#34;&gt;https://github.com/nicholaskajoh/ML_Chops&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;the-ml-chops-series&#34;&gt;The ML Chops series&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Linear Regression (this article)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/k-nearest-neighbors&#34;&gt;K Nearest Neighbors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/naive-bayes&#34;&gt;Naive Bayes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/support-vector-machine&#34;&gt;Support Vector Machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/k-means&#34;&gt;K Means&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;machine-learning&#34;&gt;Machine Learning&lt;/h1&gt;
&lt;p&gt;I’m assuming Machine Learning is not strange-ish to you. You may not really know how to implement or use Machine Learning algorithms, but you probably have some intuition about how it all works. You essentially “train” an algorithm/a model with data and then it’s able to make predictions, a lot of times very accurately.&lt;/p&gt;
&lt;p&gt;If all this sounds Mandarin, you should probably watch Josh Gordon’s explanation of what Machine Learning is.&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/cKxRvEZd3Mw&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;If you’re good at this point, then let’s talk Linear Regression.&lt;/p&gt;
&lt;h1 id=&#34;linear-regression-lr&#34;&gt;Linear Regression (LR)&lt;/h1&gt;
&lt;p&gt;Linear Regression is a simple model for predicting &lt;a href=&#34;https://www.mathsisfun.com/definitions/continuous-data.html&#34;&gt;continuous data&lt;/a&gt;/real-valued outputs. It’s commonly used in subjects like physics, chemistry and math. I first came across it in secondary school practical physics when I had to predict outputs using data recorded during experiments. Sound familiar? 🙄&lt;/p&gt;
&lt;p&gt;Imagine you want to predict the price per barrel of crude oil in Nigeria for tomorrow, next week or next month. With data on the prices over the years or past months, you can make a fairly accurate forecast of what the price would be using LR. Keep in mind that we’re assuming the data is correlated (positively or negatively). If it’s not correlated, then LR is probably not a good fit. We’ll talk about other algorithms that can handle nonlinear data later on in the series. For now we need to use linear data else, our predictions would be really really bad. We don’t want bad! 😒&lt;/p&gt;
&lt;p&gt;The graph below may help you visualize linear data better…&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*iC2R89E_DBY5fSuQApTwhg.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;Graph of linear data&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The first thing you probably noticed is how somewhat scattered the data points are. There’s a pattern though, and it’s linear. As the value on the horizontal axis increases, the value on the vertical axis [generally] increases as well (positive correlation).&lt;/p&gt;
&lt;h1 id=&#34;best-fitline&#34;&gt;Best fit line&lt;/h1&gt;
&lt;p&gt;There’s a green line that passes through some of the points on the graph. It’s called the &lt;strong&gt;line of best fit&lt;/strong&gt;. Ideally this line should pass through all the points. However there is some “error” in the data. This explains why there is some scatteredness in the plot.&lt;/p&gt;
&lt;p&gt;The line of best fit is the best possible line you can draw to fit the data. If the data had no errors, this line would pass through every point in the graph. The real world is not that perfect though. There’s always some degree of error. For instance, the price of crude oil generally increases year after year but not by a constant amount. It may increase $3 this year and $1 next year. As a result, we can’t know for sure how much it would cost in the near future, but we can make predictions given the best fit line. But how do we get the best fit line?&lt;/p&gt;
&lt;h1 id=&#34;equation-of-aline&#34;&gt;Equation of a line&lt;/h1&gt;
&lt;p&gt;Recall the equation of a straight line? It’s &lt;code&gt;y = mx + c&lt;/code&gt;. The best fit line is a straight line so we can use this equation to figure it out.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;x&lt;/em&gt; is the independent variable. In the case of the crude oil example, it’s a year (e.g 2001, 2002, 2003, …, 2010 etc).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;y&lt;/em&gt; is the dependent variable. This is the value we want to predict. Given the prices of oil from 2001 to 2010, we may want to predict the price in 2011, 2012 or even 2018.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;m&lt;/em&gt; is the slope of the line. It’s a number that measures its “steepness”. In other words, it is the change in &lt;em&gt;y&lt;/em&gt; for a unit change in &lt;em&gt;x&lt;/em&gt; along the line.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;c&lt;/em&gt; is the y intercept. That is, the point where the line crosses the vertical/y-axis.&lt;/p&gt;
&lt;p&gt;We know &lt;em&gt;x&lt;/em&gt;. We want to find &lt;em&gt;y&lt;/em&gt;. We just need to figure out what &lt;em&gt;m&lt;/em&gt; and &lt;em&gt;c&lt;/em&gt; is for the best fit line (of a given data set) to be able to make predictions… 🤔&lt;/p&gt;
&lt;p&gt;It turns out that there are formulas from which we can evaluate the slope, &lt;em&gt;m&lt;/em&gt; and y intercept, &lt;em&gt;c.&lt;/em&gt; Once we get the slope and y intercept, our model is ready!&lt;/p&gt;
&lt;p&gt;Mathematically, our LR model may look like this: &lt;code&gt;y = 2.1x + 1.4&lt;/code&gt; where m = 2.1 and c = 1.4&lt;/p&gt;
&lt;h1 id=&#34;slope&#34;&gt;Slope&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*vji1X_3xW3lZsXUY4Vf-cg.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;slope formula&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; the &lt;em&gt;bar&lt;/em&gt; symbol represents &lt;strong&gt;mean/average&lt;/strong&gt;. E.g “X bar” is the mean of the Xs in the dataset.&lt;/p&gt;
&lt;h1 id=&#34;intercept&#34;&gt;Intercept&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*MtVs1yxkMyl2MpK2Wystbg.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;y intercept formula&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;simple-example&#34;&gt;Simple example&lt;/h1&gt;
&lt;p&gt;Say we have the years 2001, 2002, 2003, &amp;hellip;, 2010 and oil prices 43.1, 45.2, 43.7, 49.0, 50.5, 53.7, 53.0, 56.8, 57.2, 60.0. We could come up with a table like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x (yrs)   1    2    3    4    5    6    7    8    9    10

y (in $)  43.1 45.2 43.7 49.0 50.5 53.7 53.0 56.8 57.2 60.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I used 1 to 10 to represent 2001 to 2010 so that calculations would be easier to comprehend. It doesn’t affect anything. You can use the years to do your calculation if that resonates with you. Keep in mind though that the difference of any two consecutive values of x must be 1.&lt;/p&gt;
&lt;p&gt;Using code, we can calculate the slope and intercept like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import numpy as np  
from statistics import mean

xs = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])  
ys = np.array([43.1, 45.2, 43.7, 49.0, 50.5, 53.7, 53.0, 56.8, 57.2, 60.0])

m = ((mean(xs) * mean(ys)) - mean(xs * ys)) / (mean(xs)**2 - mean(xs * xs))

c = mean(ys) - (m * mean(xs))
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;predict&#34;&gt;Predict&lt;/h1&gt;
&lt;p&gt;If we want to predict how much oil would cost in 2018, all we need to do is supply &lt;em&gt;x&lt;/em&gt; in our model. &lt;em&gt;x&lt;/em&gt; would be 18. Thus:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = 18  
y = m * x + c  
print(y)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;model-accuracy&#34;&gt;Model accuracy&lt;/h1&gt;
&lt;p&gt;Accuracy is very important to Machine Learning developers. Our LR model makes predictions. It’s of interest to us to know how accurate these predictions are. While 80% accuracy of a model that predicts the price of oil for me sounds good enough, it’s probably a deal breaker for my client who buys and sells oil. He’s probably looking for somewhere around 95 to 99.9%. 80% is too much risk!&lt;/p&gt;
&lt;p&gt;There are several ways to calculate how accurate a LR model is. We’re going to talk about one of them called R-squared. It’s a statistical measure of how close the data are to the fitted regression line/best fit line. It is also known as the coefficient of determination. With R-squared, we’re simply asking: &lt;em&gt;how good is the best fit line?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Of course, if the best fit line is not good enough, then it’s the data to blame (it’s the best fit line duh 😜). Regardless, it means the predictions made using the line would be less accurate.&lt;/p&gt;
&lt;p&gt;R-squared is given by the formula:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*HTeayn8hGYQzICFcYc3OdA.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;r squared&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;SS stands for &lt;em&gt;Sum of Squared error of&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;y hat line (y with the caret) is the &lt;em&gt;ys of the best fit line ( for each x)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;y bar is the &lt;em&gt;mean of the ys&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;To calculate the R-squared for a given model:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;best_fit_line = [(m * x) + c for x in xs]

SSy_hat = sum([y * y for y in (best_fit_line - ys)]) # y hat line  
SSy_mean = sum([y * y for y in [y - mean(ys) for y in ys]]) # mean of ys

r2 = 1 - (SSy_hat / SSy_mean)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The range of r2 is usually 0 to 1 so you can multiply it by 100 to get a percentage.&lt;/p&gt;
&lt;p&gt;Don’t forget to check out the repo for the complete Linear Regression code: &lt;a href=&#34;https://github.com/nicholaskajoh/ML_Chops/tree/master/linear-regression&#34;&gt;https://github.com/nicholaskajoh/ML_Chops/tree/master/linear-regression&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have any questions, concerns or suggestions, don’t hesitate to comment! 👍&lt;/p&gt;
- https://alphacoder.xyz/linear-regression/ - Copyright 2017 to ∞. Nicholas Kajoh. All rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>A responsive grid system with few lines of CSS</title>
        <link>https://alphacoder.xyz/responsive-grid-system/</link>
        <pubDate>Sun, 19 Nov 2017 20:07:00 +0000</pubDate>
        
        <guid>https://alphacoder.xyz/responsive-grid-system/</guid>
        <description>Alpha Coder https://alphacoder.xyz/responsive-grid-system/ -&lt;p&gt;How many times have you added Bootstrap to your project just for its grid system? Probably not enough times to think about learning how to create your own grid system. However, there are times when you need &lt;em&gt;something light&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;Say you’re learning a new framework or testing out some code and you want to throw in some grid love so that things look a little organized on the page. Would you rather include the heavyweight champ that is Bootstrap, or scribble a few lines of grid code?&lt;/p&gt;
&lt;p&gt;While adding Bootstrap may sound easier, you might be faced with the nightmare that is overriding classes. Nobody loves overriding the classes they don’t want/need, plus you’re now distracted from what you really want to accomplish. Besides, you don’t lose anything by learning how to write a grid system. In fact, it makes you understand and appreciate CSS libraries and better.&lt;/p&gt;
&lt;p&gt;There was this school project I had to work on. It was pretty basic, but I needed a grid system. I had already decided to build it from the ground up with only vanilla, so Bootstrap or Materialize was not an option. I had to learn how to write my own grid system. It turns out that it’s not difficult at all. In fact, I wrote a grid system with a few lines of CSS code.&lt;/p&gt;
&lt;p&gt;It’s important to note that there are several ways of building a grid system; each with its own quirks. It’s easy to forget that CSS 1.0 wasn’t made with grid in mind as the webosphere is now littered with millions of sites using layouts of all shapes and sizes.&lt;/p&gt;
&lt;p&gt;Devs cooked up various workarounds and hacks. They used &lt;strong&gt;tables&lt;/strong&gt; to create grids back in the day. More recently, they used &lt;strong&gt;floats&lt;/strong&gt;. Float grids sufficed until they didn’t. They are still in use today. However, &lt;strong&gt;flexbox&lt;/strong&gt; has replaced float grid systems on many sites online. Flexbox was made to solve the grid problem. Nevertheless, flexbox has it’s own limitations. The new kid on the block, &lt;strong&gt;grid layout&lt;/strong&gt;, was created to handle more complex systems that web apps of today demand.&lt;/p&gt;
&lt;p&gt;I used flexbox to create a simple grid system. Flexbox is great! It&amp;rsquo;s supported in major browsers and is easy to implement.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/nicholaskajoh/35702b2e0791c4329e80cde9d0d3e9ba.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;I don’t want get into the intricacies of flexbox. I’ll be reinventing the wheel by doing that. Instead I’ll point you to a resource that helped me wrap my head around it. Nonetheless, from the code, it’s relatively easy to figure out how everything kinda works. It’s basically some flexbox code and media queries for 3 view ports — mobile, tablet and desktop.&lt;/p&gt;
&lt;p&gt;Just add the following simple markup and you’re good to go.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;section&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;article&lt;/span&gt;&amp;gt;Content&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;article&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;aside&lt;/span&gt;&amp;gt;Sidebar&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;aside&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;section&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can always add a few more lines for other neat functionalities. If you feel you’re doing too much, it may be time to throw in a library or something. If you feel Bootstrap or any other UI library is overkill, there are a ton of CSS grid libraries. I don’t want to name names, but Google is your friend. A search would yield a ton of interesting results.&lt;/p&gt;
&lt;p&gt;Check out the repo for this tutorial: &lt;a href=&#34;https://github.com/nicholaskajoh/Simple-CSS-Grid&#34;&gt;https://github.com/nicholaskajoh/Simple-CSS-Grid&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also, you should totally read &lt;a href=&#34;https://css-tricks.com/snippets/css/a-guide-to-flexbox/&#34;&gt;Chris Coyier’s complete guide to flexbox&lt;/a&gt;. If you have the time, go through &lt;a href=&#34;https://css-tricks.com/snippets/css/complete-guide-grid/&#34;&gt;Chris House’ complete guide to grid&lt;/a&gt; as well.&lt;/p&gt;
- https://alphacoder.xyz/responsive-grid-system/ - Copyright 2017 to ∞. Nicholas Kajoh. All rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>Build a Facebook clone from scratch with PHP — Part 6</title>
        <link>https://alphacoder.xyz/facebook-clone-6/</link>
        <pubDate>Sat, 23 Sep 2017 09:07:23 +0100</pubDate>
        
        <guid>https://alphacoder.xyz/facebook-clone-6/</guid>
        <description>Alpha Coder https://alphacoder.xyz/facebook-clone-6/ -&lt;h1 id=&#34;all-parts&#34;&gt;All parts&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-1&#34;&gt;Build a Facebook clone from scratch with PHP — Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-2&#34;&gt;Build a Facebook clone from scratch with PHP — Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-3&#34;&gt;Build a Facebook clone from scratch with PHP — Part 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-4&#34;&gt;Build a Facebook clone from scratch with PHP — Part 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-5&#34;&gt;Build a Facebook clone from scratch with PHP — Part 5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Build a Facebook clone from scratch with PHP — Part 6 (this article)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alphacoder.xyz/facebook-clone-7&#34;&gt;Build a Facebook clone from scratch with PHP — Part 7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Relationships are the point of social networks. For real! Social networks like Facebook enable us connect with different people far and near and to share in their life and experiences. Facebook uses the &amp;ldquo;friend&amp;rdquo; model of relationships (I&amp;rsquo;m your friend; you&amp;rsquo;re my friend). There are other models like the popular &amp;ldquo;following-follower&amp;rdquo; model. Implementing relationships can easily get complex. We want to keep things simple though so we&amp;rsquo;ll explore a very basic approach. Also, we won&amp;rsquo;t be exploiting the relationship model we&amp;rsquo;ll be creating in the workings of our application. Again, it&amp;rsquo;s to keep things simple.&lt;/p&gt;
&lt;h1 id=&#34;friend-relationships&#34;&gt;Friend relationships&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;I&amp;rsquo;m your friend and you&amp;rsquo;re my friend&lt;/em&gt;. That&amp;rsquo;s the idea for the friend relationship model. It starts by making a friend request. The user at the receiving end may choose to accept or decline the request. If they accept, the user who made the request is added to their friends&amp;rsquo; list and vice versa [or so] thus a relationship exists between the two of them. If a request is declined, nothing happens, basically.&lt;/p&gt;
&lt;p&gt;Without further ado, let&amp;rsquo;s implement something of that sort for FaceClone.&lt;/p&gt;
&lt;h1 id=&#34;list-users&#34;&gt;List users&lt;/h1&gt;
&lt;p&gt;We want to provide a list of FaceClone users to a user so that they can add any of them as friends. The right sidebar of the home.php template has an &amp;ldquo;add friend&amp;rdquo; panel. Let&amp;rsquo;s use it. All we need do is list out all our users.&lt;/p&gt;
&lt;p&gt;In the &amp;ldquo;add friend&amp;rdquo; section, we&amp;rsquo;ll have…&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;h4&amp;gt;add friend&amp;lt;/h4&amp;gt;
&amp;lt;?php
    $sql = &amp;quot;SELECT id, username, (SELECT COUNT(*) FROM friends WHERE friends.user_id = users.id AND friends.friend_id = {$_SESSION[&#39;user_id&#39;]}) AS is_friend FROM users WHERE id != {$_SESSION[&#39;user_id&#39;]} HAVING is_friend = 0&amp;quot;;
    $result = $conn-&amp;gt;query($sql);

    if ($result-&amp;gt;num_rows &amp;gt; 0) {
        ?&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;?php
    
        while($fc_user = $result-&amp;gt;fetch_assoc()) {
            ?&amp;gt;&amp;lt;li&amp;gt;
                &amp;lt;a href=&amp;quot;profile.php?username=&amp;lt;?php echo $fc_user[&#39;username&#39;]; ?&amp;gt;&amp;quot;&amp;gt;
                    &amp;lt;?php echo $fc_user[&#39;username&#39;]; ?&amp;gt;
                &amp;lt;/a&amp;gt; 
                &amp;lt;a href=&amp;quot;php/add-friend.php?uid=&amp;lt;?php echo $fc_user[&#39;id&#39;]; ?&amp;gt;&amp;quot;&amp;gt;[add]&amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;&amp;lt;?php
        }
    
        ?&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;?php
    } else {
        ?&amp;gt;&amp;lt;p class=&amp;quot;text-center&amp;quot;&amp;gt;No users to add!&amp;lt;/p&amp;gt;&amp;lt;?php
    }
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that&amp;rsquo;s some code! Let&amp;rsquo;s break it down bit by bit. We want to list FaceClone users. That&amp;rsquo;s the goal. So why do we have a long and &amp;ldquo;complex&amp;rdquo; SQL query? Can&amp;rsquo;t we just use &lt;code&gt;SELECT * FROM users&lt;/code&gt;? We can. But it&amp;rsquo;s not that simple. There are 2 constraints we need to set. First, users that are already friends with the current user (who is looking to get new friends) shouldn&amp;rsquo;t be displayed on the list. That makes sense right? Secondly, the current user shouldn&amp;rsquo;t be on the list. You shouldn&amp;rsquo;t be able to friend yourself, should you? There are other constraints that can be added to make things more fluid as well as &amp;ldquo;waterproof&amp;rdquo;, but considering them would just make things more complicated so we&amp;rsquo;ll just leave things as they are.&lt;/p&gt;
&lt;p&gt;To achieve the first constraint, we added a column to the users table results called &lt;code&gt;is_friend&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(SELECT COUNT(*) FROM friends WHERE friends.user_id = users.id AND friends.friend_id = {$_SESSION[&#39;user_id&#39;]}) AS is_friend
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This column would contain a 0 or 1 for each user record. 0 means not a friend of the current user while 1 means [already] a friend. Using the &lt;code&gt;HAVING&lt;/code&gt; keyword, we exclude records with &lt;code&gt;is_friend&lt;/code&gt; value of 1. That is&amp;hellip;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;HAVING is_friend = 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The second constraint is achieved using the &lt;code&gt;WHERE&lt;/code&gt; clause to exclude the current user from the list thus:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;WHERE id != {$_SESSION[&#39;user_id&#39;]}
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;send-a-friendrequest&#34;&gt;Send a friend request&lt;/h1&gt;
&lt;p&gt;In the users list, there&amp;rsquo;s an add friend link beside each username.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;php/add-friend.php?uid=&amp;lt;?php echo $fc_user[&#39;id&#39;]; ?&amp;gt;&amp;quot;&amp;gt;[add]&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The links lead to a GET endpoint &lt;code&gt;php/add-friend.php?uid=&lt;/code&gt;. Go ahead, as always and create a file in the php folder called add-friend.php with the following code&amp;hellip;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
    require_once &amp;quot;../functions.php&amp;quot;;
    db_connect();
    $sql = &amp;quot;INSERT INTO friend_requests (user_id, friend_id) VALUES (?, ?)&amp;quot;;
    $statement = $conn-&amp;gt;prepare($sql);
    $statement-&amp;gt;bind_param(&#39;ii&#39;, $_SESSION[&#39;user_id&#39;], $_GET[&#39;uid&#39;]);
    if ($statement-&amp;gt;execute()) {
        redirect_to(&amp;quot;/home.php?request_sent=true&amp;quot;);
    } else {
        echo &amp;quot;Error: &amp;quot; . $conn-&amp;gt;error;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With a supplied user id in the GET request, we can create a new friend request. The user to whom the request is being made is the friend so their id is stored in &lt;code&gt;friend_id&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;acceptdecline-friendrequests&#34;&gt;Accept/decline friend requests&lt;/h1&gt;
&lt;p&gt;The user who is requested should be able to see who requested them and choose whether to accept or decline. The left sidebar in home.php provides such a facility. With a little padding, we could arrive at something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;h4&amp;gt;friend requests&amp;lt;/h4&amp;gt;
&amp;lt;?php
    $sql = &amp;quot;SELECT * FROM friend_requests WHERE friend_id = {$_SESSION[&#39;user_id&#39;]}&amp;quot;;
    $result = $conn-&amp;gt;query($sql);

    if ($result-&amp;gt;num_rows &amp;gt; 0) {
        ?&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;?php

        while($f_request = $result-&amp;gt;fetch_assoc()) {
            ?&amp;gt;&amp;lt;li&amp;gt;&amp;lt;?php
                
            $u_sql = &amp;quot;SELECT * FROM users WHERE id = {$f_request[&#39;user_id&#39;]} LIMIT 1&amp;quot;;
            $u_result = $conn-&amp;gt;query($u_sql);
            $fr_user = $u_result-&amp;gt;fetch_assoc();
            
            ?&amp;gt;&amp;lt;a href=&amp;quot;profile.php?username=&amp;lt;?php echo $fr_user[&#39;username&#39;]; ?&amp;gt;&amp;quot;&amp;gt;
                &amp;lt;?php echo $fr_user[&#39;username&#39;]; ?&amp;gt;
            &amp;lt;/a&amp;gt; 
                
            &amp;lt;a class=&amp;quot;text-success&amp;quot; href=&amp;quot;php/accept-request.php?uid=&amp;lt;?php echo $fr_user[&#39;id&#39;]; ?&amp;gt;&amp;quot;&amp;gt;
                [accept]
            &amp;lt;/a&amp;gt; 
                
            &amp;lt;a class=&amp;quot;text-danger&amp;quot; href=&amp;quot;php/remove-request.php?uid=&amp;lt;?php echo $fr_user[&#39;id&#39;]; ?&amp;gt;&amp;quot;&amp;gt;
                [decline]
            &amp;lt;/a&amp;gt;

            &amp;lt;/li&amp;gt;&amp;lt;?php
        }

        ?&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;?php
    } else {
        ?&amp;gt;&amp;lt;p class=&amp;quot;text-center&amp;quot;&amp;gt;No friend requests!&amp;lt;/p&amp;gt;&amp;lt;?php
    }
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the snippet above, there are two sets of queries. The first pulls out all the friend requests to the current user. The second fetches data (of the requesting user) for each friend request.&lt;/p&gt;
&lt;p&gt;There are two links beside each user&amp;rsquo;s username. One to accept and the other to decline. They both lead to different end points. The former to &lt;code&gt;php/accept-request.php?uid=&lt;/code&gt; and the latter to &lt;code&gt;php/remove-request.php?uid=&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Remove request:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
    require_once &amp;quot;../functions.php&amp;quot;;
    db_connect();
    $sql = &amp;quot;DELETE FROM friend_requests WHERE user_id = ?&amp;quot;;
    $statement = $conn-&amp;gt;prepare($sql);
    $statement-&amp;gt;bind_param(&#39;i&#39;, $_GET[&#39;uid&#39;]);
    if ($statement-&amp;gt;execute()) {
        redirect_to(&amp;quot;/profile.php?username=&amp;quot; . $_SESSION[&#39;user_username&#39;]);
    } else {
        echo &amp;quot;Error: &amp;quot; . $conn-&amp;gt;error;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Accept request:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
    require_once &amp;quot;../functions.php&amp;quot;;
    db_connect();
    // add users to friends table
    $statement = $conn-&amp;gt;prepare(&amp;quot;INSERT INTO friends (user_id, friend_id) VALUES (?, ?), (?, ?)&amp;quot;);
    $statement-&amp;gt;bind_param(&#39;iiii&#39;, $_SESSION[&#39;user_id&#39;], $_GET[&#39;uid&#39;], $_GET[&#39;uid&#39;], $_SESSION[&#39;user_id&#39;]);
    // remove friend request
    if ($statement-&amp;gt;execute()) {
        redirect_to(&amp;quot;/php/remove-request.php?uid=&amp;quot; . $_GET[&#39;uid&#39;]);
    } else {
        echo &amp;quot;Error: &amp;quot; . $conn-&amp;gt;error;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Friendship is two-sided. I am your and you are my friend. As such, in accept-request.php we insert two records. In one, the current user is the friend and in the other the requesting user is the friend. While it seems like unnecessary duplication, it proves easier to manage. Also notice we use remove-request.php in accept-request.php to delete a friend request once two users have been added as friends.&lt;/p&gt;
&lt;h1 id=&#34;unfriend-user&#34;&gt;Unfriend user&lt;/h1&gt;
&lt;p&gt;Unfriending is as simple as removing the records in the friends table that connects two users.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
    require_once &amp;quot;../functions.php&amp;quot;;
    db_connect();
    $sql = &amp;quot;DELETE FROM friends WHERE (user_id = ? AND friend_id = ?) OR (user_id = ? AND friend_id = ?)&amp;quot;;
    $statement = $conn-&amp;gt;prepare($sql);
    $statement-&amp;gt;bind_param(&#39;iiii&#39;, $_GET[&#39;uid&#39;], $_SESSION[&#39;user_id&#39;], $_SESSION[&#39;user_id&#39;], $_GET[&#39;uid&#39;]);
    if ($statement-&amp;gt;execute()) {
        redirect_to(&amp;quot;/profile.php?username=&amp;quot; . $_SESSION[&#39;user_username&#39;]);
    } else {
        echo &amp;quot;Error: &amp;quot; . $conn-&amp;gt;error;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Viola! We&amp;rsquo;ve built friend relationships into FaceClone!&lt;/p&gt;
&lt;p&gt;Again, we&amp;rsquo;re not exploiting the relationships we just created, to keep things simple. But it&amp;rsquo;s pretty straightforward to do so. For example, instead of displaying all FaceClone posts on a user&amp;rsquo;s feed, we could display only posts from their friends. We could also make some of a user&amp;rsquo;s profile information only available to their friends. If we had a chat feature, we could allow only friends chat with each other. As a social network grows, this would make more sense. So if you&amp;rsquo;re working on your social network app after this series (I totally encourage it), keep in mind what the relationships you create would imply.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;At this point, I must say we are done; at least at the most basic level. So congrats for following through!!! Building a social networking app, especially one like Facebook, is a never-ending journey. There&amp;rsquo;s always something to add to make it easier, faster and/or better to use.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll be deploying the FaceClone web app online for anyone to use in the next and last part of this series. Be sure to read it!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The final code for this part is contained in my &lt;a href=&#34;https://github.com/nicholaskajoh/faceclone&#34;&gt;FaceClone repo&lt;/a&gt;. Visit the link and click on the part-6 folder to see progress made so far.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Next: &lt;a href=&#34;https://alphacoder.xyz/facebook-clone-7&#34;&gt;Build a Facebook clone from scratch with PHP — Part 7&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Previous: &lt;a href=&#34;https://alphacoder.xyz/facebook-clone-5&#34;&gt;Build a Facebook clone from scratch with PHP — Part 5&lt;/a&gt;.&lt;/p&gt;
- https://alphacoder.xyz/facebook-clone-6/ - Copyright 2017 to ∞. Nicholas Kajoh. All rights reserved.</description>
        </item>
    
    
  </channel>
</rss> 