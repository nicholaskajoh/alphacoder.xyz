<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web Development on Alpha Coder</title>
    <link>https://alphacoder.xyz/tag/web-development/</link>
    <description>Recent content in Web Development on Alpha Coder</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright 2017 to ∞. Nicholas Kajoh. All rights reserved.</copyright>
    <lastBuildDate>Sat, 27 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://alphacoder.xyz/tag/web-development/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Web app scaling techniques</title>
      <link>https://alphacoder.xyz/web-app-scaling-techniques/</link>
      <pubDate>Sat, 27 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://alphacoder.xyz/web-app-scaling-techniques/</guid>
      <description>Several moons ago, I wrote an article about techniques for scaling databases. Today, we’ll be looking at the app side of things. As with databases, you want to develop your application with scalability in mind so that when the time comes to increase capacity, the process is straightforward and seamless. Having a clear pathway for building a higher capacity and robust system also helps prevent over-engineering and premature optimization, so it’s important to have the steps and process for evolving your systems to handle large workloads.</description>
    </item>
    
    <item>
      <title>How to configure wildcard subdomains</title>
      <link>https://alphacoder.xyz/how-to-configure-wildcard-subdomains/</link>
      <pubDate>Tue, 02 Apr 2019 04:08:11 +0000</pubDate>
      
      <guid>https://alphacoder.xyz/how-to-configure-wildcard-subdomains/</guid>
      <description>Some web apps, especially those for the enterprise, give every organization, team or user their own subdomain such as team-name.awesomeapp.com or org-name.beta.awesomeapp.com. These subdomains are variable, meaning that they are not predefined and can contain any valid domain name characters.
To configure wildcard subdomains, all you need to do is add a &amp;ldquo;match all&amp;rdquo; CNAME record for your domain. The way a given subdomain is handled is totally up to your application.</description>
    </item>
    
    <item>
      <title>Check domain availability from your terminal</title>
      <link>https://alphacoder.xyz/check-domain-availability-from-your-terminal/</link>
      <pubDate>Mon, 10 Dec 2018 20:46:00 +0000</pubDate>
      
      <guid>https://alphacoder.xyz/check-domain-availability-from-your-terminal/</guid>
      <description>I have a theory — that domain registrars share your search queries with resellers. Countless times I’ve had the bad experience of searching for a domain to see its availability then finding out a day/a few days later that it has been bought or made premium. Sure, it’s very possible that it may have been legitly purchased by someone else. But I’ve been in a couple forums where people have complained about the same thing.</description>
    </item>
    
    <item>
      <title>Understanding modern front-end development</title>
      <link>https://alphacoder.xyz/understanding-modern-front-end-development/</link>
      <pubDate>Fri, 09 Nov 2018 13:06:00 +0000</pubDate>
      
      <guid>https://alphacoder.xyz/understanding-modern-front-end-development/</guid>
      <description>It can be overwhelming especially for newbies, to work with modern front-end tools as development processes have increased in complexity over the years. As a mostly back-end web developer, I’ve had my share of confusion and frustration trying to wrap my head around how things work. This article hopes to give you a big picture/bird’s eye view of how some of the more common tools used by front-end developers today fit together and the problems they solve/are trying to solve.</description>
    </item>
    
    <item>
      <title>Dockerizing Django in development and production</title>
      <link>https://alphacoder.xyz/dockerizing-django/</link>
      <pubDate>Wed, 15 Aug 2018 12:54:00 +0000</pubDate>
      
      <guid>https://alphacoder.xyz/dockerizing-django/</guid>
      <description>Setting up Docker can sometimes be confusing. There are many little pieces that need to come together for everything to work as expected. Outlined in this post is a simple Docker setup you can use for your Django projects in development and production environments.
TL;DR: Sample project You can check out the code on GitHub.
Dockerfile FROM python:3.6-alpine RUN apk --update add \ build-base \ postgresql \ postgresql-dev \ libpq \ # pillow dependencies jpeg-dev \ zlib-dev RUN mkdir /www WORKDIR /www COPY requirements.</description>
    </item>
    
    <item>
      <title>How to run multiple apps on one server using Docker and Traefik</title>
      <link>https://alphacoder.xyz/multiple-apps-one-server-with-docker-and-traefik/</link>
      <pubDate>Thu, 28 Jun 2018 17:41:00 +0000</pubDate>
      
      <guid>https://alphacoder.xyz/multiple-apps-one-server-with-docker-and-traefik/</guid>
      <description>Running multiple apps on a single machine has never been easier! In this tutorial, I’ll show you how to run 3 apps on one server using Docker and Traefik.
Use case Say you’re low on cash and can only rent one server, you can run your website, blog and SaaS app on the same machine (what we’ll do in this tutorial). Or you can run an API (back-end) and SPA (front-end).</description>
    </item>
    
    <item>
      <title>How to scale an app horizontally using a load balancer</title>
      <link>https://alphacoder.xyz/scale-an-app-horizontally-using-a-load-balancer/</link>
      <pubDate>Wed, 13 Jun 2018 19:59:00 +0000</pubDate>
      
      <guid>https://alphacoder.xyz/scale-an-app-horizontally-using-a-load-balancer/</guid>
      <description>As your app grows (by getting more traffic, users, data etc), the need to increase its capacity or scale arises.
One way to scale is by optimizing your code. That may involve removing unnecessary code, using better algorithms or even using a faster programming language. While it’s important to optimize the code in your app, there’s only so much the machine in which your app runs can do. The next logical step is to increase your server capacity.</description>
    </item>
    
    <item>
      <title>Deploy your React-Django app on Heroku</title>
      <link>https://alphacoder.xyz/deploy-react-django-app-on-heroku/</link>
      <pubDate>Tue, 30 Jan 2018 11:52:00 +0000</pubDate>
      
      <guid>https://alphacoder.xyz/deploy-react-django-app-on-heroku/</guid>
      <description>This is a follow up to my post on setting up a React-Django web app. You can take a quick glance if you’ve not seen it yet.
TL;DR: The setup is deployed at http://react-django.herokuapp.com (nothing much there actually) and the code at https://github.com/nicholaskajoh/React-Django.
We’re going to be deploying the app we setup in the previous post on Heroku. Heroku is a popular cloud hosting platform (PaaS) and offers a generous free tier which we’ll be using.</description>
    </item>
    
    <item>
      <title>Here’s a dead simple React-Django setup for your next project</title>
      <link>https://alphacoder.xyz/dead-simple-react-django-setup/</link>
      <pubDate>Thu, 11 Jan 2018 14:39:00 +0000</pubDate>
      
      <guid>https://alphacoder.xyz/dead-simple-react-django-setup/</guid>
      <description>There are several reasons why you might not want to have separate code bases for the front and back end of your app. For one, the project becomes more portable since it can live in one repository/folder. Then again, everything can be deployed on just one server.
TL;DR: https://github.com/nicholaskajoh/React-Django.
Here’s a simple setup for creating a React-Django project. With just a few tweaks, you can swap out React for Angular or Vue.</description>
    </item>
    
    <item>
      <title>Build a Facebook clone from scratch with PHP — Part 7</title>
      <link>https://alphacoder.xyz/facebook-clone-7/</link>
      <pubDate>Sat, 09 Dec 2017 09:07:25 +0100</pubDate>
      
      <guid>https://alphacoder.xyz/facebook-clone-7/</guid>
      <description>All parts Build a Facebook clone from scratch with PHP — Part 1 Build a Facebook clone from scratch with PHP — Part 2 Build a Facebook clone from scratch with PHP — Part 3 Build a Facebook clone from scratch with PHP — Part 4 Build a Facebook clone from scratch with PHP — Part 5 Build a Facebook clone from scratch with PHP — Part 6 Build a Facebook clone from scratch with PHP — Part 7 (this article) It&amp;rsquo;s time to deploy FaceClone and invite friends to test it out!</description>
    </item>
    
    <item>
      <title>A responsive grid system with few lines of CSS</title>
      <link>https://alphacoder.xyz/responsive-grid-system/</link>
      <pubDate>Sun, 19 Nov 2017 20:07:00 +0000</pubDate>
      
      <guid>https://alphacoder.xyz/responsive-grid-system/</guid>
      <description>How many times have you added Bootstrap to your project just for its grid system? Probably not enough times to think about learning how to create your own grid system. However, there are times when you need something light!
Say you’re learning a new framework or testing out some code and you want to throw in some grid love so that things look a little organized on the page. Would you rather include the heavyweight champ that is Bootstrap, or scribble a few lines of grid code?</description>
    </item>
    
    <item>
      <title>Build a Facebook clone from scratch with PHP — Part 6</title>
      <link>https://alphacoder.xyz/facebook-clone-6/</link>
      <pubDate>Sat, 23 Sep 2017 09:07:23 +0100</pubDate>
      
      <guid>https://alphacoder.xyz/facebook-clone-6/</guid>
      <description>All parts Build a Facebook clone from scratch with PHP — Part 1 Build a Facebook clone from scratch with PHP — Part 2 Build a Facebook clone from scratch with PHP — Part 3 Build a Facebook clone from scratch with PHP — Part 4 Build a Facebook clone from scratch with PHP — Part 5 Build a Facebook clone from scratch with PHP — Part 6 (this article) Build a Facebook clone from scratch with PHP — Part 7 Relationships are the point of social networks.</description>
    </item>
    
    <item>
      <title>Build a Facebook clone from scratch with PHP — Part 5</title>
      <link>https://alphacoder.xyz/facebook-clone-5/</link>
      <pubDate>Wed, 20 Sep 2017 09:07:20 +0100</pubDate>
      
      <guid>https://alphacoder.xyz/facebook-clone-5/</guid>
      <description>All parts Build a Facebook clone from scratch with PHP — Part 1 Build a Facebook clone from scratch with PHP — Part 2 Build a Facebook clone from scratch with PHP — Part 3 Build a Facebook clone from scratch with PHP — Part 4 Build a Facebook clone from scratch with PHP — Part 5 (this article) Build a Facebook clone from scratch with PHP — Part 6 Build a Facebook clone from scratch with PHP — Part 7 Every Facebook user has a profile.</description>
    </item>
    
    <item>
      <title>Build a Facebook clone from scratch with PHP — Part 4</title>
      <link>https://alphacoder.xyz/facebook-clone-4/</link>
      <pubDate>Thu, 14 Sep 2017 09:07:14 +0100</pubDate>
      
      <guid>https://alphacoder.xyz/facebook-clone-4/</guid>
      <description>All parts Build a Facebook clone from scratch with PHP — Part 1 Build a Facebook clone from scratch with PHP — Part 2 Build a Facebook clone from scratch with PHP — Part 3 Build a Facebook clone from scratch with PHP — Part 4 (this article) Build a Facebook clone from scratch with PHP — Part 5 Build a Facebook clone from scratch with PHP — Part 6 Build a Facebook clone from scratch with PHP — Part 7 Users are at the center of any application.</description>
    </item>
    
    <item>
      <title>Build a Facebook clone from scratch with PHP — Part 3</title>
      <link>https://alphacoder.xyz/facebook-clone-3/</link>
      <pubDate>Mon, 17 Jul 2017 08:35:09 +0100</pubDate>
      
      <guid>https://alphacoder.xyz/facebook-clone-3/</guid>
      <description>All parts Build a Facebook clone from scratch with PHP — Part 1 Build a Facebook clone from scratch with PHP — Part 2 Build a Facebook clone from scratch with PHP — Part 3 (this article) Build a Facebook clone from scratch with PHP — Part 4 Build a Facebook clone from scratch with PHP — Part 5 Build a Facebook clone from scratch with PHP — Part 6 Build a Facebook clone from scratch with PHP — Part 7 Posts are the heart and soul of Facebook.</description>
    </item>
    
    <item>
      <title>Build a Facebook clone from scratch with PHP — Part 2</title>
      <link>https://alphacoder.xyz/facebook-clone-2/</link>
      <pubDate>Sat, 17 Jun 2017 05:53:39 +0100</pubDate>
      
      <guid>https://alphacoder.xyz/facebook-clone-2/</guid>
      <description>All parts Build a Facebook clone from scratch with PHP — Part 1 Build a Facebook clone from scratch with PHP — Part 2 (this article) Build a Facebook clone from scratch with PHP — Part 3 Build a Facebook clone from scratch with PHP — Part 4 Build a Facebook clone from scratch with PHP — Part 5 Build a Facebook clone from scratch with PHP — Part 6 Build a Facebook clone from scratch with PHP — Part 7 A little about PHP and MySQL So in part 1, we didn&amp;rsquo;t get to talk about PHP as we should have because we were all about the FaceClone template.</description>
    </item>
    
    <item>
      <title>Build a Facebook clone from scratch with PHP — Part 1</title>
      <link>https://alphacoder.xyz/facebook-clone-1/</link>
      <pubDate>Sun, 11 Jun 2017 01:22:37 +0100</pubDate>
      
      <guid>https://alphacoder.xyz/facebook-clone-1/</guid>
      <description>In this post through a couple others that would follow, we&amp;rsquo;re going to be building our own Facebook (oh yeah!). Brace yourself. It&amp;rsquo;s going to be one hell of an exciting ride!
All parts Build a Facebook clone from scratch with PHP — Part 1 (this article) Build a Facebook clone from scratch with PHP — Part 2 Build a Facebook clone from scratch with PHP — Part 3 Build a Facebook clone from scratch with PHP — Part 4 Build a Facebook clone from scratch with PHP — Part 5 Build a Facebook clone from scratch with PHP — Part 6 Build a Facebook clone from scratch with PHP — Part 7 We&amp;rsquo;re making Facebook?</description>
    </item>
    
    <item>
      <title>HTML, CSS and Javascript as fast as possible</title>
      <link>https://alphacoder.xyz/html-css-js/</link>
      <pubDate>Wed, 07 Jun 2017 21:48:21 +0100</pubDate>
      
      <guid>https://alphacoder.xyz/html-css-js/</guid>
      <description>This post is a prequel to a series of posts on building a Facebook clone with PHP from scratch authored by yours truly. It&amp;rsquo;s intended to give you an overview of HTML, CSS and Javascript if you have little/zero knowledge of any or all of them.
HTML, CSS and Javascript are front-end languages i.e they run on the client (your user&amp;rsquo;s device/browser). HTML is a templating language. CSS helps you style HTML and Javascript is &amp;ldquo;an object-oriented computer programming language commonly used to create interactive effects within web browsers.</description>
    </item>
    
    <item>
      <title>Server-side form validation from A to Z with Sails.js</title>
      <link>https://alphacoder.xyz/sailsjs-form-validation/</link>
      <pubDate>Fri, 26 May 2017 23:06:50 +0100</pubDate>
      
      <guid>https://alphacoder.xyz/sailsjs-form-validation/</guid>
      <description>NB: This tutorial is meant for version 0.12 of Sails.js. Version 1 introduced many breaking changes, including a rewrite of the error handling mechanism, so the code in this tutorial will not work with it.
TL;DR: https://github.com/nicholaskajoh/sails-form-validation.
Data validation is a very essential part of any API/web app. Client-side validation is meant to guide a user &amp;ldquo;in real-time&amp;rdquo; as they try to feed your backend with much needed data, but that&amp;rsquo;s not enough.</description>
    </item>
    
    <item>
      <title>Lazy load your content with Django and jQuery</title>
      <link>https://alphacoder.xyz/lazy-loading-with-django-and-jquery/</link>
      <pubDate>Sun, 26 Feb 2017 05:43:00 +0000</pubDate>
      
      <guid>https://alphacoder.xyz/lazy-loading-with-django-and-jquery/</guid>
      <description>Outlined in this tutorial is a simple way to lazy load content using Django’s built-in pagination and the jQuery library. The code samples shown below are for paginating posts in a blog application.
Templates Create 2 templates, index.html and posts.html.
index.html
&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; // A CSRF token is required when making post requests in Django // To be used for making AJAX requests in script.js window.CSRF_TOKEN = &amp;#34;{{ csrf_token }}&amp;#34;; &amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h2&amp;gt;My Blog Posts&amp;lt;/h2&amp;gt; &amp;lt;div id=&amp;#34;posts&amp;#34;&amp;gt;{% include &amp;#39;myapp/posts.</description>
    </item>
    
  </channel>
</rss>
