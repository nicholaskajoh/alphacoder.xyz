<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Databases on Alpha Coder</title>
    <link>https://alphacoder.xyz/tag/databases/</link>
    <description>Recent content in Databases on Alpha Coder</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright 2017 to ∞. Nicholas Kajoh. All rights reserved.</copyright>
    <lastBuildDate>Sun, 07 Jun 2020 11:46:24 +0000</lastBuildDate><atom:link href="https://alphacoder.xyz/tag/databases/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Database scaling techniques</title>
      <link>https://alphacoder.xyz/database-scaling-techniques/</link>
      <pubDate>Sun, 07 Jun 2020 11:46:24 +0000</pubDate>
      
      <guid>https://alphacoder.xyz/database-scaling-techniques/</guid>
      <description>Over the years, I&amp;rsquo;ve had an unusual interest in techniques for scaling databases to meet high demands in terms of performance and reliability. I&amp;rsquo;m not exactly a fan of database administration but I&amp;rsquo;ve always had the anxiety that a design decision I&amp;rsquo;m making now will come back to haunt me in future. I quickly learned that trying to setup a system that can handle, say, a million users when one has only a thousand is a waste of time and resources.</description>
    </item>
    
    <item>
      <title>Database denormalization</title>
      <link>https://alphacoder.xyz/database-denormalization/</link>
      <pubDate>Fri, 05 Jun 2020 13:46:02 +0000</pubDate>
      
      <guid>https://alphacoder.xyz/database-denormalization/</guid>
      <description>Normalization is a vital part of database schema design. The goal is to structure a relational database so as to reduce redundancy and improve the integrity of data. Given this understanding, denormalization sounds rather counter-intuitive. Why would one want to make a database &amp;ldquo;less normalized&amp;rdquo;?
Well, it turns out that normalization comes at a performance cost for DB read operations. This is just fine for regular applications. However, read-heavy apps start to break at scale under this setup due to resource-intensive SQL queries involving joins, subqueries and the like.</description>
    </item>
    
    <item>
      <title>How to connect to a host&#39;s database from inside a Docker container</title>
      <link>https://alphacoder.xyz/connect-to-host-database-from-docker-container/</link>
      <pubDate>Sun, 01 Sep 2019 06:29:54 +0100</pubDate>
      
      <guid>https://alphacoder.xyz/connect-to-host-database-from-docker-container/</guid>
      <description>There are several ways to interact with a DB when developing using Docker:
Connect to an online DB instance. Connect to a local DB running in another container. Connect to a local DB running on a host machine (e.g your laptop). The first option can be easy and fast to setup i.e if you&amp;rsquo;re using a managed DB service. But these conveniences come at a monetary cost. Plus, you won&amp;rsquo;t be able to develop without an internet connection.</description>
    </item>
    
    <item>
      <title>Adminer — a simple GUI client for any DB</title>
      <link>https://alphacoder.xyz/adminer-a-simple-gui-client-for-any-db/</link>
      <pubDate>Mon, 04 Mar 2019 06:39:01 +0000</pubDate>
      
      <guid>https://alphacoder.xyz/adminer-a-simple-gui-client-for-any-db/</guid>
      <description>In my search for a good database GUI client for PostgreSQL, I came across a light-weight and elegant GUI client called Adminer. Adminer is a is a full-featured database management tool built with PHP.
Before Adminer, I used pgAdmin III. I hoped it&amp;rsquo;d be similar to PHPMyAdmin but it wasn&amp;rsquo;t nearly as good in terms of the user interface and functionality. I found it difficult to navigate and had to write queries to perform even basic tasks.</description>
    </item>
    
  </channel>
</rss>
