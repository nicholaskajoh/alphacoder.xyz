<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Django on Alpha Coder</title>
    <link>http://alphacoder.xyz/tag/django/</link>
    <description>Recent content in Django on Alpha Coder</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>© Nicholas Kajoh</copyright>
    <lastBuildDate>Wed, 15 Aug 2018 12:54:00 +0000</lastBuildDate>
    
	<atom:link href="http://alphacoder.xyz/tag/django/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dockerizing Django in development and production</title>
      <link>http://alphacoder.xyz/dockerizing-django/</link>
      <pubDate>Wed, 15 Aug 2018 12:54:00 +0000</pubDate>
      
      <guid>http://alphacoder.xyz/dockerizing-django/</guid>
      <description>Setting up Docker can sometimes be confusing. There are many little pieces that need to come together for everything to work as expected. Outlined in this post is a simple Docker setup you can use for your Django projects in development and production environments.
TL;DR: Sample project You can check out the code on GitHub.
Dockerfile 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  FROMpython:3.</description>
    </item>
    
    <item>
      <title>Image upload with Django and Cloudinary</title>
      <link>http://alphacoder.xyz/image-upload-with-django-and-cloudinary/</link>
      <pubDate>Sun, 18 Feb 2018 08:50:00 +0000</pubDate>
      
      <guid>http://alphacoder.xyz/image-upload-with-django-and-cloudinary/</guid>
      <description>Managing files/images can be a hassle. It can be a real pain to have to deal with uploads, storage, manipulation, administration and delivery of media content in every project you start/or are involved in.
Luckily, there are cloud platforms that take away the stress of all that, allowing you to ship faster and deliver your product(s) at scale. Cloudinary is one of such platforms. It tags itself as the media management platform for web and mobile developers — an end-to-end solution for all your image and video needs.</description>
    </item>
    
    <item>
      <title>Deploy your React-Django app on Heroku</title>
      <link>http://alphacoder.xyz/deploy-react-django-app-on-heroku/</link>
      <pubDate>Tue, 30 Jan 2018 11:52:00 +0000</pubDate>
      
      <guid>http://alphacoder.xyz/deploy-react-django-app-on-heroku/</guid>
      <description>This is a follow up to my post on setting up a React-Django web app. You can take a quick glance if you’ve not seen it yet.
TL;DR: The setup is deployed at http://react-django.herokuapp.com (nothing much there actually) and the code at https://github.com/nicholaskajoh/React-Django.
 We’re going to be deploying the app we setup in the previous post on Heroku. Heroku is a popular cloud hosting platform (PaaS) and offers a generous free tier which we’ll be using.</description>
    </item>
    
    <item>
      <title>Here’s a dead simple React-Django setup for your next project</title>
      <link>http://alphacoder.xyz/dead-simple-react-django-setup/</link>
      <pubDate>Thu, 11 Jan 2018 14:39:00 +0000</pubDate>
      
      <guid>http://alphacoder.xyz/dead-simple-react-django-setup/</guid>
      <description>There are several reasons why you might not want to have separate code bases for the front and back end of your app. For one, the project becomes more portable since it can live in one repository/folder. Then again, everything can be deployed on just one server.
TL;DR: https://github.com/nicholaskajoh/React-Django.
Here’s a simple setup for creating a React-Django project. With just a few tweaks, you can swap out React for Angular or Vue.</description>
    </item>
    
    <item>
      <title>Lazy load your content with Django and jQuery</title>
      <link>http://alphacoder.xyz/lazy-loading-with-django-and-jquery/</link>
      <pubDate>Sun, 26 Feb 2017 05:43:00 +0000</pubDate>
      
      <guid>http://alphacoder.xyz/lazy-loading-with-django-and-jquery/</guid>
      <description>Outlined in this tutorial is a simple way to lazy load content using Django’s built-in pagination and the jQuery library. The code samples shown below are for paginating posts in a blog application.
Templates Create 2 templates, index.html and posts.html.
index.html
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; // A CSRF token is required when making post requests in Django  // To be used for making AJAX requests in script.</description>
    </item>
    
  </channel>
</rss>