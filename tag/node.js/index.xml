<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Node.js on Alpha Coder</title>
    <link>https://alphacoder.xyz/tag/node.js/</link>
    <description>Recent content in Node.js on Alpha Coder</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright 2020 to ∞. Try Catch Finally Solutions Ltd. All rights reserved.</copyright>
    <lastBuildDate>Mon, 25 May 2020 23:33:11 +0000</lastBuildDate><atom:link href="https://alphacoder.xyz/tag/node.js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>node_modules: The Node.js black hole</title>
      <link>https://alphacoder.xyz/node-modules/</link>
      <pubDate>Mon, 25 May 2020 23:33:11 +0000</pubDate>
      
      <guid>https://alphacoder.xyz/node-modules/</guid>
      <description>As a Node.js developer, you know just how large (in terms of number of files and directory size) node_modules can be (you&amp;rsquo;ve probably aready seen the memes). But have you ever asked WHY? I hadn&amp;rsquo;t, up until recently, after which I did some goofing around on the interwebs out of curiosity.
Turns out it has to do with 2 things:
 How npm (the Node package manager) resolves dependencies. How the Node.</description>
    </item>
    
    <item>
      <title>Fixing UnhandledPromiseRejectionWarning in Node.js</title>
      <link>https://alphacoder.xyz/nodejs-unhandled-promise-rejection-warning/</link>
      <pubDate>Mon, 04 Mar 2019 13:54:48 +0100</pubDate>
      
      <guid>https://alphacoder.xyz/nodejs-unhandled-promise-rejection-warning/</guid>
      <description>JavaScript exhibits asynchronous behaviour for operations that are not completed immediately e.g a HTTP request or timer. These operations accept callbacks — functions which are executed when an operation has been completed.
setTimeout(function() { console.log(&amp;#39;Slow and steady wins the race.&amp;#39;); }, 5000); console.log(&amp;#39;The last shall be the first!&amp;#39;); If you&amp;rsquo;ve written JavaScript for a while, you&amp;rsquo;re probably familiar with callback hell. Callbacks can easily make code unreadable and difficult to reason about.</description>
    </item>
    
  </channel>
</rss>
