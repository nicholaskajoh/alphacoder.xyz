<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>System Design on Alpha Coder</title>
    <link>https://alphacoder.xyz/tag/system-design/</link>
    <description>Recent content in System Design on Alpha Coder</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright 2017 to ∞. Nicholas Kajoh. All rights reserved.</copyright>
    <lastBuildDate>Sun, 09 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://alphacoder.xyz/tag/system-design/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A scalable data structure for your configuration database</title>
      <link>https://alphacoder.xyz/config-db-data-structure/</link>
      <pubDate>Sun, 09 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://alphacoder.xyz/config-db-data-structure/</guid>
      <description>Most software of reasonable complexity are configurable—that is, they allow you change their functionality through the use of flags/settings. While you could store configuration information in code or text files, for web apps, it’s more common to store them in databases. This allows you make changes to the configs at runtime i.e without having to restart or redeploy your app.
In this article, I’ll be exploring the ways I thought about improving the config storage mechanism in a large enterprise system I worked on, which made use of thousands of configs.</description>
    </item>
    
    <item>
      <title>How to version REST APIs</title>
      <link>https://alphacoder.xyz/rest-api-versioning/</link>
      <pubDate>Sun, 28 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://alphacoder.xyz/rest-api-versioning/</guid>
      <description>Having worked at companies that sell API products in the last couple years, I’ve found myself contemplating—for hours on end in the shower—what the best way to version REST APIs is. You want simplicity and stability so that your API is easy for developers to integrate. But you also want to iterate on your product and add new features to improve your offering. Eventually, you’ll need to introduce breaking changes. Maybe you’re expanding the scope of an endpoint so you want to reorganize the parameters in the request payload, or a field in the response body needs to be removed for security or compliance reasons.</description>
    </item>
    
    <item>
      <title>What level of abstraction should I play on?</title>
      <link>https://alphacoder.xyz/levels-of-abstraction/</link>
      <pubDate>Sun, 12 Apr 2020 18:17:48 +0000</pubDate>
      
      <guid>https://alphacoder.xyz/levels-of-abstraction/</guid>
      <description>&amp;ldquo;I built it from scratch!&amp;rdquo;
A major sentiment among some of the developer circles I interacted with and was part of in my earlier days of coding was that you were a better &amp;ldquo;real&amp;rdquo; developer if you could build stuff &amp;ldquo;from scratch&amp;rdquo;. You&amp;rsquo;d often hear people scoff at building websites with WordPress, for example. &amp;ldquo;I built this site from scratch with raw HTML, CSS and JavaScript. No framework or CMS!&amp;rdquo; It was a thing of pride.</description>
    </item>
    
    <item>
      <title>Authentication strategies in microservices architecture</title>
      <link>https://alphacoder.xyz/microservices-architecture-authentication/</link>
      <pubDate>Sun, 29 Sep 2019 17:37:55 +0000</pubDate>
      
      <guid>https://alphacoder.xyz/microservices-architecture-authentication/</guid>
      <description>When moving from monolith to microservices or considering microservices for a greenfield project, it&amp;rsquo;s important to evaluate the authentication strategies available to you to find the one most suitable for your system, as authentication is an integral part of how most applications are interacted with.
In this article, I outline the most common auth strategies I&amp;rsquo;ve come across working with microservices, describing how they work and identifying their pros and cons.</description>
    </item>
    
  </channel>
</rss>
